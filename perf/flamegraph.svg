<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="518" onload="init(evt)" viewBox="0 0 1200 518" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="518" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="501.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="501.00"> </text><svg id="frames" x="10" width="1180" total_samples="60981"><g><title>perf`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (87 samples, 0.14%)</title><rect x="0.0000%" y="341" width="0.1427%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="87"/><text x="0.2500%" y="351.50"></text></g><g><title>perf`hound::write::WavWriter&lt;W&gt;::write_sample (34 samples, 0.06%)</title><rect x="0.1427%" y="341" width="0.0558%" height="15" fill="rgb(217,0,24)" fg:x="87" fg:w="34"/><text x="0.3927%" y="351.50"></text></g><g><title>perf`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (139 samples, 0.23%)</title><rect x="1.8678%" y="325" width="0.2279%" height="15" fill="rgb(221,193,54)" fg:x="1139" fg:w="139"/><text x="2.1178%" y="335.50"></text></g><g><title>perf`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (923 samples, 1.51%)</title><rect x="2.3712%" y="309" width="1.5136%" height="15" fill="rgb(248,212,6)" fg:x="1446" fg:w="923"/><text x="2.6212%" y="319.50"></text></g><g><title>perf`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,801 samples, 2.95%)</title><rect x="2.0957%" y="325" width="2.9534%" height="15" fill="rgb(208,68,35)" fg:x="1278" fg:w="1801"/><text x="2.3457%" y="335.50">per..</text></g><g><title>perf`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (710 samples, 1.16%)</title><rect x="3.8848%" y="309" width="1.1643%" height="15" fill="rgb(232,128,0)" fg:x="2369" fg:w="710"/><text x="4.1348%" y="319.50"></text></g><g><title>perf`rustfft::neon::neon_butterflies::NeonF32Butterfly8&lt;T&gt;::perform_fft_butterfly_multi (7 samples, 0.01%)</title><rect x="5.0950%" y="213" width="0.0115%" height="15" fill="rgb(207,160,47)" fg:x="3107" fg:w="7"/><text x="5.3450%" y="223.50"></text></g><g><title>perf`rustfft::array_utils::iter_chunks (7 samples, 0.01%)</title><rect x="5.0950%" y="197" width="0.0115%" height="15" fill="rgb(228,23,34)" fg:x="3107" fg:w="7"/><text x="5.3450%" y="207.50"></text></g><g><title>perf`rustfft::neon::neon_butterflies::NeonF32Butterfly8&lt;T&gt;::perform_fft_butterfly_multi::_{{closure}} (7 samples, 0.01%)</title><rect x="5.0950%" y="181" width="0.0115%" height="15" fill="rgb(218,30,26)" fg:x="3107" fg:w="7"/><text x="5.3450%" y="191.50"></text></g><g><title>perf`&lt;realfft::RealToComplexEven&lt;T&gt; as realfft::RealToComplex&lt;T&gt;&gt;::process_with_scratch (36 samples, 0.06%)</title><rect x="5.0688%" y="293" width="0.0590%" height="15" fill="rgb(220,122,19)" fg:x="3091" fg:w="36"/><text x="5.3188%" y="303.50"></text></g><g><title>perf`&lt;rustfft::neon::neon_radix4::Neon32Radix4&lt;T&gt; as rustfft::Fft&lt;T&gt;&gt;::process_outofplace_with_scratch (28 samples, 0.05%)</title><rect x="5.0819%" y="277" width="0.0459%" height="15" fill="rgb(250,228,42)" fg:x="3099" fg:w="28"/><text x="5.3319%" y="287.50"></text></g><g><title>perf`rustfft::array_utils::iter_chunks_zipped (28 samples, 0.05%)</title><rect x="5.0819%" y="261" width="0.0459%" height="15" fill="rgb(240,193,28)" fg:x="3099" fg:w="28"/><text x="5.3319%" y="271.50"></text></g><g><title>perf`&lt;rustfft::neon::neon_radix4::Neon32Radix4&lt;T&gt; as rustfft::Fft&lt;T&gt;&gt;::process_outofplace_with_scratch::_{{closure}} (28 samples, 0.05%)</title><rect x="5.0819%" y="245" width="0.0459%" height="15" fill="rgb(216,20,37)" fg:x="3099" fg:w="28"/><text x="5.3319%" y="255.50"></text></g><g><title>perf`rustfft::neon::neon_radix4::Neon32Radix4&lt;T&gt;::perform_fft_out_of_place (28 samples, 0.05%)</title><rect x="5.0819%" y="229" width="0.0459%" height="15" fill="rgb(206,188,39)" fg:x="3099" fg:w="28"/><text x="5.3319%" y="239.50"></text></g><g><title>perf`rustfft::neon::neon_radix4::butterfly_4_32 (13 samples, 0.02%)</title><rect x="5.1065%" y="213" width="0.0213%" height="15" fill="rgb(217,207,13)" fg:x="3114" fg:w="13"/><text x="5.3565%" y="223.50"></text></g><g><title>perf`convrs::conv::Conv::new (44 samples, 0.07%)</title><rect x="5.0622%" y="325" width="0.0722%" height="15" fill="rgb(231,73,38)" fg:x="3087" fg:w="44"/><text x="5.3122%" y="335.50"></text></g><g><title>perf`convrs::upconv::UPConv::new (43 samples, 0.07%)</title><rect x="5.0639%" y="309" width="0.0705%" height="15" fill="rgb(225,20,46)" fg:x="3088" fg:w="43"/><text x="5.3139%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3,915 samples, 6.42%)</title><rect x="5.1360%" y="309" width="6.4200%" height="15" fill="rgb(210,31,41)" fg:x="3132" fg:w="3915"/><text x="5.3860%" y="319.50">libsyste..</text></g><g><title>perf`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (65 samples, 0.11%)</title><rect x="11.6003%" y="293" width="0.1066%" height="15" fill="rgb(221,200,47)" fg:x="7074" fg:w="65"/><text x="11.8503%" y="303.50"></text></g><g><title>perf`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (26 samples, 0.04%)</title><rect x="11.6643%" y="277" width="0.0426%" height="15" fill="rgb(226,26,5)" fg:x="7113" fg:w="26"/><text x="11.9143%" y="287.50"></text></g><g><title>perf`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (29 samples, 0.05%)</title><rect x="11.7069%" y="293" width="0.0476%" height="15" fill="rgb(249,33,26)" fg:x="7139" fg:w="29"/><text x="11.9569%" y="303.50"></text></g><g><title>perf`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (14 samples, 0.02%)</title><rect x="11.7315%" y="277" width="0.0230%" height="15" fill="rgb(235,183,28)" fg:x="7154" fg:w="14"/><text x="11.9815%" y="287.50"></text></g><g><title>perf`&lt;f32 as core::ops::arith::Add&gt;::add (9 samples, 0.01%)</title><rect x="11.7578%" y="293" width="0.0148%" height="15" fill="rgb(221,5,38)" fg:x="7170" fg:w="9"/><text x="12.0078%" y="303.50"></text></g><g><title>perf`&lt;f32 as core::ops::arith::AddAssign&gt;::add_assign (9 samples, 0.01%)</title><rect x="11.7725%" y="293" width="0.0148%" height="15" fill="rgb(247,18,42)" fg:x="7179" fg:w="9"/><text x="12.0225%" y="303.50"></text></g><g><title>perf`&lt;f32 as core::ops::arith::Mul&gt;::mul (27 samples, 0.04%)</title><rect x="11.7873%" y="293" width="0.0443%" height="15" fill="rgb(241,131,45)" fg:x="7188" fg:w="27"/><text x="12.0373%" y="303.50"></text></g><g><title>perf`&lt;f32 as core::ops::arith::Sub&gt;::sub (11 samples, 0.02%)</title><rect x="11.8316%" y="293" width="0.0180%" height="15" fill="rgb(249,31,29)" fg:x="7215" fg:w="11"/><text x="12.0816%" y="303.50"></text></g><g><title>perf`&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Mul&gt;::mul (65 samples, 0.11%)</title><rect x="11.8496%" y="293" width="0.1066%" height="15" fill="rgb(225,111,53)" fg:x="7226" fg:w="65"/><text x="12.0996%" y="303.50"></text></g><g><title>perf`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.01%)</title><rect x="11.9595%" y="261" width="0.0131%" height="15" fill="rgb(238,160,17)" fg:x="7293" fg:w="8"/><text x="12.2095%" y="271.50"></text></g><g><title>perf`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.01%)</title><rect x="11.9595%" y="277" width="0.0148%" height="15" fill="rgb(214,148,48)" fg:x="7293" fg:w="9"/><text x="12.2095%" y="287.50"></text></g><g><title>perf`rustfft::neon::neon_butterflies::NeonF32Butterfly8&lt;T&gt;::perform_fft_butterfly_multi (11 samples, 0.02%)</title><rect x="12.0054%" y="213" width="0.0180%" height="15" fill="rgb(232,36,49)" fg:x="7321" fg:w="11"/><text x="12.2554%" y="223.50"></text></g><g><title>perf`rustfft::array_utils::iter_chunks (11 samples, 0.02%)</title><rect x="12.0054%" y="197" width="0.0180%" height="15" fill="rgb(209,103,24)" fg:x="7321" fg:w="11"/><text x="12.2554%" y="207.50"></text></g><g><title>perf`rustfft::neon::neon_butterflies::NeonF32Butterfly8&lt;T&gt;::perform_fft_butterfly_multi::_{{closure}} (10 samples, 0.02%)</title><rect x="12.0070%" y="181" width="0.0164%" height="15" fill="rgb(229,88,8)" fg:x="7322" fg:w="10"/><text x="12.2570%" y="191.50"></text></g><g><title>perf`&lt;realfft::ComplexToRealEven&lt;T&gt; as realfft::ComplexToReal&lt;T&gt;&gt;::process_with_scratch (54 samples, 0.09%)</title><rect x="11.9562%" y="293" width="0.0886%" height="15" fill="rgb(213,181,19)" fg:x="7291" fg:w="54"/><text x="12.2062%" y="303.50"></text></g><g><title>perf`&lt;rustfft::neon::neon_radix4::Neon32Radix4&lt;T&gt; as rustfft::Fft&lt;T&gt;&gt;::process_outofplace_with_scratch (30 samples, 0.05%)</title><rect x="11.9955%" y="277" width="0.0492%" height="15" fill="rgb(254,191,54)" fg:x="7315" fg:w="30"/><text x="12.2455%" y="287.50"></text></g><g><title>perf`rustfft::array_utils::iter_chunks_zipped (30 samples, 0.05%)</title><rect x="11.9955%" y="261" width="0.0492%" height="15" fill="rgb(241,83,37)" fg:x="7315" fg:w="30"/><text x="12.2455%" y="271.50"></text></g><g><title>perf`&lt;rustfft::neon::neon_radix4::Neon32Radix4&lt;T&gt; as rustfft::Fft&lt;T&gt;&gt;::process_outofplace_with_scratch::_{{closure}} (30 samples, 0.05%)</title><rect x="11.9955%" y="245" width="0.0492%" height="15" fill="rgb(233,36,39)" fg:x="7315" fg:w="30"/><text x="12.2455%" y="255.50"></text></g><g><title>perf`rustfft::neon::neon_radix4::Neon32Radix4&lt;T&gt;::perform_fft_out_of_place (30 samples, 0.05%)</title><rect x="11.9955%" y="229" width="0.0492%" height="15" fill="rgb(226,3,54)" fg:x="7315" fg:w="30"/><text x="12.2455%" y="239.50"></text></g><g><title>perf`rustfft::neon::neon_radix4::butterfly_4_32 (13 samples, 0.02%)</title><rect x="12.0234%" y="213" width="0.0213%" height="15" fill="rgb(245,192,40)" fg:x="7332" fg:w="13"/><text x="12.2734%" y="223.50"></text></g><g><title>perf`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.01%)</title><rect x="12.0480%" y="277" width="0.0115%" height="15" fill="rgb(238,167,29)" fg:x="7347" fg:w="7"/><text x="12.2980%" y="287.50"></text></g><g><title>perf`rustfft::neon::neon_butterflies::NeonF32Butterfly8&lt;T&gt;::perform_fft_butterfly_multi (14 samples, 0.02%)</title><rect x="12.0825%" y="213" width="0.0230%" height="15" fill="rgb(232,182,51)" fg:x="7368" fg:w="14"/><text x="12.3325%" y="223.50"></text></g><g><title>perf`rustfft::array_utils::iter_chunks (14 samples, 0.02%)</title><rect x="12.0825%" y="197" width="0.0230%" height="15" fill="rgb(231,60,39)" fg:x="7368" fg:w="14"/><text x="12.3325%" y="207.50"></text></g><g><title>perf`rustfft::neon::neon_butterflies::NeonF32Butterfly8&lt;T&gt;::perform_fft_butterfly_multi::_{{closure}} (13 samples, 0.02%)</title><rect x="12.0841%" y="181" width="0.0213%" height="15" fill="rgb(208,69,12)" fg:x="7369" fg:w="13"/><text x="12.3341%" y="191.50"></text></g><g><title>perf`&lt;realfft::RealToComplexEven&lt;T&gt; as realfft::RealToComplex&lt;T&gt;&gt;::process_with_scratch (47 samples, 0.08%)</title><rect x="12.0447%" y="293" width="0.0771%" height="15" fill="rgb(235,93,37)" fg:x="7345" fg:w="47"/><text x="12.2947%" y="303.50"></text></g><g><title>perf`&lt;rustfft::neon::neon_radix4::Neon32Radix4&lt;T&gt; as rustfft::Fft&lt;T&gt;&gt;::process_outofplace_with_scratch (31 samples, 0.05%)</title><rect x="12.0710%" y="277" width="0.0508%" height="15" fill="rgb(213,116,39)" fg:x="7361" fg:w="31"/><text x="12.3210%" y="287.50"></text></g><g><title>perf`rustfft::array_utils::iter_chunks_zipped (31 samples, 0.05%)</title><rect x="12.0710%" y="261" width="0.0508%" height="15" fill="rgb(222,207,29)" fg:x="7361" fg:w="31"/><text x="12.3210%" y="271.50"></text></g><g><title>perf`&lt;rustfft::neon::neon_radix4::Neon32Radix4&lt;T&gt; as rustfft::Fft&lt;T&gt;&gt;::process_outofplace_with_scratch::_{{closure}} (31 samples, 0.05%)</title><rect x="12.0710%" y="245" width="0.0508%" height="15" fill="rgb(206,96,30)" fg:x="7361" fg:w="31"/><text x="12.3210%" y="255.50"></text></g><g><title>perf`rustfft::neon::neon_radix4::Neon32Radix4&lt;T&gt;::perform_fft_out_of_place (31 samples, 0.05%)</title><rect x="12.0710%" y="229" width="0.0508%" height="15" fill="rgb(218,138,4)" fg:x="7361" fg:w="31"/><text x="12.3210%" y="239.50"></text></g><g><title>perf`rustfft::neon::neon_radix4::butterfly_4_32 (10 samples, 0.02%)</title><rect x="12.1054%" y="213" width="0.0164%" height="15" fill="rgb(250,191,14)" fg:x="7382" fg:w="10"/><text x="12.3554%" y="223.50"></text></g><g><title>perf`&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (18 samples, 0.03%)</title><rect x="12.1316%" y="277" width="0.0295%" height="15" fill="rgb(239,60,40)" fg:x="7398" fg:w="18"/><text x="12.3816%" y="287.50"></text></g><g><title>perf`core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (30 samples, 0.05%)</title><rect x="12.1300%" y="293" width="0.0492%" height="15" fill="rgb(206,27,48)" fg:x="7397" fg:w="30"/><text x="12.3800%" y="303.50"></text></g><g><title>perf`&lt;usize as core::iter::range::Step&gt;::forward_unchecked (11 samples, 0.02%)</title><rect x="12.1612%" y="277" width="0.0180%" height="15" fill="rgb(225,35,8)" fg:x="7416" fg:w="11"/><text x="12.4112%" y="287.50"></text></g><g><title>perf`core::slice::_&lt;impl [T]&gt;::fill (7 samples, 0.01%)</title><rect x="12.1825%" y="293" width="0.0115%" height="15" fill="rgb(250,213,24)" fg:x="7429" fg:w="7"/><text x="12.4325%" y="303.50"></text></g><g><title>perf`num_complex::Complex&lt;T&gt;::new (12 samples, 0.02%)</title><rect x="12.1940%" y="293" width="0.0197%" height="15" fill="rgb(247,123,22)" fg:x="7436" fg:w="12"/><text x="12.4440%" y="303.50"></text></g><g><title>perf`convrs::upconv::UPConv::process_block (397 samples, 0.65%)</title><rect x="11.5725%" y="309" width="0.6510%" height="15" fill="rgb(231,138,38)" fg:x="7057" fg:w="397"/><text x="11.8225%" y="319.50"></text></g><g><title>perf`convrs::conv::Conv::process_block (4,336 samples, 7.11%)</title><rect x="5.1344%" y="325" width="7.1104%" height="15" fill="rgb(231,145,46)" fg:x="3131" fg:w="4336"/><text x="5.3844%" y="335.50">perf`convr..</text></g><g><title>perf`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (56 samples, 0.09%)</title><rect x="12.3137%" y="293" width="0.0918%" height="15" fill="rgb(251,118,11)" fg:x="7509" fg:w="56"/><text x="12.5637%" y="303.50"></text></g><g><title>perf`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (34 samples, 0.06%)</title><rect x="12.4055%" y="293" width="0.0558%" height="15" fill="rgb(217,147,25)" fg:x="7565" fg:w="34"/><text x="12.6555%" y="303.50"></text></g><g><title>perf`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (131 samples, 0.21%)</title><rect x="12.2924%" y="309" width="0.2148%" height="15" fill="rgb(247,81,37)" fg:x="7496" fg:w="131"/><text x="12.5424%" y="319.50"></text></g><g><title>perf`&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (28 samples, 0.05%)</title><rect x="12.4613%" y="293" width="0.0459%" height="15" fill="rgb(209,12,38)" fg:x="7599" fg:w="28"/><text x="12.7113%" y="303.50"></text></g><g><title>perf`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.01%)</title><rect x="12.5187%" y="277" width="0.0131%" height="15" fill="rgb(227,1,9)" fg:x="7634" fg:w="8"/><text x="12.7687%" y="287.50"></text></g><g><title>perf`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.01%)</title><rect x="12.5187%" y="261" width="0.0131%" height="15" fill="rgb(248,47,43)" fg:x="7634" fg:w="8"/><text x="12.7687%" y="271.50"></text></g><g><title>perf`rustfft::neon::neon_butterflies::NeonF32Butterfly8&lt;T&gt;::perform_fft_butterfly_multi (11 samples, 0.02%)</title><rect x="12.5662%" y="213" width="0.0180%" height="15" fill="rgb(221,10,30)" fg:x="7663" fg:w="11"/><text x="12.8162%" y="223.50"></text></g><g><title>perf`rustfft::array_utils::iter_chunks (11 samples, 0.02%)</title><rect x="12.5662%" y="197" width="0.0180%" height="15" fill="rgb(210,229,1)" fg:x="7663" fg:w="11"/><text x="12.8162%" y="207.50"></text></g><g><title>perf`rustfft::neon::neon_butterflies::NeonF32Butterfly8&lt;T&gt;::perform_fft_butterfly_multi::_{{closure}} (11 samples, 0.02%)</title><rect x="12.5662%" y="181" width="0.0180%" height="15" fill="rgb(222,148,37)" fg:x="7663" fg:w="11"/><text x="12.8162%" y="191.50"></text></g><g><title>perf`&lt;rustfft::neon::neon_radix4::Neon32Radix4&lt;T&gt; as rustfft::Fft&lt;T&gt;&gt;::process_outofplace_with_scratch (30 samples, 0.05%)</title><rect x="12.5547%" y="277" width="0.0492%" height="15" fill="rgb(234,67,33)" fg:x="7656" fg:w="30"/><text x="12.8047%" y="287.50"></text></g><g><title>perf`rustfft::array_utils::iter_chunks_zipped (30 samples, 0.05%)</title><rect x="12.5547%" y="261" width="0.0492%" height="15" fill="rgb(247,98,35)" fg:x="7656" fg:w="30"/><text x="12.8047%" y="271.50"></text></g><g><title>perf`&lt;rustfft::neon::neon_radix4::Neon32Radix4&lt;T&gt; as rustfft::Fft&lt;T&gt;&gt;::process_outofplace_with_scratch::_{{closure}} (30 samples, 0.05%)</title><rect x="12.5547%" y="245" width="0.0492%" height="15" fill="rgb(247,138,52)" fg:x="7656" fg:w="30"/><text x="12.8047%" y="255.50"></text></g><g><title>perf`rustfft::neon::neon_radix4::Neon32Radix4&lt;T&gt;::perform_fft_out_of_place (30 samples, 0.05%)</title><rect x="12.5547%" y="229" width="0.0492%" height="15" fill="rgb(213,79,30)" fg:x="7656" fg:w="30"/><text x="12.8047%" y="239.50"></text></g><g><title>perf`rustfft::neon::neon_radix4::butterfly_4_32 (12 samples, 0.02%)</title><rect x="12.5842%" y="213" width="0.0197%" height="15" fill="rgb(246,177,23)" fg:x="7674" fg:w="12"/><text x="12.8342%" y="223.50"></text></g><g><title>perf`&lt;realfft::RealToComplexEven&lt;T&gt; as realfft::RealToComplex&lt;T&gt;&gt;::process_with_scratch (57 samples, 0.09%)</title><rect x="12.5121%" y="293" width="0.0935%" height="15" fill="rgb(230,62,27)" fg:x="7630" fg:w="57"/><text x="12.7621%" y="303.50"></text></g><g><title>perf`convrs::upconv::UPConv::update_filter (68 samples, 0.11%)</title><rect x="12.5072%" y="309" width="0.1115%" height="15" fill="rgb(216,154,8)" fg:x="7627" fg:w="68"/><text x="12.7572%" y="319.50"></text></g><g><title>perf`core::slice::_&lt;impl [T]&gt;::fill (8 samples, 0.01%)</title><rect x="12.6056%" y="293" width="0.0131%" height="15" fill="rgb(244,35,45)" fg:x="7687" fg:w="8"/><text x="12.8556%" y="303.50"></text></g><g><title>perf`&lt;[T] as core::slice::specialize::SpecFill&lt;T&gt;&gt;::spec_fill (28 samples, 0.05%)</title><rect x="12.6187%" y="293" width="0.0459%" height="15" fill="rgb(251,115,12)" fg:x="7695" fg:w="28"/><text x="12.8687%" y="303.50"></text></g><g><title>perf`core::slice::_&lt;impl [T]&gt;::fill (120 samples, 0.20%)</title><rect x="12.6187%" y="309" width="0.1968%" height="15" fill="rgb(240,54,50)" fg:x="7695" fg:w="120"/><text x="12.8687%" y="319.50"></text></g><g><title>perf`&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (92 samples, 0.15%)</title><rect x="12.6646%" y="293" width="0.1509%" height="15" fill="rgb(233,84,52)" fg:x="7723" fg:w="92"/><text x="12.9146%" y="303.50"></text></g><g><title>perf`&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (66 samples, 0.11%)</title><rect x="12.8565%" y="229" width="0.1082%" height="15" fill="rgb(207,117,47)" fg:x="7840" fg:w="66"/><text x="13.1065%" y="239.50"></text></g><g><title>perf`&lt;rtrb::chunks::WriteChunk&lt;T&gt; as core::convert::From&lt;rtrb::chunks::WriteChunkUninit&lt;T&gt;&gt;&gt;::from (114 samples, 0.19%)</title><rect x="12.8155%" y="261" width="0.1869%" height="15" fill="rgb(249,43,39)" fg:x="7815" fg:w="114"/><text x="13.0655%" y="271.50"></text></g><g><title>perf`core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (96 samples, 0.16%)</title><rect x="12.8450%" y="245" width="0.1574%" height="15" fill="rgb(209,38,44)" fg:x="7833" fg:w="96"/><text x="13.0950%" y="255.50"></text></g><g><title>perf`&lt;usize as core::iter::range::Step&gt;::forward_unchecked (23 samples, 0.04%)</title><rect x="12.9647%" y="229" width="0.0377%" height="15" fill="rgb(236,212,23)" fg:x="7906" fg:w="23"/><text x="13.2147%" y="239.50"></text></g><g><title>perf`convrs::conv::Conv::update_filter (465 samples, 0.76%)</title><rect x="12.2448%" y="325" width="0.7625%" height="15" fill="rgb(242,79,21)" fg:x="7467" fg:w="465"/><text x="12.4948%" y="335.50"></text></g><g><title>perf`rtrb::chunks::_&lt;impl rtrb::Producer&lt;T&gt;&gt;::write_chunk (117 samples, 0.19%)</title><rect x="12.8155%" y="309" width="0.1919%" height="15" fill="rgb(211,96,35)" fg:x="7815" fg:w="117"/><text x="13.0655%" y="319.50"></text></g><g><title>perf`core::result::Result&lt;T,E&gt;::map (117 samples, 0.19%)</title><rect x="12.8155%" y="293" width="0.1919%" height="15" fill="rgb(253,215,40)" fg:x="7815" fg:w="117"/><text x="13.0655%" y="303.50"></text></g><g><title>perf`core::ops::function::FnOnce::call_once (117 samples, 0.19%)</title><rect x="12.8155%" y="277" width="0.1919%" height="15" fill="rgb(211,81,21)" fg:x="7815" fg:w="117"/><text x="13.0655%" y="287.50"></text></g><g><title>perf`core::cmp::min_by (7 samples, 0.01%)</title><rect x="13.0467%" y="149" width="0.0115%" height="15" fill="rgb(208,190,38)" fg:x="7956" fg:w="7"/><text x="13.2967%" y="159.50"></text></g><g><title>perf`&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (35 samples, 0.06%)</title><rect x="13.0418%" y="165" width="0.0574%" height="15" fill="rgb(235,213,38)" fg:x="7953" fg:w="35"/><text x="13.2918%" y="175.50"></text></g><g><title>perf`std::io::impls::_&lt;impl std::io::Read for &amp;[u8]&gt;::read (20 samples, 0.03%)</title><rect x="13.0664%" y="149" width="0.0328%" height="15" fill="rgb(237,122,38)" fg:x="7968" fg:w="20"/><text x="13.3164%" y="159.50"></text></g><g><title>perf`core::slice::index::_&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (12 samples, 0.02%)</title><rect x="13.1024%" y="165" width="0.0197%" height="15" fill="rgb(244,218,35)" fg:x="7990" fg:w="12"/><text x="13.3524%" y="175.50"></text></g><g><title>perf`&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (12 samples, 0.02%)</title><rect x="13.1024%" y="149" width="0.0197%" height="15" fill="rgb(240,68,47)" fg:x="7990" fg:w="12"/><text x="13.3524%" y="159.50"></text></g><g><title>perf`&lt;i16 as hound::Sample&gt;::read (65 samples, 0.11%)</title><rect x="13.0188%" y="181" width="0.1066%" height="15" fill="rgb(210,16,53)" fg:x="7939" fg:w="65"/><text x="13.2688%" y="191.50"></text></g><g><title>perf`core::cmp::min_by (8 samples, 0.01%)</title><rect x="13.1664%" y="133" width="0.0131%" height="15" fill="rgb(235,124,12)" fg:x="8029" fg:w="8"/><text x="13.4164%" y="143.50"></text></g><g><title>perf`&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (28 samples, 0.05%)</title><rect x="13.1418%" y="165" width="0.0459%" height="15" fill="rgb(224,169,11)" fg:x="8014" fg:w="28"/><text x="13.3918%" y="175.50"></text></g><g><title>perf`std::io::impls::_&lt;impl std::io::Read for &amp;[u8]&gt;::read (17 samples, 0.03%)</title><rect x="13.1598%" y="149" width="0.0279%" height="15" fill="rgb(250,166,2)" fg:x="8025" fg:w="17"/><text x="13.4098%" y="159.50"></text></g><g><title>perf`core::slice::index::_&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (7 samples, 0.01%)</title><rect x="13.1877%" y="165" width="0.0115%" height="15" fill="rgb(242,216,29)" fg:x="8042" fg:w="7"/><text x="13.4377%" y="175.50"></text></g><g><title>perf`&lt;i32 as hound::Sample&gt;::read (46 samples, 0.08%)</title><rect x="13.1254%" y="181" width="0.0754%" height="15" fill="rgb(230,116,27)" fg:x="8004" fg:w="46"/><text x="13.3754%" y="191.50"></text></g><g><title>perf`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (121 samples, 0.20%)</title><rect x="13.0106%" y="229" width="0.1984%" height="15" fill="rgb(228,99,48)" fg:x="7934" fg:w="121"/><text x="13.2606%" y="239.50"></text></g><g><title>perf`&lt;hound::read::WavSamples&lt;R,S&gt; as core::iter::traits::iterator::Iterator&gt;::next (117 samples, 0.19%)</title><rect x="13.0172%" y="213" width="0.1919%" height="15" fill="rgb(253,11,6)" fg:x="7938" fg:w="117"/><text x="13.2672%" y="223.50"></text></g><g><title>perf`hound::read::iter_next (117 samples, 0.19%)</title><rect x="13.0172%" y="197" width="0.1919%" height="15" fill="rgb(247,143,39)" fg:x="7938" fg:w="117"/><text x="13.2672%" y="207.50"></text></g><g><title>perf`core::iter::traits::iterator::Iterator::collect (123 samples, 0.20%)</title><rect x="13.0090%" y="325" width="0.2017%" height="15" fill="rgb(236,97,10)" fg:x="7933" fg:w="123"/><text x="13.2590%" y="335.50"></text></g><g><title>perf`&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (123 samples, 0.20%)</title><rect x="13.0090%" y="309" width="0.2017%" height="15" fill="rgb(233,208,19)" fg:x="7933" fg:w="123"/><text x="13.2590%" y="319.50"></text></g><g><title>perf`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (123 samples, 0.20%)</title><rect x="13.0090%" y="293" width="0.2017%" height="15" fill="rgb(216,164,2)" fg:x="7933" fg:w="123"/><text x="13.2590%" y="303.50"></text></g><g><title>perf`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (123 samples, 0.20%)</title><rect x="13.0090%" y="277" width="0.2017%" height="15" fill="rgb(220,129,5)" fg:x="7933" fg:w="123"/><text x="13.2590%" y="287.50"></text></g><g><title>perf`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (123 samples, 0.20%)</title><rect x="13.0090%" y="261" width="0.2017%" height="15" fill="rgb(242,17,10)" fg:x="7933" fg:w="123"/><text x="13.2590%" y="271.50"></text></g><g><title>perf`alloc::vec::Vec&lt;T,A&gt;::extend_desugared (123 samples, 0.20%)</title><rect x="13.0090%" y="245" width="0.2017%" height="15" fill="rgb(242,107,0)" fg:x="7933" fg:w="123"/><text x="13.2590%" y="255.50"></text></g><g><title>perf`core::ptr::drop_in_place&lt;hound::write::WavWriter&lt;std::io::buffered::bufwriter::BufWriter&lt;std::fs::File&gt;&gt;&gt; (8 samples, 0.01%)</title><rect x="13.2156%" y="325" width="0.0131%" height="15" fill="rgb(251,28,31)" fg:x="8059" fg:w="8"/><text x="13.4656%" y="335.50"></text></g><g><title>perf`&lt;hound::write::WavWriter&lt;W&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.01%)</title><rect x="13.2156%" y="309" width="0.0131%" height="15" fill="rgb(233,223,10)" fg:x="8059" fg:w="8"/><text x="13.4656%" y="319.50"></text></g><g><title>perf`hound::write::WavWriter&lt;W&gt;::update_header (8 samples, 0.01%)</title><rect x="13.2156%" y="293" width="0.0131%" height="15" fill="rgb(215,21,27)" fg:x="8059" fg:w="8"/><text x="13.4656%" y="303.50"></text></g><g><title>perf`core::panicking::panic_nounwind (8 samples, 0.01%)</title><rect x="13.2156%" y="277" width="0.0131%" height="15" fill="rgb(232,23,21)" fg:x="8059" fg:w="8"/><text x="13.4656%" y="287.50"></text></g><g><title>perf`core::panicking::panic_nounwind_fmt (8 samples, 0.01%)</title><rect x="13.2156%" y="261" width="0.0131%" height="15" fill="rgb(244,5,23)" fg:x="8059" fg:w="8"/><text x="13.4656%" y="271.50"></text></g><g><title>perf`&lt;std::panicking::begin_panic_handler::FormatStringPayload as core::panic::PanicPayload&gt;::take_box (8 samples, 0.01%)</title><rect x="13.2156%" y="245" width="0.0131%" height="15" fill="rgb(226,81,46)" fg:x="8059" fg:w="8"/><text x="13.4656%" y="255.50"></text></g><g><title>perf`std::sys_common::backtrace::output_filename (8 samples, 0.01%)</title><rect x="13.2156%" y="229" width="0.0131%" height="15" fill="rgb(247,70,30)" fg:x="8059" fg:w="8"/><text x="13.4656%" y="239.50"></text></g><g><title>perf`std::panicking::begin_panic_handler::_{{closure}} (8 samples, 0.01%)</title><rect x="13.2156%" y="213" width="0.0131%" height="15" fill="rgb(212,68,19)" fg:x="8059" fg:w="8"/><text x="13.4656%" y="223.50"></text></g><g><title>perf`std::panicking::rust_panic_with_hook (8 samples, 0.01%)</title><rect x="13.2156%" y="197" width="0.0131%" height="15" fill="rgb(240,187,13)" fg:x="8059" fg:w="8"/><text x="13.4656%" y="207.50"></text></g><g><title>perf`std::panicking::default_hook (8 samples, 0.01%)</title><rect x="13.2156%" y="181" width="0.0131%" height="15" fill="rgb(223,113,26)" fg:x="8059" fg:w="8"/><text x="13.4656%" y="191.50"></text></g><g><title>perf`std::panicking::default_hook::_{{closure}} (8 samples, 0.01%)</title><rect x="13.2156%" y="165" width="0.0131%" height="15" fill="rgb(206,192,2)" fg:x="8059" fg:w="8"/><text x="13.4656%" y="175.50"></text></g><g><title>perf`std::sys_common::backtrace::print (8 samples, 0.01%)</title><rect x="13.2156%" y="149" width="0.0131%" height="15" fill="rgb(241,108,4)" fg:x="8059" fg:w="8"/><text x="13.4656%" y="159.50"></text></g><g><title>perf`std::io::Write::write_fmt (8 samples, 0.01%)</title><rect x="13.2156%" y="133" width="0.0131%" height="15" fill="rgb(247,173,49)" fg:x="8059" fg:w="8"/><text x="13.4656%" y="143.50"></text></g><g><title>perf`core::fmt::write (8 samples, 0.01%)</title><rect x="13.2156%" y="117" width="0.0131%" height="15" fill="rgb(224,114,35)" fg:x="8059" fg:w="8"/><text x="13.4656%" y="127.50"></text></g><g><title>perf`&lt;std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display&gt;::fmt (8 samples, 0.01%)</title><rect x="13.2156%" y="101" width="0.0131%" height="15" fill="rgb(245,159,27)" fg:x="8059" fg:w="8"/><text x="13.4656%" y="111.50"></text></g><g><title>libunwind.dylib`_Unwind_Backtrace (8 samples, 0.01%)</title><rect x="13.2156%" y="85" width="0.0131%" height="15" fill="rgb(245,172,44)" fg:x="8059" fg:w="8"/><text x="13.4656%" y="95.50"></text></g><g><title>perf`std::backtrace_rs::backtrace::libunwind::trace::trace_fn (8 samples, 0.01%)</title><rect x="13.2156%" y="69" width="0.0131%" height="15" fill="rgb(236,23,11)" fg:x="8059" fg:w="8"/><text x="13.4656%" y="79.50"></text></g><g><title>perf`std::sys_common::backtrace::_print_fmt::_{{closure}} (8 samples, 0.01%)</title><rect x="13.2156%" y="53" width="0.0131%" height="15" fill="rgb(205,117,38)" fg:x="8059" fg:w="8"/><text x="13.4656%" y="63.50"></text></g><g><title>perf`std::backtrace_rs::symbolize::gimli::resolve (7 samples, 0.01%)</title><rect x="13.2172%" y="37" width="0.0115%" height="15" fill="rgb(237,72,25)" fg:x="8060" fg:w="7"/><text x="13.4672%" y="47.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1,708 samples, 2.80%)</title><rect x="20.4490%" y="293" width="2.8009%" height="15" fill="rgb(244,70,9)" fg:x="12470" fg:w="1708"/><text x="20.6990%" y="303.50">li..</text></g><g><title>libsystem_kernel.dylib`write (1,550 samples, 2.54%)</title><rect x="28.8778%" y="245" width="2.5418%" height="15" fill="rgb(217,125,39)" fg:x="17610" fg:w="1550"/><text x="29.1278%" y="255.50">li..</text></g><g><title>perf`&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (4,986 samples, 8.18%)</title><rect x="23.2499%" y="293" width="8.1763%" height="15" fill="rgb(235,36,10)" fg:x="14178" fg:w="4986"/><text x="23.4999%" y="303.50">perf`&lt;std::..</text></g><g><title>perf`std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (1,559 samples, 2.56%)</title><rect x="28.8696%" y="277" width="2.5565%" height="15" fill="rgb(251,123,47)" fg:x="17605" fg:w="1559"/><text x="29.1196%" y="287.50">pe..</text></g><g><title>perf`std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (1,556 samples, 2.55%)</title><rect x="28.8746%" y="261" width="2.5516%" height="15" fill="rgb(221,13,13)" fg:x="17608" fg:w="1556"/><text x="29.1246%" y="271.50">pe..</text></g><g><title>perf`&lt;f32 as hound::Sample&gt;::write_padded (10,266 samples, 16.83%)</title><rect x="15.9722%" y="309" width="16.8348%" height="15" fill="rgb(238,131,9)" fg:x="9740" fg:w="10266"/><text x="16.2222%" y="319.50">perf`&lt;f32 as hound::Sample..</text></g><g><title>perf`DYLD-STUB$$memcpy (842 samples, 1.38%)</title><rect x="31.4262%" y="293" width="1.3808%" height="15" fill="rgb(211,50,8)" fg:x="19164" fg:w="842"/><text x="31.6762%" y="303.50"></text></g><g><title>perf`hound::write::WavWriter&lt;W&gt;::write_sample (12,314 samples, 20.19%)</title><rect x="13.2304%" y="325" width="20.1932%" height="15" fill="rgb(245,182,24)" fg:x="8068" fg:w="12314"/><text x="13.4804%" y="335.50">perf`hound::write::WavWriter&lt;W&gt;:..</text></g><g><title>perf`&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (376 samples, 0.62%)</title><rect x="32.8069%" y="309" width="0.6166%" height="15" fill="rgb(242,14,37)" fg:x="20006" fg:w="376"/><text x="33.0569%" y="319.50"></text></g><g><title>dyld`start (20,436 samples, 33.51%)</title><rect x="0.0000%" y="453" width="33.5121%" height="15" fill="rgb(246,228,12)" fg:x="0" fg:w="20436"/><text x="0.2500%" y="463.50">dyld`start</text></g><g><title>perf`main (20,436 samples, 33.51%)</title><rect x="0.0000%" y="437" width="33.5121%" height="15" fill="rgb(213,55,15)" fg:x="0" fg:w="20436"/><text x="0.2500%" y="447.50">perf`main</text></g><g><title>perf`std::rt::lang_start (20,436 samples, 33.51%)</title><rect x="0.0000%" y="421" width="33.5121%" height="15" fill="rgb(209,9,3)" fg:x="0" fg:w="20436"/><text x="0.2500%" y="431.50">perf`std::rt::lang_start</text></g><g><title>perf`std::rt::lang_start_internal (20,436 samples, 33.51%)</title><rect x="0.0000%" y="405" width="33.5121%" height="15" fill="rgb(230,59,30)" fg:x="0" fg:w="20436"/><text x="0.2500%" y="415.50">perf`std::rt::lang_start_internal</text></g><g><title>perf`std::rt::lang_start::_{{closure}} (20,436 samples, 33.51%)</title><rect x="0.0000%" y="389" width="33.5121%" height="15" fill="rgb(209,121,21)" fg:x="0" fg:w="20436"/><text x="0.2500%" y="399.50">perf`std::rt::lang_start::_{{closure}}</text></g><g><title>perf`std::sys_common::backtrace::__rust_begin_short_backtrace (20,436 samples, 33.51%)</title><rect x="0.0000%" y="373" width="33.5121%" height="15" fill="rgb(220,109,13)" fg:x="0" fg:w="20436"/><text x="0.2500%" y="383.50">perf`std::sys_common::backtrace::__rust_begin_short_ba..</text></g><g><title>perf`core::ops::function::FnOnce::call_once (20,436 samples, 33.51%)</title><rect x="0.0000%" y="357" width="33.5121%" height="15" fill="rgb(232,18,1)" fg:x="0" fg:w="20436"/><text x="0.2500%" y="367.50">perf`core::ops::function::FnOnce::call_once</text></g><g><title>perf`perf::main (20,315 samples, 33.31%)</title><rect x="0.1984%" y="341" width="33.3137%" height="15" fill="rgb(215,41,42)" fg:x="121" fg:w="20315"/><text x="0.4484%" y="351.50">perf`perf::main</text></g><g><title>perf`hound::write::WavWriter&lt;std::io::buffered::bufwriter::BufWriter&lt;std::fs::File&gt;&gt;::create (54 samples, 0.09%)</title><rect x="33.4235%" y="325" width="0.0886%" height="15" fill="rgb(224,123,36)" fg:x="20382" fg:w="54"/><text x="33.6735%" y="335.50"></text></g><g><title>perf`std::fs::File::create (54 samples, 0.09%)</title><rect x="33.4235%" y="309" width="0.0886%" height="15" fill="rgb(240,125,3)" fg:x="20382" fg:w="54"/><text x="33.6735%" y="319.50"></text></g><g><title>perf`std::fs::OpenOptions::open (54 samples, 0.09%)</title><rect x="33.4235%" y="293" width="0.0886%" height="15" fill="rgb(205,98,50)" fg:x="20382" fg:w="54"/><text x="33.6735%" y="303.50"></text></g><g><title>perf`std::fs::OpenOptions::_open (54 samples, 0.09%)</title><rect x="33.4235%" y="277" width="0.0886%" height="15" fill="rgb(205,185,37)" fg:x="20382" fg:w="54"/><text x="33.6735%" y="287.50"></text></g><g><title>perf`std::sys::pal::unix::fs::File::open_c (54 samples, 0.09%)</title><rect x="33.4235%" y="261" width="0.0886%" height="15" fill="rgb(238,207,15)" fg:x="20382" fg:w="54"/><text x="33.6735%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`__open (54 samples, 0.09%)</title><rect x="33.4235%" y="245" width="0.0886%" height="15" fill="rgb(213,199,42)" fg:x="20382" fg:w="54"/><text x="33.6735%" y="255.50"></text></g><g><title>perf`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (7 samples, 0.01%)</title><rect x="41.0521%" y="261" width="0.0115%" height="15" fill="rgb(235,201,11)" fg:x="25034" fg:w="7"/><text x="41.3021%" y="271.50"></text></g><g><title>perf`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (186 samples, 0.31%)</title><rect x="41.1325%" y="245" width="0.3050%" height="15" fill="rgb(207,46,11)" fg:x="25083" fg:w="186"/><text x="41.3825%" y="255.50"></text></g><g><title>perf`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (84 samples, 0.14%)</title><rect x="41.2997%" y="229" width="0.1377%" height="15" fill="rgb(241,35,35)" fg:x="25185" fg:w="84"/><text x="41.5497%" y="239.50"></text></g><g><title>perf`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (93 samples, 0.15%)</title><rect x="41.4375%" y="245" width="0.1525%" height="15" fill="rgb(243,32,47)" fg:x="25269" fg:w="93"/><text x="41.6875%" y="255.50"></text></g><g><title>perf`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (49 samples, 0.08%)</title><rect x="41.5097%" y="229" width="0.0804%" height="15" fill="rgb(247,202,23)" fg:x="25313" fg:w="49"/><text x="41.7597%" y="239.50"></text></g><g><title>perf`&lt;f32 as core::ops::arith::Add&gt;::add (19 samples, 0.03%)</title><rect x="41.5998%" y="245" width="0.0312%" height="15" fill="rgb(219,102,11)" fg:x="25368" fg:w="19"/><text x="41.8498%" y="255.50"></text></g><g><title>perf`&lt;f32 as core::ops::arith::AddAssign&gt;::add_assign (48 samples, 0.08%)</title><rect x="41.6310%" y="245" width="0.0787%" height="15" fill="rgb(243,110,44)" fg:x="25387" fg:w="48"/><text x="41.8810%" y="255.50"></text></g><g><title>perf`&lt;f32 as core::ops::arith::Mul&gt;::mul (71 samples, 0.12%)</title><rect x="41.7097%" y="245" width="0.1164%" height="15" fill="rgb(222,74,54)" fg:x="25435" fg:w="71"/><text x="41.9597%" y="255.50"></text></g><g><title>perf`&lt;f32 as core::ops::arith::Sub&gt;::sub (25 samples, 0.04%)</title><rect x="41.8261%" y="245" width="0.0410%" height="15" fill="rgb(216,99,12)" fg:x="25506" fg:w="25"/><text x="42.0761%" y="255.50"></text></g><g><title>perf`&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Mul&gt;::mul (169 samples, 0.28%)</title><rect x="41.8721%" y="245" width="0.2771%" height="15" fill="rgb(226,22,26)" fg:x="25534" fg:w="169"/><text x="42.1221%" y="255.50"></text></g><g><title>perf`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (10 samples, 0.02%)</title><rect x="42.1607%" y="197" width="0.0164%" height="15" fill="rgb(217,163,10)" fg:x="25710" fg:w="10"/><text x="42.4107%" y="207.50"></text></g><g><title>perf`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.02%)</title><rect x="42.1607%" y="181" width="0.0164%" height="15" fill="rgb(213,25,53)" fg:x="25710" fg:w="10"/><text x="42.4107%" y="191.50"></text></g><g><title>perf`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.03%)</title><rect x="42.1590%" y="213" width="0.0279%" height="15" fill="rgb(252,105,26)" fg:x="25709" fg:w="17"/><text x="42.4090%" y="223.50"></text></g><g><title>perf`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.03%)</title><rect x="42.1590%" y="229" width="0.0312%" height="15" fill="rgb(220,39,43)" fg:x="25709" fg:w="19"/><text x="42.4090%" y="239.50"></text></g><g><title>perf`&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Mul&lt;T&gt;&gt;::mul (11 samples, 0.02%)</title><rect x="42.2017%" y="229" width="0.0180%" height="15" fill="rgb(229,68,48)" fg:x="25735" fg:w="11"/><text x="42.4517%" y="239.50"></text></g><g><title>perf`core::core_arch::arm_shared::neon::generated::vsubq_f32 (7 samples, 0.01%)</title><rect x="42.2377%" y="165" width="0.0115%" height="15" fill="rgb(252,8,32)" fg:x="25757" fg:w="7"/><text x="42.4877%" y="175.50"></text></g><g><title>perf`rustfft::algorithm::radix4::bitreversed_transpose (7 samples, 0.01%)</title><rect x="42.2591%" y="165" width="0.0115%" height="15" fill="rgb(223,20,43)" fg:x="25770" fg:w="7"/><text x="42.5091%" y="175.50"></text></g><g><title>perf`core::core_arch::aarch64::neon::generated::vreinterpretq_f64_f32 (7 samples, 0.01%)</title><rect x="42.2705%" y="117" width="0.0115%" height="15" fill="rgb(229,81,49)" fg:x="25777" fg:w="7"/><text x="42.5205%" y="127.50"></text></g><g><title>perf`rustfft::neon::neon_butterflies::NeonF32Butterfly16&lt;T&gt;::perform_fft_butterfly_multi (23 samples, 0.04%)</title><rect x="42.2705%" y="165" width="0.0377%" height="15" fill="rgb(236,28,36)" fg:x="25777" fg:w="23"/><text x="42.5205%" y="175.50"></text></g><g><title>perf`rustfft::array_utils::iter_chunks (23 samples, 0.04%)</title><rect x="42.2705%" y="149" width="0.0377%" height="15" fill="rgb(249,185,26)" fg:x="25777" fg:w="23"/><text x="42.5205%" y="159.50"></text></g><g><title>perf`rustfft::neon::neon_butterflies::NeonF32Butterfly16&lt;T&gt;::perform_fft_butterfly_multi::_{{closure}} (23 samples, 0.04%)</title><rect x="42.2705%" y="133" width="0.0377%" height="15" fill="rgb(249,174,33)" fg:x="25777" fg:w="23"/><text x="42.5205%" y="143.50"></text></g><g><title>perf`rustfft::neon::neon_butterflies::NeonF32Butterfly8&lt;T&gt;::perform_fft_butterfly_multi (16 samples, 0.03%)</title><rect x="42.3083%" y="165" width="0.0262%" height="15" fill="rgb(233,201,37)" fg:x="25800" fg:w="16"/><text x="42.5583%" y="175.50"></text></g><g><title>perf`rustfft::array_utils::iter_chunks (16 samples, 0.03%)</title><rect x="42.3083%" y="149" width="0.0262%" height="15" fill="rgb(221,78,26)" fg:x="25800" fg:w="16"/><text x="42.5583%" y="159.50"></text></g><g><title>perf`rustfft::neon::neon_butterflies::NeonF32Butterfly8&lt;T&gt;::perform_fft_butterfly_multi::_{{closure}} (16 samples, 0.03%)</title><rect x="42.3083%" y="133" width="0.0262%" height="15" fill="rgb(250,127,30)" fg:x="25800" fg:w="16"/><text x="42.5583%" y="143.50"></text></g><g><title>perf`&lt;rustfft::neon::neon_radix4::Neon32Radix4&lt;T&gt; as rustfft::Fft&lt;T&gt;&gt;::process_outofplace_with_scratch (114 samples, 0.19%)</title><rect x="42.2230%" y="229" width="0.1869%" height="15" fill="rgb(230,49,44)" fg:x="25748" fg:w="114"/><text x="42.4730%" y="239.50"></text></g><g><title>perf`rustfft::array_utils::iter_chunks_zipped (114 samples, 0.19%)</title><rect x="42.2230%" y="213" width="0.1869%" height="15" fill="rgb(229,67,23)" fg:x="25748" fg:w="114"/><text x="42.4730%" y="223.50"></text></g><g><title>perf`&lt;rustfft::neon::neon_radix4::Neon32Radix4&lt;T&gt; as rustfft::Fft&lt;T&gt;&gt;::process_outofplace_with_scratch::_{{closure}} (114 samples, 0.19%)</title><rect x="42.2230%" y="197" width="0.1869%" height="15" fill="rgb(249,83,47)" fg:x="25748" fg:w="114"/><text x="42.4730%" y="207.50"></text></g><g><title>perf`rustfft::neon::neon_radix4::Neon32Radix4&lt;T&gt;::perform_fft_out_of_place (114 samples, 0.19%)</title><rect x="42.2230%" y="181" width="0.1869%" height="15" fill="rgb(215,43,3)" fg:x="25748" fg:w="114"/><text x="42.4730%" y="191.50"></text></g><g><title>perf`rustfft::neon::neon_radix4::butterfly_4_32 (46 samples, 0.08%)</title><rect x="42.3345%" y="165" width="0.0754%" height="15" fill="rgb(238,154,13)" fg:x="25816" fg:w="46"/><text x="42.5845%" y="175.50"></text></g><g><title>perf`num_complex::Complex&lt;T&gt;::new (7 samples, 0.01%)</title><rect x="42.4099%" y="229" width="0.0115%" height="15" fill="rgb(219,56,2)" fg:x="25862" fg:w="7"/><text x="42.6599%" y="239.50"></text></g><g><title>perf`&lt;realfft::ComplexToRealEven&lt;T&gt; as realfft::ComplexToReal&lt;T&gt;&gt;::process_with_scratch (167 samples, 0.27%)</title><rect x="42.1492%" y="245" width="0.2739%" height="15" fill="rgb(233,0,4)" fg:x="25703" fg:w="167"/><text x="42.3992%" y="255.50"></text></g><g><title>perf`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (8 samples, 0.01%)</title><rect x="42.4312%" y="197" width="0.0131%" height="15" fill="rgb(235,30,7)" fg:x="25875" fg:w="8"/><text x="42.6812%" y="207.50"></text></g><g><title>perf`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.02%)</title><rect x="42.4296%" y="229" width="0.0246%" height="15" fill="rgb(250,79,13)" fg:x="25874" fg:w="15"/><text x="42.6796%" y="239.50"></text></g><g><title>perf`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.02%)</title><rect x="42.4312%" y="213" width="0.0230%" height="15" fill="rgb(211,146,34)" fg:x="25875" fg:w="14"/><text x="42.6812%" y="223.50"></text></g><g><title>perf`rustfft::algorithm::radix4::bitreversed_transpose (8 samples, 0.01%)</title><rect x="42.4870%" y="165" width="0.0131%" height="15" fill="rgb(228,22,38)" fg:x="25909" fg:w="8"/><text x="42.7370%" y="175.50"></text></g><g><title>perf`rustfft::neon::neon_butterflies::NeonF32Butterfly16&lt;T&gt;::perform_fft_butterfly_multi (18 samples, 0.03%)</title><rect x="42.5001%" y="165" width="0.0295%" height="15" fill="rgb(235,168,5)" fg:x="25917" fg:w="18"/><text x="42.7501%" y="175.50"></text></g><g><title>perf`rustfft::array_utils::iter_chunks (18 samples, 0.03%)</title><rect x="42.5001%" y="149" width="0.0295%" height="15" fill="rgb(221,155,16)" fg:x="25917" fg:w="18"/><text x="42.7501%" y="159.50"></text></g><g><title>perf`rustfft::neon::neon_butterflies::NeonF32Butterfly16&lt;T&gt;::perform_fft_butterfly_multi::_{{closure}} (18 samples, 0.03%)</title><rect x="42.5001%" y="133" width="0.0295%" height="15" fill="rgb(215,215,53)" fg:x="25917" fg:w="18"/><text x="42.7501%" y="143.50"></text></g><g><title>perf`rustfft::neon::neon_butterflies::NeonF32Butterfly16&lt;T&gt;::perform_parallel_fft_butterfly (7 samples, 0.01%)</title><rect x="42.5182%" y="117" width="0.0115%" height="15" fill="rgb(223,4,10)" fg:x="25928" fg:w="7"/><text x="42.7682%" y="127.50"></text></g><g><title>perf`rustfft::neon::neon_butterflies::NeonF32Butterfly8&lt;T&gt;::perform_fft_butterfly_multi (14 samples, 0.02%)</title><rect x="42.5296%" y="165" width="0.0230%" height="15" fill="rgb(234,103,6)" fg:x="25935" fg:w="14"/><text x="42.7796%" y="175.50"></text></g><g><title>perf`rustfft::array_utils::iter_chunks (14 samples, 0.02%)</title><rect x="42.5296%" y="149" width="0.0230%" height="15" fill="rgb(227,97,0)" fg:x="25935" fg:w="14"/><text x="42.7796%" y="159.50"></text></g><g><title>perf`rustfft::neon::neon_butterflies::NeonF32Butterfly8&lt;T&gt;::perform_fft_butterfly_multi::_{{closure}} (14 samples, 0.02%)</title><rect x="42.5296%" y="133" width="0.0230%" height="15" fill="rgb(234,150,53)" fg:x="25935" fg:w="14"/><text x="42.7796%" y="143.50"></text></g><g><title>perf`rustfft::neon::neon_butterflies::NeonF32Butterfly8&lt;T&gt;::perform_parallel_fft_butterfly (7 samples, 0.01%)</title><rect x="42.5411%" y="117" width="0.0115%" height="15" fill="rgb(228,201,54)" fg:x="25942" fg:w="7"/><text x="42.7911%" y="127.50"></text></g><g><title>perf`&lt;rustfft::neon::neon_radix4::Neon32Radix4&lt;T&gt; as rustfft::Fft&lt;T&gt;&gt;::process_outofplace_with_scratch (96 samples, 0.16%)</title><rect x="42.4673%" y="229" width="0.1574%" height="15" fill="rgb(222,22,37)" fg:x="25897" fg:w="96"/><text x="42.7173%" y="239.50"></text></g><g><title>perf`rustfft::array_utils::iter_chunks_zipped (96 samples, 0.16%)</title><rect x="42.4673%" y="213" width="0.1574%" height="15" fill="rgb(237,53,32)" fg:x="25897" fg:w="96"/><text x="42.7173%" y="223.50"></text></g><g><title>perf`&lt;rustfft::neon::neon_radix4::Neon32Radix4&lt;T&gt; as rustfft::Fft&lt;T&gt;&gt;::process_outofplace_with_scratch::_{{closure}} (96 samples, 0.16%)</title><rect x="42.4673%" y="197" width="0.1574%" height="15" fill="rgb(233,25,53)" fg:x="25897" fg:w="96"/><text x="42.7173%" y="207.50"></text></g><g><title>perf`rustfft::neon::neon_radix4::Neon32Radix4&lt;T&gt;::perform_fft_out_of_place (96 samples, 0.16%)</title><rect x="42.4673%" y="181" width="0.1574%" height="15" fill="rgb(210,40,34)" fg:x="25897" fg:w="96"/><text x="42.7173%" y="191.50"></text></g><g><title>perf`rustfft::neon::neon_radix4::butterfly_4_32 (44 samples, 0.07%)</title><rect x="42.5526%" y="165" width="0.0722%" height="15" fill="rgb(241,220,44)" fg:x="25949" fg:w="44"/><text x="42.8026%" y="175.50"></text></g><g><title>perf`&lt;realfft::RealToComplexEven&lt;T&gt; as realfft::RealToComplex&lt;T&gt;&gt;::process_with_scratch (124 samples, 0.20%)</title><rect x="42.4230%" y="245" width="0.2033%" height="15" fill="rgb(235,28,35)" fg:x="25870" fg:w="124"/><text x="42.6730%" y="255.50"></text></g><g><title>perf`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (12 samples, 0.02%)</title><rect x="42.6264%" y="245" width="0.0197%" height="15" fill="rgb(210,56,17)" fg:x="25994" fg:w="12"/><text x="42.8764%" y="255.50"></text></g><g><title>perf`&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (61 samples, 0.10%)</title><rect x="42.6625%" y="229" width="0.1000%" height="15" fill="rgb(224,130,29)" fg:x="26016" fg:w="61"/><text x="42.9125%" y="239.50"></text></g><g><title>perf`core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (100 samples, 0.16%)</title><rect x="42.6493%" y="245" width="0.1640%" height="15" fill="rgb(235,212,8)" fg:x="26008" fg:w="100"/><text x="42.8993%" y="255.50"></text></g><g><title>perf`&lt;usize as core::iter::range::Step&gt;::forward_unchecked (31 samples, 0.05%)</title><rect x="42.7625%" y="229" width="0.0508%" height="15" fill="rgb(223,33,50)" fg:x="26077" fg:w="31"/><text x="43.0125%" y="239.50"></text></g><g><title>perf`core::slice::_&lt;impl [T]&gt;::fill (28 samples, 0.05%)</title><rect x="42.8133%" y="245" width="0.0459%" height="15" fill="rgb(219,149,13)" fg:x="26108" fg:w="28"/><text x="43.0633%" y="255.50"></text></g><g><title>perf`&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.04%)</title><rect x="42.8199%" y="229" width="0.0394%" height="15" fill="rgb(250,156,29)" fg:x="26112" fg:w="24"/><text x="43.0699%" y="239.50"></text></g><g><title>perf`num_complex::Complex&lt;T&gt;::new (33 samples, 0.05%)</title><rect x="42.8593%" y="245" width="0.0541%" height="15" fill="rgb(216,193,19)" fg:x="26136" fg:w="33"/><text x="43.1093%" y="255.50"></text></g><g><title>perf`convrs::upconv::UPConv::process_block (1,149 samples, 1.88%)</title><rect x="41.0816%" y="261" width="1.8842%" height="15" fill="rgb(216,135,14)" fg:x="25052" fg:w="1149"/><text x="41.3316%" y="271.50">p..</text></g><g><title>perf`num_complex::opassign::_&lt;impl core::ops::arith::AddAssign for num_complex::Complex&lt;T&gt;&gt;::add_assign (32 samples, 0.05%)</title><rect x="42.9134%" y="245" width="0.0525%" height="15" fill="rgb(241,47,5)" fg:x="26169" fg:w="32"/><text x="43.1634%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (18 samples, 0.03%)</title><rect x="42.9658%" y="245" width="0.0295%" height="15" fill="rgb(233,42,35)" fg:x="26201" fg:w="18"/><text x="43.2158%" y="255.50"></text></g><g><title>perf`&lt;[T] as core::slice::specialize::SpecFill&lt;T&gt;&gt;::spec_fill (42 samples, 0.07%)</title><rect x="42.9986%" y="197" width="0.0689%" height="15" fill="rgb(231,13,6)" fg:x="26221" fg:w="42"/><text x="43.2486%" y="207.50"></text></g><g><title>perf`&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (264 samples, 0.43%)</title><rect x="42.9986%" y="245" width="0.4329%" height="15" fill="rgb(207,181,40)" fg:x="26221" fg:w="264"/><text x="43.2486%" y="255.50"></text></g><g><title>perf`convrs::upconv::UPConv::update_filter::_{{closure}} (264 samples, 0.43%)</title><rect x="42.9986%" y="229" width="0.4329%" height="15" fill="rgb(254,173,49)" fg:x="26221" fg:w="264"/><text x="43.2486%" y="239.50"></text></g><g><title>perf`core::slice::_&lt;impl [T]&gt;::fill (264 samples, 0.43%)</title><rect x="42.9986%" y="213" width="0.4329%" height="15" fill="rgb(221,1,38)" fg:x="26221" fg:w="264"/><text x="43.2486%" y="223.50"></text></g><g><title>perf`&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (222 samples, 0.36%)</title><rect x="43.0675%" y="197" width="0.3640%" height="15" fill="rgb(206,124,46)" fg:x="26263" fg:w="222"/><text x="43.3175%" y="207.50"></text></g><g><title>perf`&lt;f32 as core::ops::arith::Add&gt;::add (32 samples, 0.05%)</title><rect x="43.4316%" y="245" width="0.0525%" height="15" fill="rgb(249,21,11)" fg:x="26485" fg:w="32"/><text x="43.6816%" y="255.50"></text></g><g><title>perf`&lt;f32 as core::ops::arith::Mul&gt;::mul (20 samples, 0.03%)</title><rect x="43.4840%" y="245" width="0.0328%" height="15" fill="rgb(222,201,40)" fg:x="26517" fg:w="20"/><text x="43.7340%" y="255.50"></text></g><g><title>perf`&lt;f32 as core::ops::arith::Sub&gt;::sub (22 samples, 0.04%)</title><rect x="43.5168%" y="245" width="0.0361%" height="15" fill="rgb(235,61,29)" fg:x="26537" fg:w="22"/><text x="43.7668%" y="255.50"></text></g><g><title>perf`&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Mul&lt;T&gt;&gt;::mul (23 samples, 0.04%)</title><rect x="43.5578%" y="245" width="0.0377%" height="15" fill="rgb(219,207,3)" fg:x="26562" fg:w="23"/><text x="43.8078%" y="255.50"></text></g><g><title>perf`&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.01%)</title><rect x="44.3007%" y="149" width="0.0148%" height="15" fill="rgb(222,56,46)" fg:x="27015" fg:w="9"/><text x="44.5507%" y="159.50"></text></g><g><title>perf`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (214 samples, 0.35%)</title><rect x="44.1498%" y="165" width="0.3509%" height="15" fill="rgb(239,76,54)" fg:x="26923" fg:w="214"/><text x="44.3998%" y="175.50"></text></g><g><title>perf`&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (113 samples, 0.19%)</title><rect x="44.3154%" y="149" width="0.1853%" height="15" fill="rgb(231,124,27)" fg:x="27024" fg:w="113"/><text x="44.5654%" y="159.50"></text></g><g><title>perf`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (450 samples, 0.74%)</title><rect x="43.9809%" y="197" width="0.7379%" height="15" fill="rgb(249,195,6)" fg:x="26820" fg:w="450"/><text x="44.2309%" y="207.50"></text></g><g><title>perf`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (360 samples, 0.59%)</title><rect x="44.1285%" y="181" width="0.5903%" height="15" fill="rgb(237,174,47)" fg:x="26910" fg:w="360"/><text x="44.3785%" y="191.50"></text></g><g><title>perf`&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (133 samples, 0.22%)</title><rect x="44.5007%" y="165" width="0.2181%" height="15" fill="rgb(206,201,31)" fg:x="27137" fg:w="133"/><text x="44.7507%" y="175.50"></text></g><g><title>perf`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (594 samples, 0.97%)</title><rect x="43.9727%" y="213" width="0.9741%" height="15" fill="rgb(231,57,52)" fg:x="26815" fg:w="594"/><text x="44.2227%" y="223.50"></text></g><g><title>perf`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (139 samples, 0.23%)</title><rect x="44.7188%" y="197" width="0.2279%" height="15" fill="rgb(248,177,22)" fg:x="27270" fg:w="139"/><text x="44.9688%" y="207.50"></text></g><g><title>perf`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (10 samples, 0.02%)</title><rect x="44.9468%" y="213" width="0.0164%" height="15" fill="rgb(215,211,37)" fg:x="27409" fg:w="10"/><text x="45.1968%" y="223.50"></text></g><g><title>perf`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (688 samples, 1.13%)</title><rect x="43.8973%" y="229" width="1.1282%" height="15" fill="rgb(241,128,51)" fg:x="26769" fg:w="688"/><text x="44.1473%" y="239.50"></text></g><g><title>perf`realfft::zip3::_{{closure}} (38 samples, 0.06%)</title><rect x="44.9632%" y="213" width="0.0623%" height="15" fill="rgb(227,165,31)" fg:x="27419" fg:w="38"/><text x="45.2132%" y="223.50"></text></g><g><title>perf`&lt;f32 as core::ops::arith::Add&gt;::add (33 samples, 0.05%)</title><rect x="45.0337%" y="229" width="0.0541%" height="15" fill="rgb(228,167,24)" fg:x="27462" fg:w="33"/><text x="45.2837%" y="239.50"></text></g><g><title>perf`&lt;f32 as core::ops::arith::Mul&gt;::mul (108 samples, 0.18%)</title><rect x="45.0878%" y="229" width="0.1771%" height="15" fill="rgb(228,143,12)" fg:x="27495" fg:w="108"/><text x="45.3378%" y="239.50"></text></g><g><title>perf`&lt;f32 as core::ops::arith::Sub&gt;::sub (70 samples, 0.11%)</title><rect x="45.2649%" y="229" width="0.1148%" height="15" fill="rgb(249,149,8)" fg:x="27603" fg:w="70"/><text x="45.5149%" y="239.50"></text></g><g><title>perf`&lt;f32 as num_traits::cast::FromPrimitive&gt;::from_f64 (9 samples, 0.01%)</title><rect x="45.3797%" y="229" width="0.0148%" height="15" fill="rgb(243,35,44)" fg:x="27673" fg:w="9"/><text x="45.6297%" y="239.50"></text></g><g><title>perf`&lt;f64 as num_traits::cast::ToPrimitive&gt;::to_f32 (75 samples, 0.12%)</title><rect x="45.3945%" y="229" width="0.1230%" height="15" fill="rgb(246,89,9)" fg:x="27682" fg:w="75"/><text x="45.6445%" y="239.50"></text></g><g><title>perf`&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Add&gt;::add (37 samples, 0.06%)</title><rect x="45.5175%" y="229" width="0.0607%" height="15" fill="rgb(233,213,13)" fg:x="27757" fg:w="37"/><text x="45.7675%" y="239.50"></text></g><g><title>perf`&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Mul&lt;T&gt;&gt;::mul (231 samples, 0.38%)</title><rect x="45.5781%" y="229" width="0.3788%" height="15" fill="rgb(233,141,41)" fg:x="27794" fg:w="231"/><text x="45.8281%" y="239.50"></text></g><g><title>perf`&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Sub&gt;::sub (43 samples, 0.07%)</title><rect x="45.9569%" y="229" width="0.0705%" height="15" fill="rgb(239,167,4)" fg:x="28025" fg:w="43"/><text x="46.2069%" y="239.50"></text></g><g><title>perf`core::core_arch::aarch64::neon::generated::vtrn1q_f32 (57 samples, 0.09%)</title><rect x="46.0406%" y="165" width="0.0935%" height="15" fill="rgb(209,217,16)" fg:x="28076" fg:w="57"/><text x="46.2906%" y="175.50"></text></g><g><title>perf`core::core_arch::aarch64::neon::generated::vtrn2q_f32 (60 samples, 0.10%)</title><rect x="46.1340%" y="165" width="0.0984%" height="15" fill="rgb(219,88,35)" fg:x="28133" fg:w="60"/><text x="46.3840%" y="175.50"></text></g><g><title>perf`core::core_arch::aarch64::neon::vld1q_f32 (22 samples, 0.04%)</title><rect x="46.2324%" y="165" width="0.0361%" height="15" fill="rgb(220,193,23)" fg:x="28193" fg:w="22"/><text x="46.4824%" y="175.50"></text></g><g><title>perf`core::core_arch::arm_shared::neon::generated::veorq_u32 (13 samples, 0.02%)</title><rect x="46.2701%" y="165" width="0.0213%" height="15" fill="rgb(230,90,52)" fg:x="28216" fg:w="13"/><text x="46.5201%" y="175.50"></text></g><g><title>perf`core::core_arch::arm_shared::neon::generated::vfmaq_f32 (122 samples, 0.20%)</title><rect x="46.2915%" y="165" width="0.2001%" height="15" fill="rgb(252,106,19)" fg:x="28229" fg:w="122"/><text x="46.5415%" y="175.50"></text></g><g><title>perf`core::core_arch::arm_shared::neon::generated::vmulq_f32 (47 samples, 0.08%)</title><rect x="46.4915%" y="165" width="0.0771%" height="15" fill="rgb(206,74,20)" fg:x="28351" fg:w="47"/><text x="46.7415%" y="175.50"></text></g><g><title>perf`core::core_arch::arm_shared::neon::generated::vnegq_f32 (114 samples, 0.19%)</title><rect x="46.5686%" y="165" width="0.1869%" height="15" fill="rgb(230,138,44)" fg:x="28398" fg:w="114"/><text x="46.8186%" y="175.50"></text></g><g><title>perf`core::core_arch::arm_shared::neon::generated::vreinterpretq_f32_u32 (10 samples, 0.02%)</title><rect x="46.7555%" y="165" width="0.0164%" height="15" fill="rgb(235,182,43)" fg:x="28512" fg:w="10"/><text x="47.0055%" y="175.50"></text></g><g><title>perf`core::core_arch::arm_shared::neon::generated::vreinterpretq_u32_f32 (48 samples, 0.08%)</title><rect x="46.7719%" y="165" width="0.0787%" height="15" fill="rgb(242,16,51)" fg:x="28522" fg:w="48"/><text x="47.0219%" y="175.50"></text></g><g><title>perf`core::core_arch::arm_shared::neon::generated::vsubq_f32 (118 samples, 0.19%)</title><rect x="46.8507%" y="165" width="0.1935%" height="15" fill="rgb(248,9,4)" fg:x="28570" fg:w="118"/><text x="47.1007%" y="175.50"></text></g><g><title>perf`core::core_arch::arm_shared::neon::vaddq_f32 (109 samples, 0.18%)</title><rect x="47.0442%" y="165" width="0.1787%" height="15" fill="rgb(210,31,22)" fg:x="28688" fg:w="109"/><text x="47.2942%" y="175.50"></text></g><g><title>perf`core::core_arch::arm_shared::neon::vrev64q_f32 (59 samples, 0.10%)</title><rect x="47.2229%" y="165" width="0.0968%" height="15" fill="rgb(239,54,39)" fg:x="28797" fg:w="59"/><text x="47.4729%" y="175.50"></text></g><g><title>perf`core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (7 samples, 0.01%)</title><rect x="47.3197%" y="165" width="0.0115%" height="15" fill="rgb(230,99,41)" fg:x="28856" fg:w="7"/><text x="47.5697%" y="175.50"></text></g><g><title>perf`core::slice::index::_&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (15 samples, 0.02%)</title><rect x="47.3410%" y="165" width="0.0246%" height="15" fill="rgb(253,106,12)" fg:x="28869" fg:w="15"/><text x="47.5910%" y="175.50"></text></g><g><title>perf`&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (11 samples, 0.02%)</title><rect x="47.3475%" y="149" width="0.0180%" height="15" fill="rgb(213,46,41)" fg:x="28873" fg:w="11"/><text x="47.5975%" y="159.50"></text></g><g><title>perf`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (50 samples, 0.08%)</title><rect x="47.4902%" y="149" width="0.0820%" height="15" fill="rgb(215,133,35)" fg:x="28960" fg:w="50"/><text x="47.7402%" y="159.50"></text></g><g><title>perf`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (46 samples, 0.08%)</title><rect x="47.5722%" y="149" width="0.0754%" height="15" fill="rgb(213,28,5)" fg:x="29010" fg:w="46"/><text x="47.8222%" y="159.50"></text></g><g><title>perf`&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (32 samples, 0.05%)</title><rect x="47.6525%" y="133" width="0.0525%" height="15" fill="rgb(215,77,49)" fg:x="29059" fg:w="32"/><text x="47.9025%" y="143.50"></text></g><g><title>perf`core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (39 samples, 0.06%)</title><rect x="47.6476%" y="149" width="0.0640%" height="15" fill="rgb(248,100,22)" fg:x="29056" fg:w="39"/><text x="47.8976%" y="159.50"></text></g><g><title>perf`core::slice::_&lt;impl [T]&gt;::get_unchecked (19 samples, 0.03%)</title><rect x="47.7116%" y="149" width="0.0312%" height="15" fill="rgb(208,67,9)" fg:x="29095" fg:w="19"/><text x="47.9616%" y="159.50"></text></g><g><title>perf`core::slice::_&lt;impl [T]&gt;::get_unchecked_mut (12 samples, 0.02%)</title><rect x="47.7427%" y="149" width="0.0197%" height="15" fill="rgb(219,133,21)" fg:x="29114" fg:w="12"/><text x="47.9927%" y="159.50"></text></g><g><title>perf`&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (30 samples, 0.05%)</title><rect x="47.8198%" y="117" width="0.0492%" height="15" fill="rgb(246,46,29)" fg:x="29161" fg:w="30"/><text x="48.0698%" y="127.50"></text></g><g><title>perf`rustfft::algorithm::radix4::bitreversed_transpose (321 samples, 0.53%)</title><rect x="47.3656%" y="165" width="0.5264%" height="15" fill="rgb(246,185,52)" fg:x="28884" fg:w="321"/><text x="47.6156%" y="175.50"></text></g><g><title>perf`rustfft::algorithm::radix4::reverse_bits (79 samples, 0.13%)</title><rect x="47.7624%" y="149" width="0.1295%" height="15" fill="rgb(252,136,11)" fg:x="29126" fg:w="79"/><text x="48.0124%" y="159.50"></text></g><g><title>perf`core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (56 samples, 0.09%)</title><rect x="47.8001%" y="133" width="0.0918%" height="15" fill="rgb(219,138,53)" fg:x="29149" fg:w="56"/><text x="48.0501%" y="143.50"></text></g><g><title>perf`&lt;usize as core::iter::range::Step&gt;::forward_unchecked (14 samples, 0.02%)</title><rect x="47.8690%" y="117" width="0.0230%" height="15" fill="rgb(211,51,23)" fg:x="29191" fg:w="14"/><text x="48.1190%" y="127.50"></text></g><g><title>perf`core::core_arch::aarch64::neon::generated::vreinterpretq_f64_f32 (17 samples, 0.03%)</title><rect x="47.9051%" y="117" width="0.0279%" height="15" fill="rgb(247,221,28)" fg:x="29213" fg:w="17"/><text x="48.1551%" y="127.50"></text></g><g><title>perf`core::core_arch::aarch64::neon::generated::vtrn1q_f64 (13 samples, 0.02%)</title><rect x="47.9379%" y="117" width="0.0213%" height="15" fill="rgb(251,222,45)" fg:x="29233" fg:w="13"/><text x="48.1879%" y="127.50"></text></g><g><title>perf`core::core_arch::aarch64::neon::generated::vtrn2q_f64 (15 samples, 0.02%)</title><rect x="47.9625%" y="117" width="0.0246%" height="15" fill="rgb(217,162,53)" fg:x="29248" fg:w="15"/><text x="48.2125%" y="127.50"></text></g><g><title>perf`core::core_arch::arm_shared::neon::generated::veorq_u32 (10 samples, 0.02%)</title><rect x="47.9871%" y="117" width="0.0164%" height="15" fill="rgb(229,93,14)" fg:x="29263" fg:w="10"/><text x="48.2371%" y="127.50"></text></g><g><title>perf`core::core_arch::arm_shared::neon::generated::vsubq_f32 (14 samples, 0.02%)</title><rect x="48.0248%" y="117" width="0.0230%" height="15" fill="rgb(209,67,49)" fg:x="29286" fg:w="14"/><text x="48.2748%" y="127.50"></text></g><g><title>perf`core::core_arch::arm_shared::neon::vaddq_f32 (18 samples, 0.03%)</title><rect x="48.0478%" y="117" width="0.0295%" height="15" fill="rgb(213,87,29)" fg:x="29300" fg:w="18"/><text x="48.2978%" y="127.50"></text></g><g><title>perf`rustfft::neon::neon_butterflies::NeonF32Butterfly16&lt;T&gt;::perform_fft_butterfly_multi (143 samples, 0.23%)</title><rect x="47.8920%" y="165" width="0.2345%" height="15" fill="rgb(205,151,52)" fg:x="29205" fg:w="143"/><text x="48.1420%" y="175.50"></text></g><g><title>perf`rustfft::array_utils::iter_chunks (143 samples, 0.23%)</title><rect x="47.8920%" y="149" width="0.2345%" height="15" fill="rgb(253,215,39)" fg:x="29205" fg:w="143"/><text x="48.1420%" y="159.50"></text></g><g><title>perf`rustfft::neon::neon_butterflies::NeonF32Butterfly16&lt;T&gt;::perform_fft_butterfly_multi::_{{closure}} (142 samples, 0.23%)</title><rect x="47.8936%" y="133" width="0.2329%" height="15" fill="rgb(221,220,41)" fg:x="29206" fg:w="142"/><text x="48.1436%" y="143.50"></text></g><g><title>perf`rustfft::neon::neon_butterflies::NeonF32Butterfly16&lt;T&gt;::perform_parallel_fft_butterfly (26 samples, 0.04%)</title><rect x="48.0838%" y="117" width="0.0426%" height="15" fill="rgb(218,133,21)" fg:x="29322" fg:w="26"/><text x="48.3338%" y="127.50"></text></g><g><title>perf`core::slice::_&lt;impl [T]&gt;::split_at_mut (7 samples, 0.01%)</title><rect x="48.1396%" y="133" width="0.0115%" height="15" fill="rgb(221,193,43)" fg:x="29356" fg:w="7"/><text x="48.3896%" y="143.50"></text></g><g><title>perf`core::slice::_&lt;impl [T]&gt;::split_at_mut_checked (18 samples, 0.03%)</title><rect x="48.1511%" y="133" width="0.0295%" height="15" fill="rgb(240,128,52)" fg:x="29363" fg:w="18"/><text x="48.4011%" y="143.50"></text></g><g><title>perf`core::core_arch::aarch64::neon::generated::vreinterpretq_f32_f64 (54 samples, 0.09%)</title><rect x="48.1855%" y="117" width="0.0886%" height="15" fill="rgb(253,114,12)" fg:x="29384" fg:w="54"/><text x="48.4355%" y="127.50"></text></g><g><title>perf`core::core_arch::aarch64::neon::generated::vreinterpretq_f64_f32 (154 samples, 0.25%)</title><rect x="48.2741%" y="117" width="0.2525%" height="15" fill="rgb(215,223,47)" fg:x="29438" fg:w="154"/><text x="48.5241%" y="127.50"></text></g><g><title>perf`core::core_arch::aarch64::neon::generated::vtrn1q_f64 (94 samples, 0.15%)</title><rect x="48.5266%" y="117" width="0.1541%" height="15" fill="rgb(248,225,23)" fg:x="29592" fg:w="94"/><text x="48.7766%" y="127.50"></text></g><g><title>perf`core::core_arch::aarch64::neon::generated::vtrn2q_f64 (92 samples, 0.15%)</title><rect x="48.6807%" y="117" width="0.1509%" height="15" fill="rgb(250,108,0)" fg:x="29686" fg:w="92"/><text x="48.9307%" y="127.50"></text></g><g><title>perf`core::core_arch::arm_shared::neon::generated::veorq_u32 (59 samples, 0.10%)</title><rect x="48.8365%" y="117" width="0.0968%" height="15" fill="rgb(228,208,7)" fg:x="29781" fg:w="59"/><text x="49.0865%" y="127.50"></text></g><g><title>perf`core::core_arch::arm_shared::neon::generated::vmulq_f32 (18 samples, 0.03%)</title><rect x="48.9333%" y="117" width="0.0295%" height="15" fill="rgb(244,45,10)" fg:x="29840" fg:w="18"/><text x="49.1833%" y="127.50"></text></g><g><title>perf`core::core_arch::arm_shared::neon::generated::vreinterpretq_f32_u32 (14 samples, 0.02%)</title><rect x="48.9628%" y="117" width="0.0230%" height="15" fill="rgb(207,125,25)" fg:x="29858" fg:w="14"/><text x="49.2128%" y="127.50"></text></g><g><title>perf`core::core_arch::arm_shared::neon::generated::vreinterpretq_u32_f32 (35 samples, 0.06%)</title><rect x="48.9857%" y="117" width="0.0574%" height="15" fill="rgb(210,195,18)" fg:x="29872" fg:w="35"/><text x="49.2357%" y="127.50"></text></g><g><title>perf`core::core_arch::arm_shared::neon::generated::vsubq_f32 (96 samples, 0.16%)</title><rect x="49.0431%" y="117" width="0.1574%" height="15" fill="rgb(249,80,12)" fg:x="29907" fg:w="96"/><text x="49.2931%" y="127.50"></text></g><g><title>perf`core::core_arch::arm_shared::neon::vaddq_f32 (107 samples, 0.18%)</title><rect x="49.2006%" y="117" width="0.1755%" height="15" fill="rgb(221,65,9)" fg:x="30003" fg:w="107"/><text x="49.4506%" y="127.50"></text></g><g><title>perf`core::core_arch::arm_shared::neon::vrev64q_f32 (13 samples, 0.02%)</title><rect x="49.3760%" y="117" width="0.0213%" height="15" fill="rgb(235,49,36)" fg:x="30110" fg:w="13"/><text x="49.6260%" y="127.50"></text></g><g><title>perf`core::core_arch::aarch64::neon::vst1q_f32 (38 samples, 0.06%)</title><rect x="49.7745%" y="101" width="0.0623%" height="15" fill="rgb(225,32,20)" fg:x="30353" fg:w="38"/><text x="50.0245%" y="111.50"></text></g><g><title>perf`core::ptr::read_unaligned (15 samples, 0.02%)</title><rect x="49.8368%" y="101" width="0.0246%" height="15" fill="rgb(215,141,46)" fg:x="30391" fg:w="15"/><text x="50.0868%" y="111.50"></text></g><g><title>perf`core::ptr::write_unaligned (13 samples, 0.02%)</title><rect x="49.8614%" y="101" width="0.0213%" height="15" fill="rgb(250,160,47)" fg:x="30406" fg:w="13"/><text x="50.1114%" y="111.50"></text></g><g><title>perf`core::slice::raw::from_raw_parts_mut (18 samples, 0.03%)</title><rect x="49.8828%" y="101" width="0.0295%" height="15" fill="rgb(216,222,40)" fg:x="30419" fg:w="18"/><text x="50.1328%" y="111.50"></text></g><g><title>perf`rustfft::neon::neon_butterflies::NeonF32Butterfly8&lt;T&gt;::perform_fft_butterfly_multi::_{{closure}} (1,057 samples, 1.73%)</title><rect x="48.1806%" y="133" width="1.7333%" height="15" fill="rgb(234,217,39)" fg:x="29381" fg:w="1057"/><text x="48.4306%" y="143.50"></text></g><g><title>perf`rustfft::neon::neon_butterflies::NeonF32Butterfly8&lt;T&gt;::perform_parallel_fft_butterfly (314 samples, 0.51%)</title><rect x="49.3990%" y="117" width="0.5149%" height="15" fill="rgb(207,178,40)" fg:x="30124" fg:w="314"/><text x="49.6490%" y="127.50"></text></g><g><title>perf`rustfft::neon::neon_butterflies::NeonF32Butterfly8&lt;T&gt;::perform_fft_butterfly_multi (1,093 samples, 1.79%)</title><rect x="48.1265%" y="165" width="1.7924%" height="15" fill="rgb(221,136,13)" fg:x="29348" fg:w="1093"/><text x="48.3765%" y="175.50">p..</text></g><g><title>perf`rustfft::array_utils::iter_chunks (1,093 samples, 1.79%)</title><rect x="48.1265%" y="149" width="1.7924%" height="15" fill="rgb(249,199,10)" fg:x="29348" fg:w="1093"/><text x="48.3765%" y="159.50">p..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (7 samples, 0.01%)</title><rect x="52.7738%" y="149" width="0.0115%" height="15" fill="rgb(249,222,13)" fg:x="32182" fg:w="7"/><text x="53.0238%" y="159.50"></text></g><g><title>perf`core::slice::_&lt;impl [T]&gt;::split_at (19 samples, 0.03%)</title><rect x="52.9444%" y="117" width="0.0312%" height="15" fill="rgb(244,185,38)" fg:x="32286" fg:w="19"/><text x="53.1944%" y="127.50"></text></g><g><title>perf`&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (210 samples, 0.34%)</title><rect x="52.7853%" y="149" width="0.3444%" height="15" fill="rgb(236,202,9)" fg:x="32189" fg:w="210"/><text x="53.0353%" y="159.50"></text></g><g><title>perf`&lt;core::slice::iter::ChunksExact&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (162 samples, 0.27%)</title><rect x="52.8640%" y="133" width="0.2657%" height="15" fill="rgb(250,229,37)" fg:x="32237" fg:w="162"/><text x="53.1140%" y="143.50"></text></g><g><title>perf`core::slice::_&lt;impl [T]&gt;::split_at_checked (94 samples, 0.15%)</title><rect x="52.9755%" y="117" width="0.1541%" height="15" fill="rgb(206,174,23)" fg:x="32305" fg:w="94"/><text x="53.2255%" y="127.50"></text></g><g><title>perf`core::core_arch::aarch64::neon::vld1q_f32 (15 samples, 0.02%)</title><rect x="53.1297%" y="149" width="0.0246%" height="15" fill="rgb(211,33,43)" fg:x="32399" fg:w="15"/><text x="53.3797%" y="159.50"></text></g><g><title>perf`core::core_arch::aarch64::neon::vst1q_f32 (142 samples, 0.23%)</title><rect x="53.1543%" y="149" width="0.2329%" height="15" fill="rgb(245,58,50)" fg:x="32414" fg:w="142"/><text x="53.4043%" y="159.50"></text></g><g><title>perf`core::ptr::read_unaligned (89 samples, 0.15%)</title><rect x="53.3920%" y="149" width="0.1459%" height="15" fill="rgb(244,68,36)" fg:x="32559" fg:w="89"/><text x="53.6420%" y="159.50"></text></g><g><title>perf`core::ptr::write_unaligned (86 samples, 0.14%)</title><rect x="53.5380%" y="149" width="0.1410%" height="15" fill="rgb(232,229,15)" fg:x="32648" fg:w="86"/><text x="53.7880%" y="159.50"></text></g><g><title>perf`core::slice::_&lt;impl [T]&gt;::chunks_exact (8 samples, 0.01%)</title><rect x="53.6790%" y="149" width="0.0131%" height="15" fill="rgb(254,30,23)" fg:x="32734" fg:w="8"/><text x="53.9290%" y="159.50"></text></g><g><title>perf`core::slice::iter::ChunksExact&lt;T&gt;::new (7 samples, 0.01%)</title><rect x="53.6807%" y="133" width="0.0115%" height="15" fill="rgb(235,160,14)" fg:x="32735" fg:w="7"/><text x="53.9307%" y="143.50"></text></g><g><title>perf`core::slice::raw::from_raw_parts_mut (14 samples, 0.02%)</title><rect x="53.6921%" y="149" width="0.0230%" height="15" fill="rgb(212,155,44)" fg:x="32742" fg:w="14"/><text x="53.9421%" y="159.50"></text></g><g><title>perf`rustfft::neon::neon_radix4::Neon32Radix4&lt;T&gt;::perform_fft_out_of_place (4,688 samples, 7.69%)</title><rect x="46.0291%" y="181" width="7.6876%" height="15" fill="rgb(226,2,50)" fg:x="28069" fg:w="4688"/><text x="46.2791%" y="191.50">perf`rustff..</text></g><g><title>perf`rustfft::neon::neon_radix4::butterfly_4_32 (2,316 samples, 3.80%)</title><rect x="49.9188%" y="165" width="3.7979%" height="15" fill="rgb(234,177,6)" fg:x="30441" fg:w="2316"/><text x="50.1688%" y="175.50">perf..</text></g><g><title>perf`&lt;rustfft::neon::neon_radix4::Neon32Radix4&lt;T&gt; as rustfft::Fft&lt;T&gt;&gt;::process_outofplace_with_scratch (4,690 samples, 7.69%)</title><rect x="46.0275%" y="229" width="7.6909%" height="15" fill="rgb(217,24,9)" fg:x="28068" fg:w="4690"/><text x="46.2775%" y="239.50">perf`&lt;rustf..</text></g><g><title>perf`rustfft::array_utils::iter_chunks_zipped (4,690 samples, 7.69%)</title><rect x="46.0275%" y="213" width="7.6909%" height="15" fill="rgb(220,13,46)" fg:x="28068" fg:w="4690"/><text x="46.2775%" y="223.50">perf`rustff..</text></g><g><title>perf`&lt;rustfft::neon::neon_radix4::Neon32Radix4&lt;T&gt; as rustfft::Fft&lt;T&gt;&gt;::process_outofplace_with_scratch::_{{closure}} (4,690 samples, 7.69%)</title><rect x="46.0275%" y="197" width="7.6909%" height="15" fill="rgb(239,221,27)" fg:x="28068" fg:w="4690"/><text x="46.2775%" y="207.50">perf`&lt;rustf..</text></g><g><title>perf`&lt;realfft::RealToComplexEven&lt;T&gt; as realfft::RealToComplex&lt;T&gt;&gt;::process_with_scratch (6,335 samples, 10.39%)</title><rect x="43.6005%" y="245" width="10.3885%" height="15" fill="rgb(222,198,25)" fg:x="26588" fg:w="6335"/><text x="43.8505%" y="255.50">perf`&lt;realfft::..</text></g><g><title>perf`num_complex::Complex&lt;T&gt;::new (165 samples, 0.27%)</title><rect x="53.7184%" y="229" width="0.2706%" height="15" fill="rgb(211,99,13)" fg:x="32758" fg:w="165"/><text x="53.9684%" y="239.50"></text></g><g><title>perf`&lt;[T] as core::slice::specialize::SpecFill&lt;T&gt;&gt;::spec_fill (75 samples, 0.12%)</title><rect x="53.9889%" y="229" width="0.1230%" height="15" fill="rgb(232,111,31)" fg:x="32923" fg:w="75"/><text x="54.2389%" y="239.50"></text></g><g><title>perf`convrs::upconv::UPConv::update_filter (7,117 samples, 11.67%)</title><rect x="42.9658%" y="261" width="11.6708%" height="15" fill="rgb(245,82,37)" fg:x="26201" fg:w="7117"/><text x="43.2158%" y="271.50">perf`convrs::upco..</text></g><g><title>perf`core::slice::_&lt;impl [T]&gt;::fill (395 samples, 0.65%)</title><rect x="53.9889%" y="245" width="0.6477%" height="15" fill="rgb(227,149,46)" fg:x="32923" fg:w="395"/><text x="54.2389%" y="255.50"></text></g><g><title>perf`&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (320 samples, 0.52%)</title><rect x="54.1119%" y="229" width="0.5248%" height="15" fill="rgb(218,36,50)" fg:x="32998" fg:w="320"/><text x="54.3619%" y="239.50"></text></g><g><title>perf`&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3,343 samples, 5.48%)</title><rect x="60.2384%" y="245" width="5.4820%" height="15" fill="rgb(226,80,48)" fg:x="36734" fg:w="3343"/><text x="60.4884%" y="255.50">perf`&lt;a..</text></g><g><title>perf`&lt;crossbeam_utils::cache_padded::CachePadded&lt;T&gt; as core::ops::deref::Deref&gt;::deref (1,137 samples, 1.86%)</title><rect x="65.7205%" y="245" width="1.8645%" height="15" fill="rgb(238,224,15)" fg:x="40077" fg:w="1137"/><text x="65.9705%" y="255.50">p..</text></g><g><title>perf`core::cell::Cell&lt;T&gt;::get (3,400 samples, 5.58%)</title><rect x="67.5850%" y="245" width="5.5755%" height="15" fill="rgb(241,136,10)" fg:x="41214" fg:w="3400"/><text x="67.8350%" y="255.50">perf`co..</text></g><g><title>perf`core::cell::Cell&lt;T&gt;::set (3,424 samples, 5.61%)</title><rect x="73.1605%" y="245" width="5.6149%" height="15" fill="rgb(208,32,45)" fg:x="44614" fg:w="3424"/><text x="73.4105%" y="255.50">perf`co..</text></g><g><title>perf`core::sync::atomic::AtomicUsize::load (22 samples, 0.04%)</title><rect x="78.7754%" y="245" width="0.0361%" height="15" fill="rgb(207,135,9)" fg:x="48038" fg:w="22"/><text x="79.0254%" y="255.50"></text></g><g><title>perf`core::sync::atomic::AtomicUsize::load (6,924 samples, 11.35%)</title><rect x="86.5729%" y="229" width="11.3544%" height="15" fill="rgb(206,86,44)" fg:x="52793" fg:w="6924"/><text x="86.8229%" y="239.50">perf`core::sync::..</text></g><g><title>perf`core::sync::atomic::atomic_load (4,661 samples, 7.64%)</title><rect x="90.2839%" y="213" width="7.6434%" height="15" fill="rgb(245,177,15)" fg:x="55056" fg:w="4661"/><text x="90.5339%" y="223.50">perf`core:..</text></g><g><title>perf`rtrb::Consumer&lt;T&gt;::pop (27,529 samples, 45.14%)</title><rect x="54.6498%" y="261" width="45.1436%" height="15" fill="rgb(206,64,50)" fg:x="33326" fg:w="27529"/><text x="54.8998%" y="271.50">perf`rtrb::Consumer&lt;T&gt;::pop</text></g><g><title>perf`rtrb::Consumer&lt;T&gt;::next_head (12,795 samples, 20.98%)</title><rect x="78.8114%" y="245" width="20.9819%" height="15" fill="rgb(234,36,40)" fg:x="48060" fg:w="12795"/><text x="79.0614%" y="255.50">perf`rtrb::Consumer&lt;T&gt;::next_head</text></g><g><title>perf`core::sync::atomic::atomic_load (1,138 samples, 1.87%)</title><rect x="97.9272%" y="229" width="1.8662%" height="15" fill="rgb(213,64,8)" fg:x="59717" fg:w="1138"/><text x="98.1772%" y="239.50">p..</text></g><g><title>perf`&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (64 samples, 0.10%)</title><rect x="99.8327%" y="213" width="0.1050%" height="15" fill="rgb(210,75,36)" fg:x="60879" fg:w="64"/><text x="100.0827%" y="223.50"></text></g><g><title>perf`rtrb::chunks::ReadChunk&lt;T&gt;::commit_all (115 samples, 0.19%)</title><rect x="99.7934%" y="261" width="0.1886%" height="15" fill="rgb(229,88,21)" fg:x="60855" fg:w="115"/><text x="100.0434%" y="271.50"></text></g><g><title>perf`rtrb::chunks::ReadChunk&lt;T&gt;::commit_unchecked (111 samples, 0.18%)</title><rect x="99.7999%" y="245" width="0.1820%" height="15" fill="rgb(252,204,47)" fg:x="60859" fg:w="111"/><text x="100.0499%" y="255.50"></text></g><g><title>perf`core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (103 samples, 0.17%)</title><rect x="99.8131%" y="229" width="0.1689%" height="15" fill="rgb(208,77,27)" fg:x="60867" fg:w="103"/><text x="100.0631%" y="239.50"></text></g><g><title>perf`&lt;usize as core::iter::range::Step&gt;::forward_unchecked (27 samples, 0.04%)</title><rect x="99.9377%" y="213" width="0.0443%" height="15" fill="rgb(221,76,26)" fg:x="60943" fg:w="27"/><text x="100.1877%" y="223.50"></text></g><g><title>perf`convrs::conv::Conv::new::_{{closure}} (40,544 samples, 66.49%)</title><rect x="33.5121%" y="277" width="66.4863%" height="15" fill="rgb(225,139,18)" fg:x="20436" fg:w="40544"/><text x="33.7621%" y="287.50">perf`convrs::conv::Conv::new::_{{closure}}</text></g><g><title>perf`rtrb::chunks::_&lt;impl rtrb::Producer&lt;T&gt;&gt;::write_chunk (9 samples, 0.01%)</title><rect x="99.9836%" y="261" width="0.0148%" height="15" fill="rgb(230,137,11)" fg:x="60971" fg:w="9"/><text x="100.2336%" y="271.50"></text></g><g><title>perf`core::result::Result&lt;T,E&gt;::map (9 samples, 0.01%)</title><rect x="99.9836%" y="245" width="0.0148%" height="15" fill="rgb(212,28,1)" fg:x="60971" fg:w="9"/><text x="100.2336%" y="255.50"></text></g><g><title>perf`core::ops::function::FnOnce::call_once (9 samples, 0.01%)</title><rect x="99.9836%" y="229" width="0.0148%" height="15" fill="rgb(248,164,17)" fg:x="60971" fg:w="9"/><text x="100.2336%" y="239.50"></text></g><g><title>perf`&lt;rtrb::chunks::WriteChunk&lt;T&gt; as core::convert::From&lt;rtrb::chunks::WriteChunkUninit&lt;T&gt;&gt;&gt;::from (9 samples, 0.01%)</title><rect x="99.9836%" y="213" width="0.0148%" height="15" fill="rgb(222,171,42)" fg:x="60971" fg:w="9"/><text x="100.2336%" y="223.50"></text></g><g><title>all (60,981 samples, 100%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(243,84,45)" fg:x="0" fg:w="60981"/><text x="0.2500%" y="479.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (40,545 samples, 66.49%)</title><rect x="33.5121%" y="453" width="66.4879%" height="15" fill="rgb(252,49,23)" fg:x="20436" fg:w="40545"/><text x="33.7621%" y="463.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (40,545 samples, 66.49%)</title><rect x="33.5121%" y="437" width="66.4879%" height="15" fill="rgb(215,19,7)" fg:x="20436" fg:w="40545"/><text x="33.7621%" y="447.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>perf`std::sys::pal::unix::thread::Thread::new::thread_start (40,545 samples, 66.49%)</title><rect x="33.5121%" y="421" width="66.4879%" height="15" fill="rgb(238,81,41)" fg:x="20436" fg:w="40545"/><text x="33.7621%" y="431.50">perf`std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>perf`core::ops::function::FnOnce::call_once{{vtable.shim}} (40,545 samples, 66.49%)</title><rect x="33.5121%" y="405" width="66.4879%" height="15" fill="rgb(210,199,37)" fg:x="20436" fg:w="40545"/><text x="33.7621%" y="415.50">perf`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>perf`std::thread::Builder::spawn_unchecked_::_{{closure}} (40,545 samples, 66.49%)</title><rect x="33.5121%" y="389" width="66.4879%" height="15" fill="rgb(244,192,49)" fg:x="20436" fg:w="40545"/><text x="33.7621%" y="399.50">perf`std::thread::Builder::spawn_unchecked_::_{{closure}}</text></g><g><title>perf`std::panicking::try (40,545 samples, 66.49%)</title><rect x="33.5121%" y="373" width="66.4879%" height="15" fill="rgb(226,211,11)" fg:x="20436" fg:w="40545"/><text x="33.7621%" y="383.50">perf`std::panicking::try</text></g><g><title>perf`__rust_try (40,545 samples, 66.49%)</title><rect x="33.5121%" y="357" width="66.4879%" height="15" fill="rgb(236,162,54)" fg:x="20436" fg:w="40545"/><text x="33.7621%" y="367.50">perf`__rust_try</text></g><g><title>perf`std::panicking::try::do_call (40,545 samples, 66.49%)</title><rect x="33.5121%" y="341" width="66.4879%" height="15" fill="rgb(220,229,9)" fg:x="20436" fg:w="40545"/><text x="33.7621%" y="351.50">perf`std::panicking::try::do_call</text></g><g><title>perf`&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (40,545 samples, 66.49%)</title><rect x="33.5121%" y="325" width="66.4879%" height="15" fill="rgb(250,87,22)" fg:x="20436" fg:w="40545"/><text x="33.7621%" y="335.50">perf`&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>perf`std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (40,545 samples, 66.49%)</title><rect x="33.5121%" y="309" width="66.4879%" height="15" fill="rgb(239,43,17)" fg:x="20436" fg:w="40545"/><text x="33.7621%" y="319.50">perf`std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}}</text></g><g><title>perf`std::sys_common::backtrace::__rust_begin_short_backtrace (40,545 samples, 66.49%)</title><rect x="33.5121%" y="293" width="66.4879%" height="15" fill="rgb(231,177,25)" fg:x="20436" fg:w="40545"/><text x="33.7621%" y="303.50">perf`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g></svg></svg>