<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="438" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="421.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="421.00"> </text><svg id="frames" x="10" width="1180" total_samples="2641"><g><title>perf`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="0.1515%" y="245" width="0.0379%" height="15" fill="rgb(227,0,7)" fg:x="4" fg:w="1"/><text x="0.4015%" y="255.50"></text></g><g><title>perf`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (18 samples, 0.68%)</title><rect x="0.1893%" y="245" width="0.6816%" height="15" fill="rgb(217,0,24)" fg:x="5" fg:w="18"/><text x="0.4393%" y="255.50"></text></g><g><title>perf`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.04%)</title><rect x="0.8709%" y="245" width="0.0379%" height="15" fill="rgb(221,193,54)" fg:x="23" fg:w="1"/><text x="1.1209%" y="255.50"></text></g><g><title>perf`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="0.9087%" y="245" width="0.0379%" height="15" fill="rgb(248,212,6)" fg:x="24" fg:w="1"/><text x="1.1587%" y="255.50"></text></g><g><title>perf`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (1 samples, 0.04%)</title><rect x="0.9087%" y="229" width="0.0379%" height="15" fill="rgb(208,68,35)" fg:x="24" fg:w="1"/><text x="1.1587%" y="239.50"></text></g><g><title>perf`&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Mul&gt;::mul (11 samples, 0.42%)</title><rect x="0.9466%" y="245" width="0.4165%" height="15" fill="rgb(232,128,0)" fg:x="25" fg:w="11"/><text x="1.1966%" y="255.50"></text></g><g><title>perf`assert_no_alloc::AllocDisabler::check (1 samples, 0.04%)</title><rect x="1.5146%" y="101" width="0.0379%" height="15" fill="rgb(207,160,47)" fg:x="40" fg:w="1"/><text x="1.7646%" y="111.50"></text></g><g><title>perf`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.04%)</title><rect x="1.5146%" y="85" width="0.0379%" height="15" fill="rgb(228,23,34)" fg:x="40" fg:w="1"/><text x="1.7646%" y="95.50"></text></g><g><title>perf`std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.04%)</title><rect x="1.5146%" y="69" width="0.0379%" height="15" fill="rgb(218,30,26)" fg:x="40" fg:w="1"/><text x="1.7646%" y="79.50"></text></g><g><title>perf`assert_no_alloc::ALLOC_FORBID_COUNT::__getit (1 samples, 0.04%)</title><rect x="1.5146%" y="53" width="0.0379%" height="15" fill="rgb(220,122,19)" fg:x="40" fg:w="1"/><text x="1.7646%" y="63.50"></text></g><g><title>perf`std::sys::pal::common::thread_local::fast_local::Key&lt;T&gt;::get (1 samples, 0.04%)</title><rect x="1.5146%" y="37" width="0.0379%" height="15" fill="rgb(250,228,42)" fg:x="40" fg:w="1"/><text x="1.7646%" y="47.50"></text></g><g><title>perf`&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2 samples, 0.08%)</title><rect x="1.5146%" y="181" width="0.0757%" height="15" fill="rgb(240,193,28)" fg:x="40" fg:w="2"/><text x="1.7646%" y="191.50"></text></g><g><title>perf`alloc::alloc::Global::grow_impl (2 samples, 0.08%)</title><rect x="1.5146%" y="165" width="0.0757%" height="15" fill="rgb(216,20,37)" fg:x="40" fg:w="2"/><text x="1.7646%" y="175.50"></text></g><g><title>perf`__rust_realloc (2 samples, 0.08%)</title><rect x="1.5146%" y="149" width="0.0757%" height="15" fill="rgb(206,188,39)" fg:x="40" fg:w="2"/><text x="1.7646%" y="159.50"></text></g><g><title>perf`core::alloc::global::GlobalAlloc::realloc (2 samples, 0.08%)</title><rect x="1.5146%" y="133" width="0.0757%" height="15" fill="rgb(217,207,13)" fg:x="40" fg:w="2"/><text x="1.7646%" y="143.50"></text></g><g><title>perf`&lt;assert_no_alloc::AllocDisabler as core::alloc::global::GlobalAlloc&gt;::alloc (2 samples, 0.08%)</title><rect x="1.5146%" y="117" width="0.0757%" height="15" fill="rgb(231,73,38)" fg:x="40" fg:w="2"/><text x="1.7646%" y="127.50"></text></g><g><title>perf`std::sys::pal::unix::alloc::_&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.04%)</title><rect x="1.5524%" y="101" width="0.0379%" height="15" fill="rgb(225,20,46)" fg:x="41" fg:w="1"/><text x="1.8024%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.04%)</title><rect x="1.5524%" y="85" width="0.0379%" height="15" fill="rgb(210,31,41)" fg:x="41" fg:w="1"/><text x="1.8024%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.04%)</title><rect x="1.5524%" y="69" width="0.0379%" height="15" fill="rgb(221,200,47)" fg:x="41" fg:w="1"/><text x="1.8024%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.04%)</title><rect x="1.5524%" y="53" width="0.0379%" height="15" fill="rgb(226,26,5)" fg:x="41" fg:w="1"/><text x="1.8024%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.04%)</title><rect x="1.5524%" y="37" width="0.0379%" height="15" fill="rgb(249,33,26)" fg:x="41" fg:w="1"/><text x="1.8024%" y="47.50"></text></g><g><title>perf`alloc::vec::Vec&lt;T,A&gt;::push (7 samples, 0.27%)</title><rect x="1.3631%" y="245" width="0.2651%" height="15" fill="rgb(235,183,28)" fg:x="36" fg:w="7"/><text x="1.6131%" y="255.50"></text></g><g><title>perf`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.19%)</title><rect x="1.4388%" y="229" width="0.1893%" height="15" fill="rgb(221,5,38)" fg:x="38" fg:w="5"/><text x="1.6888%" y="239.50"></text></g><g><title>perf`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (5 samples, 0.19%)</title><rect x="1.4388%" y="213" width="0.1893%" height="15" fill="rgb(247,18,42)" fg:x="38" fg:w="5"/><text x="1.6888%" y="223.50"></text></g><g><title>perf`alloc::raw_vec::finish_grow (3 samples, 0.11%)</title><rect x="1.5146%" y="197" width="0.1136%" height="15" fill="rgb(241,131,45)" fg:x="40" fg:w="3"/><text x="1.7646%" y="207.50"></text></g><g><title>perf`core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.04%)</title><rect x="1.5903%" y="181" width="0.0379%" height="15" fill="rgb(249,31,29)" fg:x="42" fg:w="1"/><text x="1.8403%" y="191.50"></text></g><g><title>perf`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="1.6282%" y="197" width="0.0379%" height="15" fill="rgb(225,111,53)" fg:x="43" fg:w="1"/><text x="1.8782%" y="207.50"></text></g><g><title>perf`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="1.6282%" y="181" width="0.0379%" height="15" fill="rgb(238,160,17)" fg:x="43" fg:w="1"/><text x="1.8782%" y="191.50"></text></g><g><title>perf`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (1 samples, 0.04%)</title><rect x="1.6282%" y="165" width="0.0379%" height="15" fill="rgb(214,148,48)" fg:x="43" fg:w="1"/><text x="1.8782%" y="175.50"></text></g><g><title>perf`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="1.6282%" y="149" width="0.0379%" height="15" fill="rgb(232,36,49)" fg:x="43" fg:w="1"/><text x="1.8782%" y="159.50"></text></g><g><title>perf`&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="1.6282%" y="133" width="0.0379%" height="15" fill="rgb(209,103,24)" fg:x="43" fg:w="1"/><text x="1.8782%" y="143.50"></text></g><g><title>perf`&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Add&gt;::add (1 samples, 0.04%)</title><rect x="1.6660%" y="197" width="0.0379%" height="15" fill="rgb(229,88,8)" fg:x="44" fg:w="1"/><text x="1.9160%" y="207.50"></text></g><g><title>perf`&lt;realfft::RealToComplexEven&lt;T&gt; as realfft::RealToComplex&lt;T&gt;&gt;::process (3 samples, 0.11%)</title><rect x="1.6282%" y="229" width="0.1136%" height="15" fill="rgb(213,181,19)" fg:x="43" fg:w="3"/><text x="1.8782%" y="239.50"></text></g><g><title>perf`&lt;realfft::RealToComplexEven&lt;T&gt; as realfft::RealToComplex&lt;T&gt;&gt;::process_with_scratch (3 samples, 0.11%)</title><rect x="1.6282%" y="213" width="0.1136%" height="15" fill="rgb(254,191,54)" fg:x="43" fg:w="3"/><text x="1.8782%" y="223.50"></text></g><g><title>perf`num_complex::Complex&lt;T&gt;::new (1 samples, 0.04%)</title><rect x="1.7039%" y="197" width="0.0379%" height="15" fill="rgb(241,83,37)" fg:x="45" fg:w="1"/><text x="1.9539%" y="207.50"></text></g><g><title>perf`convrs::helpers::process_filter (4 samples, 0.15%)</title><rect x="1.6282%" y="245" width="0.1515%" height="15" fill="rgb(233,36,39)" fg:x="43" fg:w="4"/><text x="1.8782%" y="255.50"></text></g><g><title>perf`core::slice::_&lt;impl [T]&gt;::fill (1 samples, 0.04%)</title><rect x="1.7418%" y="229" width="0.0379%" height="15" fill="rgb(226,3,54)" fg:x="46" fg:w="1"/><text x="1.9918%" y="239.50"></text></g><g><title>perf`&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="1.7418%" y="213" width="0.0379%" height="15" fill="rgb(245,192,40)" fg:x="46" fg:w="1"/><text x="1.9918%" y="223.50"></text></g><g><title>perf`&lt;f32 as core::ops::arith::Add&gt;::add (1 samples, 0.04%)</title><rect x="1.7796%" y="229" width="0.0379%" height="15" fill="rgb(238,167,29)" fg:x="47" fg:w="1"/><text x="2.0296%" y="239.50"></text></g><g><title>perf`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="1.8175%" y="213" width="0.0379%" height="15" fill="rgb(232,182,51)" fg:x="48" fg:w="1"/><text x="2.0675%" y="223.50"></text></g><g><title>perf`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="1.8175%" y="197" width="0.0379%" height="15" fill="rgb(231,60,39)" fg:x="48" fg:w="1"/><text x="2.0675%" y="207.50"></text></g><g><title>perf`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (1 samples, 0.04%)</title><rect x="1.8175%" y="181" width="0.0379%" height="15" fill="rgb(208,69,12)" fg:x="48" fg:w="1"/><text x="2.0675%" y="191.50"></text></g><g><title>perf`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="1.8175%" y="165" width="0.0379%" height="15" fill="rgb(235,93,37)" fg:x="48" fg:w="1"/><text x="2.0675%" y="175.50"></text></g><g><title>perf`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (1 samples, 0.04%)</title><rect x="1.8175%" y="149" width="0.0379%" height="15" fill="rgb(213,116,39)" fg:x="48" fg:w="1"/><text x="2.0675%" y="159.50"></text></g><g><title>perf`&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (1 samples, 0.04%)</title><rect x="1.8175%" y="133" width="0.0379%" height="15" fill="rgb(222,207,29)" fg:x="48" fg:w="1"/><text x="2.0675%" y="143.50"></text></g><g><title>perf`convrs::upconv::UPConv::new (3 samples, 0.11%)</title><rect x="1.7796%" y="245" width="0.1136%" height="15" fill="rgb(206,96,30)" fg:x="47" fg:w="3"/><text x="2.0296%" y="255.50"></text></g><g><title>perf`&lt;realfft::RealToComplexEven&lt;T&gt; as realfft::RealToComplex&lt;T&gt;&gt;::process_with_scratch (2 samples, 0.08%)</title><rect x="1.8175%" y="229" width="0.0757%" height="15" fill="rgb(218,138,4)" fg:x="48" fg:w="2"/><text x="2.0675%" y="239.50"></text></g><g><title>perf`&lt;rustfft::neon::neon_radix4::Neon32Radix4&lt;T&gt; as rustfft::Fft&lt;T&gt;&gt;::process_outofplace_with_scratch (1 samples, 0.04%)</title><rect x="1.8554%" y="213" width="0.0379%" height="15" fill="rgb(250,191,14)" fg:x="49" fg:w="1"/><text x="2.1054%" y="223.50"></text></g><g><title>perf`rustfft::array_utils::iter_chunks_zipped (1 samples, 0.04%)</title><rect x="1.8554%" y="197" width="0.0379%" height="15" fill="rgb(239,60,40)" fg:x="49" fg:w="1"/><text x="2.1054%" y="207.50"></text></g><g><title>perf`&lt;rustfft::neon::neon_radix4::Neon32Radix4&lt;T&gt; as rustfft::Fft&lt;T&gt;&gt;::process_outofplace_with_scratch::_{{closure}} (1 samples, 0.04%)</title><rect x="1.8554%" y="181" width="0.0379%" height="15" fill="rgb(206,27,48)" fg:x="49" fg:w="1"/><text x="2.1054%" y="191.50"></text></g><g><title>perf`rustfft::neon::neon_radix4::Neon32Radix4&lt;T&gt;::perform_fft_out_of_place (1 samples, 0.04%)</title><rect x="1.8554%" y="165" width="0.0379%" height="15" fill="rgb(225,35,8)" fg:x="49" fg:w="1"/><text x="2.1054%" y="175.50"></text></g><g><title>perf`rustfft::neon::neon_butterflies::NeonF32Butterfly8&lt;T&gt;::perform_fft_butterfly_multi (1 samples, 0.04%)</title><rect x="1.8554%" y="149" width="0.0379%" height="15" fill="rgb(250,213,24)" fg:x="49" fg:w="1"/><text x="2.1054%" y="159.50"></text></g><g><title>perf`rustfft::array_utils::iter_chunks (1 samples, 0.04%)</title><rect x="1.8554%" y="133" width="0.0379%" height="15" fill="rgb(247,123,22)" fg:x="49" fg:w="1"/><text x="2.1054%" y="143.50"></text></g><g><title>perf`rustfft::neon::neon_butterflies::NeonF32Butterfly8&lt;T&gt;::perform_fft_butterfly_multi::_{{closure}} (1 samples, 0.04%)</title><rect x="1.8554%" y="117" width="0.0379%" height="15" fill="rgb(231,138,38)" fg:x="49" fg:w="1"/><text x="2.1054%" y="127.50"></text></g><g><title>perf`core::core_arch::aarch64::neon::generated::vtrn1q_f64 (1 samples, 0.04%)</title><rect x="1.8554%" y="101" width="0.0379%" height="15" fill="rgb(231,145,46)" fg:x="49" fg:w="1"/><text x="2.1054%" y="111.50"></text></g><g><title>perf`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (272 samples, 10.30%)</title><rect x="8.3302%" y="229" width="10.2991%" height="15" fill="rgb(251,118,11)" fg:x="220" fg:w="272"/><text x="8.5802%" y="239.50">perf`&lt;alloc::ve..</text></g><g><title>perf`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (116 samples, 4.39%)</title><rect x="14.2370%" y="213" width="4.3923%" height="15" fill="rgb(217,147,25)" fg:x="376" fg:w="116"/><text x="14.4870%" y="223.50">perf`..</text></g><g><title>perf`&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.04%)</title><rect x="23.5895%" y="213" width="0.0379%" height="15" fill="rgb(247,81,37)" fg:x="623" fg:w="1"/><text x="23.8395%" y="223.50"></text></g><g><title>perf`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (254 samples, 9.62%)</title><rect x="18.6293%" y="229" width="9.6176%" height="15" fill="rgb(209,12,38)" fg:x="492" fg:w="254"/><text x="18.8793%" y="239.50">perf`&lt;alloc::v..</text></g><g><title>perf`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (122 samples, 4.62%)</title><rect x="23.6274%" y="213" width="4.6195%" height="15" fill="rgb(227,1,9)" fg:x="624" fg:w="122"/><text x="23.8774%" y="223.50">perf`..</text></g><g><title>perf`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.23%)</title><rect x="28.2469%" y="229" width="0.2272%" height="15" fill="rgb(248,47,43)" fg:x="746" fg:w="6"/><text x="28.4969%" y="239.50"></text></g><g><title>perf`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (6 samples, 0.23%)</title><rect x="28.2469%" y="213" width="0.2272%" height="15" fill="rgb(221,10,30)" fg:x="746" fg:w="6"/><text x="28.4969%" y="223.50"></text></g><g><title>perf`&lt;core::slice::iter::Chunks&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (6 samples, 0.23%)</title><rect x="28.2469%" y="197" width="0.2272%" height="15" fill="rgb(210,229,1)" fg:x="746" fg:w="6"/><text x="28.4969%" y="207.50"></text></g><g><title>perf`core::cmp::min_by (5 samples, 0.19%)</title><rect x="28.2847%" y="181" width="0.1893%" height="15" fill="rgb(222,148,37)" fg:x="747" fg:w="5"/><text x="28.5347%" y="191.50"></text></g><g><title>perf`core::ops::function::FnOnce::call_once (4 samples, 0.15%)</title><rect x="28.3226%" y="165" width="0.1515%" height="15" fill="rgb(234,67,33)" fg:x="748" fg:w="4"/><text x="28.5726%" y="175.50"></text></g><g><title>perf`&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (9 samples, 0.34%)</title><rect x="28.4741%" y="229" width="0.3408%" height="15" fill="rgb(247,98,35)" fg:x="752" fg:w="9"/><text x="28.7241%" y="239.50"></text></g><g><title>perf`&lt;f32 as core::ops::arith::Add&gt;::add (55 samples, 2.08%)</title><rect x="28.8148%" y="229" width="2.0825%" height="15" fill="rgb(247,138,52)" fg:x="761" fg:w="55"/><text x="29.0648%" y="239.50">p..</text></g><g><title>perf`&lt;f32 as core::ops::arith::AddAssign&gt;::add_assign (152 samples, 5.76%)</title><rect x="30.8974%" y="229" width="5.7554%" height="15" fill="rgb(213,79,30)" fg:x="816" fg:w="152"/><text x="31.1474%" y="239.50">perf`&lt;f..</text></g><g><title>perf`&lt;f32 as core::ops::arith::Mul&gt;::mul (300 samples, 11.36%)</title><rect x="36.6528%" y="229" width="11.3593%" height="15" fill="rgb(246,177,23)" fg:x="968" fg:w="300"/><text x="36.9028%" y="239.50">perf`&lt;f32 as core..</text></g><g><title>perf`&lt;f32 as core::ops::arith::Sub&gt;::sub (71 samples, 2.69%)</title><rect x="48.0121%" y="229" width="2.6884%" height="15" fill="rgb(230,62,27)" fg:x="1268" fg:w="71"/><text x="48.2621%" y="239.50">pe..</text></g><g><title>perf`&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Mul&gt;::mul (430 samples, 16.28%)</title><rect x="50.7005%" y="229" width="16.2817%" height="15" fill="rgb(216,154,8)" fg:x="1339" fg:w="430"/><text x="50.9505%" y="239.50">perf`&lt;num_complex::Comple..</text></g><g><title>perf`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (3 samples, 0.11%)</title><rect x="67.2473%" y="149" width="0.1136%" height="15" fill="rgb(244,35,45)" fg:x="1776" fg:w="3"/><text x="67.4973%" y="159.50"></text></g><g><title>perf`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (7 samples, 0.27%)</title><rect x="67.2094%" y="181" width="0.2651%" height="15" fill="rgb(251,115,12)" fg:x="1775" fg:w="7"/><text x="67.4594%" y="191.50"></text></g><g><title>perf`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.23%)</title><rect x="67.2473%" y="165" width="0.2272%" height="15" fill="rgb(240,54,50)" fg:x="1776" fg:w="6"/><text x="67.4973%" y="175.50"></text></g><g><title>perf`&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.11%)</title><rect x="67.3608%" y="149" width="0.1136%" height="15" fill="rgb(233,84,52)" fg:x="1779" fg:w="3"/><text x="67.6108%" y="159.50"></text></g><g><title>perf`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.30%)</title><rect x="67.2094%" y="197" width="0.3029%" height="15" fill="rgb(207,117,47)" fg:x="1775" fg:w="8"/><text x="67.4594%" y="207.50"></text></g><g><title>perf`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="67.4744%" y="181" width="0.0379%" height="15" fill="rgb(249,43,39)" fg:x="1782" fg:w="1"/><text x="67.7244%" y="191.50"></text></g><g><title>perf`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 0.04%)</title><rect x="67.5123%" y="197" width="0.0379%" height="15" fill="rgb(209,38,44)" fg:x="1783" fg:w="1"/><text x="67.7623%" y="207.50"></text></g><g><title>perf`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.45%)</title><rect x="67.1337%" y="213" width="0.4544%" height="15" fill="rgb(236,212,23)" fg:x="1773" fg:w="12"/><text x="67.3837%" y="223.50"></text></g><g><title>perf`realfft::zip3::_{{closure}} (1 samples, 0.04%)</title><rect x="67.5502%" y="197" width="0.0379%" height="15" fill="rgb(242,79,21)" fg:x="1784" fg:w="1"/><text x="67.8002%" y="207.50"></text></g><g><title>perf`&lt;f32 as core::ops::arith::Add&gt;::add (1 samples, 0.04%)</title><rect x="67.5880%" y="213" width="0.0379%" height="15" fill="rgb(211,96,35)" fg:x="1785" fg:w="1"/><text x="67.8380%" y="223.50"></text></g><g><title>perf`&lt;f32 as core::ops::arith::Mul&gt;::mul (1 samples, 0.04%)</title><rect x="67.6259%" y="213" width="0.0379%" height="15" fill="rgb(253,215,40)" fg:x="1786" fg:w="1"/><text x="67.8759%" y="223.50"></text></g><g><title>perf`&lt;f32 as core::ops::arith::Sub&gt;::sub (1 samples, 0.04%)</title><rect x="67.6638%" y="213" width="0.0379%" height="15" fill="rgb(211,81,21)" fg:x="1787" fg:w="1"/><text x="67.9138%" y="223.50"></text></g><g><title>perf`&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Add&gt;::add (1 samples, 0.04%)</title><rect x="67.7016%" y="213" width="0.0379%" height="15" fill="rgb(208,190,38)" fg:x="1788" fg:w="1"/><text x="67.9516%" y="223.50"></text></g><g><title>perf`&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Mul&lt;T&gt;&gt;::mul (5 samples, 0.19%)</title><rect x="67.7395%" y="213" width="0.1893%" height="15" fill="rgb(235,213,38)" fg:x="1789" fg:w="5"/><text x="67.9895%" y="223.50"></text></g><g><title>perf`&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Sub&gt;::sub (2 samples, 0.08%)</title><rect x="67.9288%" y="213" width="0.0757%" height="15" fill="rgb(237,122,38)" fg:x="1794" fg:w="2"/><text x="68.1788%" y="223.50"></text></g><g><title>perf`core::core_arch::arm_shared::neon::generated::vmulq_f32 (1 samples, 0.04%)</title><rect x="68.0045%" y="149" width="0.0379%" height="15" fill="rgb(244,218,35)" fg:x="1796" fg:w="1"/><text x="68.2545%" y="159.50"></text></g><g><title>perf`core::core_arch::arm_shared::neon::generated::vsubq_f32 (1 samples, 0.04%)</title><rect x="68.0424%" y="149" width="0.0379%" height="15" fill="rgb(240,68,47)" fg:x="1797" fg:w="1"/><text x="68.2924%" y="159.50"></text></g><g><title>perf`core::core_arch::arm_shared::neon::vaddq_f32 (1 samples, 0.04%)</title><rect x="68.0803%" y="149" width="0.0379%" height="15" fill="rgb(210,16,53)" fg:x="1798" fg:w="1"/><text x="68.3303%" y="159.50"></text></g><g><title>perf`core::core_arch::arm_shared::neon::vrev64q_f32 (2 samples, 0.08%)</title><rect x="68.1181%" y="149" width="0.0757%" height="15" fill="rgb(235,124,12)" fg:x="1799" fg:w="2"/><text x="68.3681%" y="159.50"></text></g><g><title>perf`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.04%)</title><rect x="68.3075%" y="133" width="0.0379%" height="15" fill="rgb(224,169,11)" fg:x="1804" fg:w="1"/><text x="68.5575%" y="143.50"></text></g><g><title>perf`core::slice::_&lt;impl [T]&gt;::get_unchecked (1 samples, 0.04%)</title><rect x="68.3453%" y="133" width="0.0379%" height="15" fill="rgb(250,166,2)" fg:x="1805" fg:w="1"/><text x="68.5953%" y="143.50"></text></g><g><title>perf`core::slice::_&lt;impl [T]&gt;::get_unchecked_mut (1 samples, 0.04%)</title><rect x="68.3832%" y="133" width="0.0379%" height="15" fill="rgb(242,216,29)" fg:x="1806" fg:w="1"/><text x="68.6332%" y="143.50"></text></g><g><title>perf`rustfft::algorithm::radix4::bitreversed_transpose (7 samples, 0.27%)</title><rect x="68.1939%" y="149" width="0.2651%" height="15" fill="rgb(230,116,27)" fg:x="1801" fg:w="7"/><text x="68.4439%" y="159.50"></text></g><g><title>perf`rustfft::algorithm::radix4::reverse_bits (1 samples, 0.04%)</title><rect x="68.4211%" y="133" width="0.0379%" height="15" fill="rgb(228,99,48)" fg:x="1807" fg:w="1"/><text x="68.6711%" y="143.50"></text></g><g><title>perf`core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.04%)</title><rect x="68.4211%" y="117" width="0.0379%" height="15" fill="rgb(253,11,6)" fg:x="1807" fg:w="1"/><text x="68.6711%" y="127.50"></text></g><g><title>perf`&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.04%)</title><rect x="68.4211%" y="101" width="0.0379%" height="15" fill="rgb(247,143,39)" fg:x="1807" fg:w="1"/><text x="68.6711%" y="111.50"></text></g><g><title>perf`core::core_arch::aarch64::neon::generated::vreinterpretq_f32_f64 (3 samples, 0.11%)</title><rect x="68.4589%" y="101" width="0.1136%" height="15" fill="rgb(236,97,10)" fg:x="1808" fg:w="3"/><text x="68.7089%" y="111.50"></text></g><g><title>perf`core::core_arch::aarch64::neon::generated::vreinterpretq_f64_f32 (4 samples, 0.15%)</title><rect x="68.5725%" y="101" width="0.1515%" height="15" fill="rgb(233,208,19)" fg:x="1811" fg:w="4"/><text x="68.8225%" y="111.50"></text></g><g><title>perf`core::core_arch::aarch64::neon::generated::vtrn1q_f64 (3 samples, 0.11%)</title><rect x="68.7240%" y="101" width="0.1136%" height="15" fill="rgb(216,164,2)" fg:x="1815" fg:w="3"/><text x="68.9740%" y="111.50"></text></g><g><title>perf`core::core_arch::aarch64::neon::generated::vtrn2q_f64 (4 samples, 0.15%)</title><rect x="68.8376%" y="101" width="0.1515%" height="15" fill="rgb(220,129,5)" fg:x="1818" fg:w="4"/><text x="69.0876%" y="111.50"></text></g><g><title>perf`core::core_arch::arm_shared::neon::generated::veorq_u32 (1 samples, 0.04%)</title><rect x="68.9890%" y="101" width="0.0379%" height="15" fill="rgb(242,17,10)" fg:x="1822" fg:w="1"/><text x="69.2390%" y="111.50"></text></g><g><title>perf`core::core_arch::arm_shared::neon::generated::vreinterpretq_f32_u32 (1 samples, 0.04%)</title><rect x="69.0269%" y="101" width="0.0379%" height="15" fill="rgb(242,107,0)" fg:x="1823" fg:w="1"/><text x="69.2769%" y="111.50"></text></g><g><title>perf`core::core_arch::arm_shared::neon::generated::vreinterpretq_u32_f32 (4 samples, 0.15%)</title><rect x="69.0647%" y="101" width="0.1515%" height="15" fill="rgb(251,28,31)" fg:x="1824" fg:w="4"/><text x="69.3147%" y="111.50"></text></g><g><title>perf`core::core_arch::arm_shared::neon::generated::vsubq_f32 (2 samples, 0.08%)</title><rect x="69.2162%" y="101" width="0.0757%" height="15" fill="rgb(233,223,10)" fg:x="1828" fg:w="2"/><text x="69.4662%" y="111.50"></text></g><g><title>perf`core::core_arch::arm_shared::neon::vrev64q_f32 (1 samples, 0.04%)</title><rect x="69.2919%" y="101" width="0.0379%" height="15" fill="rgb(215,21,27)" fg:x="1830" fg:w="1"/><text x="69.5419%" y="111.50"></text></g><g><title>perf`core::core_arch::aarch64::neon::vst1q_f32 (1 samples, 0.04%)</title><rect x="69.4813%" y="85" width="0.0379%" height="15" fill="rgb(232,23,21)" fg:x="1835" fg:w="1"/><text x="69.7313%" y="95.50"></text></g><g><title>perf`rustfft::neon::neon_butterflies::NeonF32Butterfly8&lt;T&gt;::perform_fft_butterfly_multi (29 samples, 1.10%)</title><rect x="68.4589%" y="149" width="1.0981%" height="15" fill="rgb(244,5,23)" fg:x="1808" fg:w="29"/><text x="68.7089%" y="159.50"></text></g><g><title>perf`rustfft::array_utils::iter_chunks (29 samples, 1.10%)</title><rect x="68.4589%" y="133" width="1.0981%" height="15" fill="rgb(226,81,46)" fg:x="1808" fg:w="29"/><text x="68.7089%" y="143.50"></text></g><g><title>perf`rustfft::neon::neon_butterflies::NeonF32Butterfly8&lt;T&gt;::perform_fft_butterfly_multi::_{{closure}} (29 samples, 1.10%)</title><rect x="68.4589%" y="117" width="1.0981%" height="15" fill="rgb(247,70,30)" fg:x="1808" fg:w="29"/><text x="68.7089%" y="127.50"></text></g><g><title>perf`rustfft::neon::neon_butterflies::NeonF32Butterfly8&lt;T&gt;::perform_parallel_fft_butterfly (6 samples, 0.23%)</title><rect x="69.3298%" y="101" width="0.2272%" height="15" fill="rgb(212,68,19)" fg:x="1831" fg:w="6"/><text x="69.5798%" y="111.50"></text></g><g><title>perf`core::ptr::write_unaligned (1 samples, 0.04%)</title><rect x="69.5191%" y="85" width="0.0379%" height="15" fill="rgb(240,187,13)" fg:x="1836" fg:w="1"/><text x="69.7691%" y="95.50"></text></g><g><title>perf`core::slice::_&lt;impl [T]&gt;::split_at (1 samples, 0.04%)</title><rect x="69.9735%" y="101" width="0.0379%" height="15" fill="rgb(223,113,26)" fg:x="1848" fg:w="1"/><text x="70.2235%" y="111.50"></text></g><g><title>perf`&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.11%)</title><rect x="69.9735%" y="133" width="0.1136%" height="15" fill="rgb(206,192,2)" fg:x="1848" fg:w="3"/><text x="70.2235%" y="143.50"></text></g><g><title>perf`&lt;core::slice::iter::ChunksExact&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.11%)</title><rect x="69.9735%" y="117" width="0.1136%" height="15" fill="rgb(241,108,4)" fg:x="1848" fg:w="3"/><text x="70.2235%" y="127.50"></text></g><g><title>perf`core::slice::_&lt;impl [T]&gt;::split_at_checked (2 samples, 0.08%)</title><rect x="70.0114%" y="101" width="0.0757%" height="15" fill="rgb(247,173,49)" fg:x="1849" fg:w="2"/><text x="70.2614%" y="111.50"></text></g><g><title>perf`core::core_arch::aarch64::neon::vld1q_f32 (2 samples, 0.08%)</title><rect x="70.0871%" y="133" width="0.0757%" height="15" fill="rgb(224,114,35)" fg:x="1851" fg:w="2"/><text x="70.3371%" y="143.50"></text></g><g><title>perf`core::core_arch::aarch64::neon::vst1q_f32 (1 samples, 0.04%)</title><rect x="70.1628%" y="133" width="0.0379%" height="15" fill="rgb(245,159,27)" fg:x="1853" fg:w="1"/><text x="70.4128%" y="143.50"></text></g><g><title>perf`&lt;rustfft::neon::neon_radix4::Neon32Radix4&lt;T&gt; as rustfft::Fft&lt;T&gt;&gt;::process_outofplace_with_scratch (59 samples, 2.23%)</title><rect x="68.0045%" y="213" width="2.2340%" height="15" fill="rgb(245,172,44)" fg:x="1796" fg:w="59"/><text x="68.2545%" y="223.50">p..</text></g><g><title>perf`rustfft::array_utils::iter_chunks_zipped (59 samples, 2.23%)</title><rect x="68.0045%" y="197" width="2.2340%" height="15" fill="rgb(236,23,11)" fg:x="1796" fg:w="59"/><text x="68.2545%" y="207.50">p..</text></g><g><title>perf`&lt;rustfft::neon::neon_radix4::Neon32Radix4&lt;T&gt; as rustfft::Fft&lt;T&gt;&gt;::process_outofplace_with_scratch::_{{closure}} (59 samples, 2.23%)</title><rect x="68.0045%" y="181" width="2.2340%" height="15" fill="rgb(205,117,38)" fg:x="1796" fg:w="59"/><text x="68.2545%" y="191.50">p..</text></g><g><title>perf`rustfft::neon::neon_radix4::Neon32Radix4&lt;T&gt;::perform_fft_out_of_place (59 samples, 2.23%)</title><rect x="68.0045%" y="165" width="2.2340%" height="15" fill="rgb(237,72,25)" fg:x="1796" fg:w="59"/><text x="68.2545%" y="175.50">p..</text></g><g><title>perf`rustfft::neon::neon_radix4::butterfly_4_32 (18 samples, 0.68%)</title><rect x="69.5570%" y="149" width="0.6816%" height="15" fill="rgb(244,70,9)" fg:x="1837" fg:w="18"/><text x="69.8070%" y="159.50"></text></g><g><title>perf`core::ptr::write_unaligned (1 samples, 0.04%)</title><rect x="70.2007%" y="133" width="0.0379%" height="15" fill="rgb(217,125,39)" fg:x="1854" fg:w="1"/><text x="70.4507%" y="143.50"></text></g><g><title>perf`&lt;realfft::ComplexToRealEven&lt;T&gt; as realfft::ComplexToReal&lt;T&gt;&gt;::process_with_scratch (87 samples, 3.29%)</title><rect x="66.9822%" y="229" width="3.2942%" height="15" fill="rgb(235,36,10)" fg:x="1769" fg:w="87"/><text x="67.2322%" y="239.50">per..</text></g><g><title>perf`num_complex::Complex&lt;T&gt;::new (1 samples, 0.04%)</title><rect x="70.2385%" y="213" width="0.0379%" height="15" fill="rgb(251,123,47)" fg:x="1855" fg:w="1"/><text x="70.4885%" y="223.50"></text></g><g><title>perf`&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="70.7308%" y="149" width="0.0379%" height="15" fill="rgb(221,13,13)" fg:x="1868" fg:w="1"/><text x="70.9808%" y="159.50"></text></g><g><title>perf`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (6 samples, 0.23%)</title><rect x="70.7686%" y="149" width="0.2272%" height="15" fill="rgb(238,131,9)" fg:x="1869" fg:w="6"/><text x="71.0186%" y="159.50"></text></g><g><title>perf`&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (5 samples, 0.19%)</title><rect x="70.8065%" y="133" width="0.1893%" height="15" fill="rgb(211,50,8)" fg:x="1870" fg:w="5"/><text x="71.0565%" y="143.50"></text></g><g><title>perf`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (16 samples, 0.61%)</title><rect x="70.5793%" y="181" width="0.6058%" height="15" fill="rgb(245,182,24)" fg:x="1864" fg:w="16"/><text x="70.8293%" y="191.50"></text></g><g><title>perf`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.45%)</title><rect x="70.7308%" y="165" width="0.4544%" height="15" fill="rgb(242,14,37)" fg:x="1868" fg:w="12"/><text x="70.9808%" y="175.50"></text></g><g><title>perf`&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.19%)</title><rect x="70.9958%" y="149" width="0.1893%" height="15" fill="rgb(246,228,12)" fg:x="1875" fg:w="5"/><text x="71.2458%" y="159.50"></text></g><g><title>perf`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.68%)</title><rect x="70.5415%" y="213" width="0.6816%" height="15" fill="rgb(213,55,15)" fg:x="1863" fg:w="18"/><text x="70.7915%" y="223.50"></text></g><g><title>perf`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.64%)</title><rect x="70.5793%" y="197" width="0.6437%" height="15" fill="rgb(209,9,3)" fg:x="1864" fg:w="17"/><text x="70.8293%" y="207.50"></text></g><g><title>perf`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="71.1852%" y="181" width="0.0379%" height="15" fill="rgb(230,59,30)" fg:x="1880" fg:w="1"/><text x="71.4352%" y="191.50"></text></g><g><title>perf`&lt;f32 as core::ops::arith::Mul&gt;::mul (2 samples, 0.08%)</title><rect x="71.2230%" y="213" width="0.0757%" height="15" fill="rgb(209,121,21)" fg:x="1881" fg:w="2"/><text x="71.4730%" y="223.50"></text></g><g><title>perf`&lt;f32 as core::ops::arith::Sub&gt;::sub (1 samples, 0.04%)</title><rect x="71.2988%" y="213" width="0.0379%" height="15" fill="rgb(220,109,13)" fg:x="1883" fg:w="1"/><text x="71.5488%" y="223.50"></text></g><g><title>perf`&lt;f64 as num_traits::cast::ToPrimitive&gt;::to_f32 (1 samples, 0.04%)</title><rect x="71.3366%" y="213" width="0.0379%" height="15" fill="rgb(232,18,1)" fg:x="1884" fg:w="1"/><text x="71.5866%" y="223.50"></text></g><g><title>perf`&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Add&gt;::add (2 samples, 0.08%)</title><rect x="71.3745%" y="213" width="0.0757%" height="15" fill="rgb(215,41,42)" fg:x="1885" fg:w="2"/><text x="71.6245%" y="223.50"></text></g><g><title>perf`&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Mul&lt;T&gt;&gt;::mul (11 samples, 0.42%)</title><rect x="71.4502%" y="213" width="0.4165%" height="15" fill="rgb(224,123,36)" fg:x="1887" fg:w="11"/><text x="71.7002%" y="223.50"></text></g><g><title>perf`&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Sub&gt;::sub (1 samples, 0.04%)</title><rect x="71.8667%" y="213" width="0.0379%" height="15" fill="rgb(240,125,3)" fg:x="1898" fg:w="1"/><text x="72.1167%" y="223.50"></text></g><g><title>perf`core::core_arch::arm_shared::neon::generated::vfmaq_f32 (1 samples, 0.04%)</title><rect x="71.9046%" y="149" width="0.0379%" height="15" fill="rgb(205,98,50)" fg:x="1899" fg:w="1"/><text x="72.1546%" y="159.50"></text></g><g><title>perf`core::core_arch::arm_shared::neon::generated::vsubq_f32 (3 samples, 0.11%)</title><rect x="71.9424%" y="149" width="0.1136%" height="15" fill="rgb(205,185,37)" fg:x="1900" fg:w="3"/><text x="72.1924%" y="159.50"></text></g><g><title>perf`core::core_arch::arm_shared::neon::vaddq_f32 (2 samples, 0.08%)</title><rect x="72.0560%" y="149" width="0.0757%" height="15" fill="rgb(238,207,15)" fg:x="1903" fg:w="2"/><text x="72.3060%" y="159.50"></text></g><g><title>perf`core::core_arch::arm_shared::neon::vrev64q_f32 (1 samples, 0.04%)</title><rect x="72.1318%" y="149" width="0.0379%" height="15" fill="rgb(213,199,42)" fg:x="1905" fg:w="1"/><text x="72.3818%" y="159.50"></text></g><g><title>perf`core::slice::_&lt;impl [T]&gt;::get_unchecked_mut (1 samples, 0.04%)</title><rect x="72.1696%" y="149" width="0.0379%" height="15" fill="rgb(235,201,11)" fg:x="1906" fg:w="1"/><text x="72.4196%" y="159.50"></text></g><g><title>perf`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (1 samples, 0.04%)</title><rect x="72.2075%" y="133" width="0.0379%" height="15" fill="rgb(207,46,11)" fg:x="1907" fg:w="1"/><text x="72.4575%" y="143.50"></text></g><g><title>perf`rustfft::algorithm::radix4::bitreversed_transpose (2 samples, 0.08%)</title><rect x="72.2075%" y="149" width="0.0757%" height="15" fill="rgb(241,35,35)" fg:x="1907" fg:w="2"/><text x="72.4575%" y="159.50"></text></g><g><title>perf`core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.04%)</title><rect x="72.2454%" y="133" width="0.0379%" height="15" fill="rgb(243,32,47)" fg:x="1908" fg:w="1"/><text x="72.4954%" y="143.50"></text></g><g><title>perf`&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.04%)</title><rect x="72.2454%" y="117" width="0.0379%" height="15" fill="rgb(247,202,23)" fg:x="1908" fg:w="1"/><text x="72.4954%" y="127.50"></text></g><g><title>perf`core::core_arch::aarch64::neon::generated::vreinterpretq_f32_f64 (1 samples, 0.04%)</title><rect x="72.2832%" y="101" width="0.0379%" height="15" fill="rgb(219,102,11)" fg:x="1909" fg:w="1"/><text x="72.5332%" y="111.50"></text></g><g><title>perf`core::core_arch::aarch64::neon::generated::vreinterpretq_f64_f32 (3 samples, 0.11%)</title><rect x="72.3211%" y="101" width="0.1136%" height="15" fill="rgb(243,110,44)" fg:x="1910" fg:w="3"/><text x="72.5711%" y="111.50"></text></g><g><title>perf`core::core_arch::aarch64::neon::generated::vtrn1q_f64 (1 samples, 0.04%)</title><rect x="72.4347%" y="101" width="0.0379%" height="15" fill="rgb(222,74,54)" fg:x="1913" fg:w="1"/><text x="72.6847%" y="111.50"></text></g><g><title>perf`core::core_arch::aarch64::neon::generated::vtrn2q_f64 (2 samples, 0.08%)</title><rect x="72.4725%" y="101" width="0.0757%" height="15" fill="rgb(216,99,12)" fg:x="1914" fg:w="2"/><text x="72.7225%" y="111.50"></text></g><g><title>perf`core::core_arch::arm_shared::neon::generated::veorq_u32 (6 samples, 0.23%)</title><rect x="72.5483%" y="101" width="0.2272%" height="15" fill="rgb(226,22,26)" fg:x="1916" fg:w="6"/><text x="72.7983%" y="111.50"></text></g><g><title>perf`core::core_arch::arm_shared::neon::generated::vsubq_f32 (3 samples, 0.11%)</title><rect x="72.7755%" y="101" width="0.1136%" height="15" fill="rgb(217,163,10)" fg:x="1922" fg:w="3"/><text x="73.0255%" y="111.50"></text></g><g><title>perf`core::core_arch::arm_shared::neon::vaddq_f32 (4 samples, 0.15%)</title><rect x="72.8891%" y="101" width="0.1515%" height="15" fill="rgb(213,25,53)" fg:x="1925" fg:w="4"/><text x="73.1391%" y="111.50"></text></g><g><title>perf`rustfft::neon::neon_butterflies::NeonF32Butterfly8&lt;T&gt;::perform_fft_butterfly_multi (26 samples, 0.98%)</title><rect x="72.2832%" y="149" width="0.9845%" height="15" fill="rgb(252,105,26)" fg:x="1909" fg:w="26"/><text x="72.5332%" y="159.50"></text></g><g><title>perf`rustfft::array_utils::iter_chunks (26 samples, 0.98%)</title><rect x="72.2832%" y="133" width="0.9845%" height="15" fill="rgb(220,39,43)" fg:x="1909" fg:w="26"/><text x="72.5332%" y="143.50"></text></g><g><title>perf`rustfft::neon::neon_butterflies::NeonF32Butterfly8&lt;T&gt;::perform_fft_butterfly_multi::_{{closure}} (26 samples, 0.98%)</title><rect x="72.2832%" y="117" width="0.9845%" height="15" fill="rgb(229,68,48)" fg:x="1909" fg:w="26"/><text x="72.5332%" y="127.50"></text></g><g><title>perf`rustfft::neon::neon_butterflies::NeonF32Butterfly8&lt;T&gt;::perform_parallel_fft_butterfly (6 samples, 0.23%)</title><rect x="73.0405%" y="101" width="0.2272%" height="15" fill="rgb(252,8,32)" fg:x="1929" fg:w="6"/><text x="73.2905%" y="111.50"></text></g><g><title>perf`core::core_arch::aarch64::neon::vst1q_f32 (3 samples, 0.11%)</title><rect x="73.1541%" y="85" width="0.1136%" height="15" fill="rgb(223,20,43)" fg:x="1932" fg:w="3"/><text x="73.4041%" y="95.50"></text></g><g><title>perf`&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.08%)</title><rect x="73.7599%" y="133" width="0.0757%" height="15" fill="rgb(229,81,49)" fg:x="1948" fg:w="2"/><text x="74.0099%" y="143.50"></text></g><g><title>perf`&lt;core::slice::iter::ChunksExact&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.08%)</title><rect x="73.7599%" y="117" width="0.0757%" height="15" fill="rgb(236,28,36)" fg:x="1948" fg:w="2"/><text x="74.0099%" y="127.50"></text></g><g><title>perf`core::slice::_&lt;impl [T]&gt;::split_at_checked (2 samples, 0.08%)</title><rect x="73.7599%" y="101" width="0.0757%" height="15" fill="rgb(249,185,26)" fg:x="1948" fg:w="2"/><text x="74.0099%" y="111.50"></text></g><g><title>perf`&lt;rustfft::neon::neon_radix4::Neon32Radix4&lt;T&gt; as rustfft::Fft&lt;T&gt;&gt;::process_outofplace_with_scratch (55 samples, 2.08%)</title><rect x="71.9046%" y="213" width="2.0825%" height="15" fill="rgb(249,174,33)" fg:x="1899" fg:w="55"/><text x="72.1546%" y="223.50">p..</text></g><g><title>perf`rustfft::array_utils::iter_chunks_zipped (55 samples, 2.08%)</title><rect x="71.9046%" y="197" width="2.0825%" height="15" fill="rgb(233,201,37)" fg:x="1899" fg:w="55"/><text x="72.1546%" y="207.50">p..</text></g><g><title>perf`&lt;rustfft::neon::neon_radix4::Neon32Radix4&lt;T&gt; as rustfft::Fft&lt;T&gt;&gt;::process_outofplace_with_scratch::_{{closure}} (55 samples, 2.08%)</title><rect x="71.9046%" y="181" width="2.0825%" height="15" fill="rgb(221,78,26)" fg:x="1899" fg:w="55"/><text x="72.1546%" y="191.50">p..</text></g><g><title>perf`rustfft::neon::neon_radix4::Neon32Radix4&lt;T&gt;::perform_fft_out_of_place (55 samples, 2.08%)</title><rect x="71.9046%" y="165" width="2.0825%" height="15" fill="rgb(250,127,30)" fg:x="1899" fg:w="55"/><text x="72.1546%" y="175.50">p..</text></g><g><title>perf`rustfft::neon::neon_radix4::butterfly_4_32 (19 samples, 0.72%)</title><rect x="73.2677%" y="149" width="0.7194%" height="15" fill="rgb(230,49,44)" fg:x="1935" fg:w="19"/><text x="73.5177%" y="159.50"></text></g><g><title>perf`core::ptr::read_unaligned (4 samples, 0.15%)</title><rect x="73.8357%" y="133" width="0.1515%" height="15" fill="rgb(229,67,23)" fg:x="1950" fg:w="4"/><text x="74.0857%" y="143.50"></text></g><g><title>perf`core::slice::index::_&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.04%)</title><rect x="73.9871%" y="213" width="0.0379%" height="15" fill="rgb(249,83,47)" fg:x="1954" fg:w="1"/><text x="74.2371%" y="223.50"></text></g><g><title>perf`&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.04%)</title><rect x="73.9871%" y="197" width="0.0379%" height="15" fill="rgb(215,43,3)" fg:x="1954" fg:w="1"/><text x="74.2371%" y="207.50"></text></g><g><title>perf`&lt;realfft::RealToComplexEven&lt;T&gt; as realfft::RealToComplex&lt;T&gt;&gt;::process_with_scratch (103 samples, 3.90%)</title><rect x="70.2764%" y="229" width="3.9000%" height="15" fill="rgb(238,154,13)" fg:x="1856" fg:w="103"/><text x="70.5264%" y="239.50">perf..</text></g><g><title>perf`num_complex::Complex&lt;T&gt;::new (4 samples, 0.15%)</title><rect x="74.0250%" y="213" width="0.1515%" height="15" fill="rgb(219,56,2)" fg:x="1955" fg:w="4"/><text x="74.2750%" y="223.50"></text></g><g><title>perf`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (41 samples, 1.55%)</title><rect x="74.1764%" y="229" width="1.5524%" height="15" fill="rgb(233,0,4)" fg:x="1959" fg:w="41"/><text x="74.4264%" y="239.50"></text></g><g><title>perf`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (44 samples, 1.67%)</title><rect x="75.7289%" y="229" width="1.6660%" height="15" fill="rgb(235,30,7)" fg:x="2000" fg:w="44"/><text x="75.9789%" y="239.50"></text></g><g><title>perf`&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (162 samples, 6.13%)</title><rect x="78.5309%" y="213" width="6.1340%" height="15" fill="rgb(250,79,13)" fg:x="2074" fg:w="162"/><text x="78.7809%" y="223.50">perf`&lt;co..</text></g><g><title>perf`core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (277 samples, 10.49%)</title><rect x="77.3949%" y="229" width="10.4885%" height="15" fill="rgb(211,146,34)" fg:x="2044" fg:w="277"/><text x="77.6449%" y="239.50">perf`core::iter..</text></g><g><title>perf`&lt;usize as core::iter::range::Step&gt;::forward_unchecked (85 samples, 3.22%)</title><rect x="84.6649%" y="213" width="3.2185%" height="15" fill="rgb(228,22,38)" fg:x="2236" fg:w="85"/><text x="84.9149%" y="223.50">per..</text></g><g><title>perf`&lt;[T] as core::slice::specialize::SpecFill&lt;T&gt;&gt;::spec_fill (1 samples, 0.04%)</title><rect x="87.8834%" y="213" width="0.0379%" height="15" fill="rgb(235,168,5)" fg:x="2321" fg:w="1"/><text x="88.1334%" y="223.50"></text></g><g><title>perf`core::slice::_&lt;impl [T]&gt;::fill (6 samples, 0.23%)</title><rect x="87.8834%" y="229" width="0.2272%" height="15" fill="rgb(221,155,16)" fg:x="2321" fg:w="6"/><text x="88.1334%" y="239.50"></text></g><g><title>perf`&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.19%)</title><rect x="87.9212%" y="213" width="0.1893%" height="15" fill="rgb(215,215,53)" fg:x="2322" fg:w="5"/><text x="88.1712%" y="223.50"></text></g><g><title>perf`core::slice::_&lt;impl [T]&gt;::rotate_right (1 samples, 0.04%)</title><rect x="88.1106%" y="229" width="0.0379%" height="15" fill="rgb(223,4,10)" fg:x="2327" fg:w="1"/><text x="88.3606%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.04%)</title><rect x="88.1106%" y="213" width="0.0379%" height="15" fill="rgb(234,103,6)" fg:x="2327" fg:w="1"/><text x="88.3606%" y="223.50"></text></g><g><title>perf`num_complex::Complex&lt;T&gt;::new (138 samples, 5.23%)</title><rect x="88.1484%" y="229" width="5.2253%" height="15" fill="rgb(227,97,0)" fg:x="2328" fg:w="138"/><text x="88.3984%" y="239.50">perf`n..</text></g><g><title>perf`convrs::upconv::UPConv::process_block (2,485 samples, 94.09%)</title><rect x="1.8932%" y="245" width="94.0931%" height="15" fill="rgb(234,150,53)" fg:x="50" fg:w="2485"/><text x="2.1432%" y="255.50">perf`convrs::upconv::UPConv::process_block</text></g><g><title>perf`num_complex::opassign::_&lt;impl core::ops::arith::AddAssign for num_complex::Complex&lt;T&gt;&gt;::add_assign (69 samples, 2.61%)</title><rect x="93.3737%" y="229" width="2.6126%" height="15" fill="rgb(228,201,54)" fg:x="2466" fg:w="69"/><text x="93.6237%" y="239.50">pe..</text></g><g><title>perf`convrs::upconv::UPConv::update_filter (1 samples, 0.04%)</title><rect x="95.9864%" y="245" width="0.0379%" height="15" fill="rgb(222,22,37)" fg:x="2535" fg:w="1"/><text x="96.2364%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.04%)</title><rect x="95.9864%" y="229" width="0.0379%" height="15" fill="rgb(237,53,32)" fg:x="2535" fg:w="1"/><text x="96.2364%" y="239.50"></text></g><g><title>perf`&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.04%)</title><rect x="96.1378%" y="229" width="0.0379%" height="15" fill="rgb(233,25,53)" fg:x="2539" fg:w="1"/><text x="96.3878%" y="239.50"></text></g><g><title>perf`core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (5 samples, 0.19%)</title><rect x="96.0242%" y="245" width="0.1893%" height="15" fill="rgb(210,40,34)" fg:x="2536" fg:w="5"/><text x="96.2742%" y="255.50"></text></g><g><title>perf`&lt;usize as core::iter::range::Step&gt;::forward_unchecked (1 samples, 0.04%)</title><rect x="96.1757%" y="229" width="0.0379%" height="15" fill="rgb(241,220,44)" fg:x="2540" fg:w="1"/><text x="96.4257%" y="239.50"></text></g><g><title>perf`&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="96.3271%" y="149" width="0.0379%" height="15" fill="rgb(235,28,35)" fg:x="2544" fg:w="1"/><text x="96.5771%" y="159.50"></text></g><g><title>perf`&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="96.3271%" y="133" width="0.0379%" height="15" fill="rgb(210,56,17)" fg:x="2544" fg:w="1"/><text x="96.5771%" y="143.50"></text></g><g><title>perf`core::iter::adapters::flatten::and_then_or_clear (1 samples, 0.04%)</title><rect x="96.3271%" y="117" width="0.0379%" height="15" fill="rgb(224,130,29)" fg:x="2544" fg:w="1"/><text x="96.5771%" y="127.50"></text></g><g><title>perf`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="96.3271%" y="101" width="0.0379%" height="15" fill="rgb(235,212,8)" fg:x="2544" fg:w="1"/><text x="96.5771%" y="111.50"></text></g><g><title>perf`&lt;i16 as hound::Sample&gt;::read (1 samples, 0.04%)</title><rect x="96.4786%" y="117" width="0.0379%" height="15" fill="rgb(223,33,50)" fg:x="2548" fg:w="1"/><text x="96.7286%" y="127.50"></text></g><g><title>perf`&lt;hound::SampleFormat as core::cmp::PartialEq&gt;::eq (3 samples, 0.11%)</title><rect x="96.8194%" y="85" width="0.1136%" height="15" fill="rgb(219,149,13)" fg:x="2557" fg:w="3"/><text x="97.0694%" y="95.50"></text></g><g><title>perf`core::cmp::min_by (5 samples, 0.19%)</title><rect x="97.1223%" y="69" width="0.1893%" height="15" fill="rgb(250,156,29)" fg:x="2565" fg:w="5"/><text x="97.3723%" y="79.50"></text></g><g><title>perf`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (1 samples, 0.04%)</title><rect x="97.2738%" y="53" width="0.0379%" height="15" fill="rgb(216,193,19)" fg:x="2569" fg:w="1"/><text x="97.5238%" y="63.50"></text></g><g><title>perf`std::io::buffered::bufreader::buffer::Buffer::fill_buf (6 samples, 0.23%)</title><rect x="97.3116%" y="69" width="0.2272%" height="15" fill="rgb(216,135,14)" fg:x="2570" fg:w="6"/><text x="97.5616%" y="79.50"></text></g><g><title>perf`&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (4 samples, 0.15%)</title><rect x="97.6524%" y="53" width="0.1515%" height="15" fill="rgb(241,47,5)" fg:x="2579" fg:w="4"/><text x="97.9024%" y="63.50"></text></g><g><title>perf`DYLD-STUB$$memcpy (1 samples, 0.04%)</title><rect x="97.8039%" y="53" width="0.0379%" height="15" fill="rgb(233,42,35)" fg:x="2583" fg:w="1"/><text x="98.0539%" y="63.50"></text></g><g><title>perf`core::cmp::min_by (3 samples, 0.11%)</title><rect x="97.8417%" y="53" width="0.1136%" height="15" fill="rgb(231,13,6)" fg:x="2584" fg:w="3"/><text x="98.0917%" y="63.50"></text></g><g><title>perf`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (1 samples, 0.04%)</title><rect x="97.9175%" y="37" width="0.0379%" height="15" fill="rgb(207,181,40)" fg:x="2586" fg:w="1"/><text x="98.1675%" y="47.50"></text></g><g><title>perf`core::slice::_&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.04%)</title><rect x="97.9553%" y="53" width="0.0379%" height="15" fill="rgb(254,173,49)" fg:x="2587" fg:w="1"/><text x="98.2053%" y="63.50"></text></g><g><title>perf`core::slice::_&lt;impl [T]&gt;::split_at (1 samples, 0.04%)</title><rect x="97.9932%" y="53" width="0.0379%" height="15" fill="rgb(221,1,38)" fg:x="2588" fg:w="1"/><text x="98.2432%" y="63.50"></text></g><g><title>perf`&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (35 samples, 1.33%)</title><rect x="96.9330%" y="85" width="1.3253%" height="15" fill="rgb(206,124,46)" fg:x="2560" fg:w="35"/><text x="97.1830%" y="95.50"></text></g><g><title>perf`std::io::impls::_&lt;impl std::io::Read for &amp;[u8]&gt;::read (19 samples, 0.72%)</title><rect x="97.5388%" y="69" width="0.7194%" height="15" fill="rgb(249,21,11)" fg:x="2576" fg:w="19"/><text x="97.7888%" y="79.50"></text></g><g><title>perf`core::slice::_&lt;impl [T]&gt;::split_at_checked (6 samples, 0.23%)</title><rect x="98.0310%" y="53" width="0.2272%" height="15" fill="rgb(222,201,40)" fg:x="2589" fg:w="6"/><text x="98.2810%" y="63.50"></text></g><g><title>perf`core::result::Result&lt;T,E&gt;::map (1 samples, 0.04%)</title><rect x="98.2582%" y="85" width="0.0379%" height="15" fill="rgb(235,61,29)" fg:x="2595" fg:w="1"/><text x="98.5082%" y="95.50"></text></g><g><title>perf`&lt;i16 as hound::Sample&gt;::read (61 samples, 2.31%)</title><rect x="96.5543%" y="101" width="2.3097%" height="15" fill="rgb(219,207,3)" fg:x="2550" fg:w="61"/><text x="96.8043%" y="111.50">p..</text></g><g><title>perf`core::slice::index::_&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (15 samples, 0.57%)</title><rect x="98.2961%" y="85" width="0.5680%" height="15" fill="rgb(222,56,46)" fg:x="2596" fg:w="15"/><text x="98.5461%" y="95.50"></text></g><g><title>perf`&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (11 samples, 0.42%)</title><rect x="98.4476%" y="69" width="0.4165%" height="15" fill="rgb(239,76,54)" fg:x="2600" fg:w="11"/><text x="98.6976%" y="79.50"></text></g><g><title>perf`&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (3 samples, 0.11%)</title><rect x="98.8641%" y="85" width="0.1136%" height="15" fill="rgb(231,124,27)" fg:x="2611" fg:w="3"/><text x="99.1141%" y="95.50"></text></g><g><title>perf`std::io::impls::_&lt;impl std::io::Read for &amp;[u8]&gt;::read (1 samples, 0.04%)</title><rect x="98.9398%" y="69" width="0.0379%" height="15" fill="rgb(249,195,6)" fg:x="2613" fg:w="1"/><text x="99.1898%" y="79.50"></text></g><g><title>perf`core::slice::_&lt;impl [T]&gt;::split_at (1 samples, 0.04%)</title><rect x="98.9398%" y="53" width="0.0379%" height="15" fill="rgb(237,174,47)" fg:x="2613" fg:w="1"/><text x="99.1898%" y="63.50"></text></g><g><title>perf`&lt;hound::read::WavSamples&lt;R,S&gt; as core::iter::traits::iterator::Iterator&gt;::next (67 samples, 2.54%)</title><rect x="96.4786%" y="133" width="2.5369%" height="15" fill="rgb(206,201,31)" fg:x="2548" fg:w="67"/><text x="96.7286%" y="143.50">pe..</text></g><g><title>perf`hound::read::iter_next (66 samples, 2.50%)</title><rect x="96.5165%" y="117" width="2.4991%" height="15" fill="rgb(231,57,52)" fg:x="2549" fg:w="66"/><text x="96.7665%" y="127.50">pe..</text></g><g><title>perf`&lt;i32 as hound::Sample&gt;::read (4 samples, 0.15%)</title><rect x="98.8641%" y="101" width="0.1515%" height="15" fill="rgb(248,177,22)" fg:x="2611" fg:w="4"/><text x="99.1141%" y="111.50"></text></g><g><title>perf`core::slice::index::_&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.04%)</title><rect x="98.9777%" y="85" width="0.0379%" height="15" fill="rgb(215,211,37)" fg:x="2614" fg:w="1"/><text x="99.2277%" y="95.50"></text></g><g><title>perf`&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.04%)</title><rect x="98.9777%" y="69" width="0.0379%" height="15" fill="rgb(241,128,51)" fg:x="2614" fg:w="1"/><text x="99.2277%" y="79.50"></text></g><g><title>perf`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (71 samples, 2.69%)</title><rect x="96.3650%" y="149" width="2.6884%" height="15" fill="rgb(227,165,31)" fg:x="2545" fg:w="71"/><text x="96.6150%" y="159.50">pe..</text></g><g><title>perf`perf::main::_{{closure}} (1 samples, 0.04%)</title><rect x="99.0155%" y="133" width="0.0379%" height="15" fill="rgb(228,167,24)" fg:x="2615" fg:w="1"/><text x="99.2655%" y="143.50"></text></g><g><title>perf`core::iter::traits::iterator::Iterator::collect (76 samples, 2.88%)</title><rect x="96.2136%" y="245" width="2.8777%" height="15" fill="rgb(228,143,12)" fg:x="2541" fg:w="76"/><text x="96.4636%" y="255.50">pe..</text></g><g><title>perf`&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (76 samples, 2.88%)</title><rect x="96.2136%" y="229" width="2.8777%" height="15" fill="rgb(249,149,8)" fg:x="2541" fg:w="76"/><text x="96.4636%" y="239.50">pe..</text></g><g><title>perf`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (76 samples, 2.88%)</title><rect x="96.2136%" y="213" width="2.8777%" height="15" fill="rgb(243,35,44)" fg:x="2541" fg:w="76"/><text x="96.4636%" y="223.50">pe..</text></g><g><title>perf`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (76 samples, 2.88%)</title><rect x="96.2136%" y="197" width="2.8777%" height="15" fill="rgb(246,89,9)" fg:x="2541" fg:w="76"/><text x="96.4636%" y="207.50">pe..</text></g><g><title>perf`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (76 samples, 2.88%)</title><rect x="96.2136%" y="181" width="2.8777%" height="15" fill="rgb(233,213,13)" fg:x="2541" fg:w="76"/><text x="96.4636%" y="191.50">pe..</text></g><g><title>perf`alloc::vec::Vec&lt;T,A&gt;::extend_desugared (76 samples, 2.88%)</title><rect x="96.2136%" y="165" width="2.8777%" height="15" fill="rgb(233,141,41)" fg:x="2541" fg:w="76"/><text x="96.4636%" y="175.50">pe..</text></g><g><title>perf`&lt;hound::read::WavSamples&lt;R,S&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="99.0534%" y="149" width="0.0379%" height="15" fill="rgb(239,167,4)" fg:x="2616" fg:w="1"/><text x="99.3034%" y="159.50"></text></g><g><title>perf`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;f32&gt;&gt; (1 samples, 0.04%)</title><rect x="99.0913%" y="245" width="0.0379%" height="15" fill="rgb(209,217,16)" fg:x="2617" fg:w="1"/><text x="99.3413%" y="255.50"></text></g><g><title>perf`core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;f32&gt;&gt; (1 samples, 0.04%)</title><rect x="99.0913%" y="229" width="0.0379%" height="15" fill="rgb(219,88,35)" fg:x="2617" fg:w="1"/><text x="99.3413%" y="239.50"></text></g><g><title>perf`&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="99.0913%" y="213" width="0.0379%" height="15" fill="rgb(220,193,23)" fg:x="2617" fg:w="1"/><text x="99.3413%" y="223.50"></text></g><g><title>perf`&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.04%)</title><rect x="99.0913%" y="197" width="0.0379%" height="15" fill="rgb(230,90,52)" fg:x="2617" fg:w="1"/><text x="99.3413%" y="207.50"></text></g><g><title>perf`__rust_dealloc (1 samples, 0.04%)</title><rect x="99.0913%" y="181" width="0.0379%" height="15" fill="rgb(252,106,19)" fg:x="2617" fg:w="1"/><text x="99.3413%" y="191.50"></text></g><g><title>perf`&lt;assert_no_alloc::AllocDisabler as core::alloc::global::GlobalAlloc&gt;::dealloc (1 samples, 0.04%)</title><rect x="99.0913%" y="165" width="0.0379%" height="15" fill="rgb(206,74,20)" fg:x="2617" fg:w="1"/><text x="99.3413%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.04%)</title><rect x="99.0913%" y="149" width="0.0379%" height="15" fill="rgb(230,138,44)" fg:x="2617" fg:w="1"/><text x="99.3413%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.04%)</title><rect x="99.2427%" y="213" width="0.0379%" height="15" fill="rgb(235,182,43)" fg:x="2621" fg:w="1"/><text x="99.4927%" y="223.50"></text></g><g><title>perf`hound::write::WavWriter&lt;W&gt;::write_sample (5 samples, 0.19%)</title><rect x="99.1291%" y="245" width="0.1893%" height="15" fill="rgb(242,16,51)" fg:x="2618" fg:w="5"/><text x="99.3791%" y="255.50"></text></g><g><title>perf`&lt;f32 as hound::Sample&gt;::write_padded (4 samples, 0.15%)</title><rect x="99.1670%" y="229" width="0.1515%" height="15" fill="rgb(248,9,4)" fg:x="2619" fg:w="4"/><text x="99.4170%" y="239.50"></text></g><g><title>perf`&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (1 samples, 0.04%)</title><rect x="99.2806%" y="213" width="0.0379%" height="15" fill="rgb(210,31,22)" fg:x="2622" fg:w="1"/><text x="99.5306%" y="223.50"></text></g><g><title>perf`std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (1 samples, 0.04%)</title><rect x="99.2806%" y="197" width="0.0379%" height="15" fill="rgb(239,54,39)" fg:x="2622" fg:w="1"/><text x="99.5306%" y="207.50"></text></g><g><title>perf`std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (1 samples, 0.04%)</title><rect x="99.2806%" y="181" width="0.0379%" height="15" fill="rgb(230,99,41)" fg:x="2622" fg:w="1"/><text x="99.5306%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`write (1 samples, 0.04%)</title><rect x="99.2806%" y="165" width="0.0379%" height="15" fill="rgb(253,106,12)" fg:x="2622" fg:w="1"/><text x="99.5306%" y="175.50"></text></g><g><title>all (2,641 samples, 100%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(213,46,41)" fg:x="0" fg:w="2641"/><text x="0.2500%" y="399.50"></text></g><g><title>dyld`start (2,641 samples, 100.00%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(215,133,35)" fg:x="0" fg:w="2641"/><text x="0.2500%" y="383.50">dyld`start</text></g><g><title>perf`main (2,641 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(213,28,5)" fg:x="0" fg:w="2641"/><text x="0.2500%" y="367.50">perf`main</text></g><g><title>perf`std::rt::lang_start (2,641 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(215,77,49)" fg:x="0" fg:w="2641"/><text x="0.2500%" y="351.50">perf`std::rt::lang_start</text></g><g><title>perf`std::rt::lang_start_internal (2,641 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(248,100,22)" fg:x="0" fg:w="2641"/><text x="0.2500%" y="335.50">perf`std::rt::lang_start_internal</text></g><g><title>perf`std::rt::lang_start::_{{closure}} (2,641 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(208,67,9)" fg:x="0" fg:w="2641"/><text x="0.2500%" y="319.50">perf`std::rt::lang_start::_{{closure}}</text></g><g><title>perf`std::sys_common::backtrace::__rust_begin_short_backtrace (2,641 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(219,133,21)" fg:x="0" fg:w="2641"/><text x="0.2500%" y="303.50">perf`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>perf`core::ops::function::FnOnce::call_once (2,641 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(246,46,29)" fg:x="0" fg:w="2641"/><text x="0.2500%" y="287.50">perf`core::ops::function::FnOnce::call_once</text></g><g><title>perf`perf::main (2,641 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(246,185,52)" fg:x="0" fg:w="2641"/><text x="0.2500%" y="271.50">perf`perf::main</text></g><g><title>perf`num_complex::opassign::_&lt;impl core::ops::arith::AddAssign for num_complex::Complex&lt;T&gt;&gt;::add_assign (18 samples, 0.68%)</title><rect x="99.3184%" y="245" width="0.6816%" height="15" fill="rgb(252,136,11)" fg:x="2623" fg:w="18"/><text x="99.5684%" y="255.50"></text></g></svg></svg>