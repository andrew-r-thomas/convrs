<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="518" onload="init(evt)" viewBox="0 0 1200 518" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="518" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="501.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="501.00"> </text><svg id="frames" x="10" width="1180" total_samples="58806"><g><title>perf`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (95 samples, 0.16%)</title><rect x="0.0000%" y="341" width="0.1615%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="95"/><text x="0.2500%" y="351.50"></text></g><g><title>perf`hound::write::WavWriter&lt;W&gt;::write_sample (34 samples, 0.06%)</title><rect x="0.1632%" y="341" width="0.0578%" height="15" fill="rgb(217,0,24)" fg:x="96" fg:w="34"/><text x="0.4132%" y="351.50"></text></g><g><title>perf`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (140 samples, 0.24%)</title><rect x="2.0015%" y="325" width="0.2381%" height="15" fill="rgb(221,193,54)" fg:x="1177" fg:w="140"/><text x="2.2515%" y="335.50"></text></g><g><title>perf`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (893 samples, 1.52%)</title><rect x="2.5150%" y="309" width="1.5186%" height="15" fill="rgb(248,212,6)" fg:x="1479" fg:w="893"/><text x="2.7650%" y="319.50"></text></g><g><title>perf`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,733 samples, 2.95%)</title><rect x="2.2396%" y="325" width="2.9470%" height="15" fill="rgb(208,68,35)" fg:x="1317" fg:w="1733"/><text x="2.4896%" y="335.50">pe..</text></g><g><title>perf`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (678 samples, 1.15%)</title><rect x="4.0336%" y="309" width="1.1529%" height="15" fill="rgb(232,128,0)" fg:x="2372" fg:w="678"/><text x="4.2836%" y="319.50"></text></g><g><title>perf`alloc::vec::Vec&lt;T,A&gt;::push (7 samples, 0.01%)</title><rect x="5.1899%" y="325" width="0.0119%" height="15" fill="rgb(207,160,47)" fg:x="3052" fg:w="7"/><text x="5.4399%" y="335.50"></text></g><g><title>perf`&lt;rustfft::neon::neon_radix4::Neon32Radix4&lt;T&gt; as rustfft::Fft&lt;T&gt;&gt;::process_outofplace_with_scratch (31 samples, 0.05%)</title><rect x="5.2155%" y="277" width="0.0527%" height="15" fill="rgb(228,23,34)" fg:x="3067" fg:w="31"/><text x="5.4655%" y="287.50"></text></g><g><title>perf`rustfft::array_utils::iter_chunks_zipped (31 samples, 0.05%)</title><rect x="5.2155%" y="261" width="0.0527%" height="15" fill="rgb(218,30,26)" fg:x="3067" fg:w="31"/><text x="5.4655%" y="271.50"></text></g><g><title>perf`&lt;rustfft::neon::neon_radix4::Neon32Radix4&lt;T&gt; as rustfft::Fft&lt;T&gt;&gt;::process_outofplace_with_scratch::_{{closure}} (31 samples, 0.05%)</title><rect x="5.2155%" y="245" width="0.0527%" height="15" fill="rgb(220,122,19)" fg:x="3067" fg:w="31"/><text x="5.4655%" y="255.50"></text></g><g><title>perf`rustfft::neon::neon_radix4::Neon32Radix4&lt;T&gt;::perform_fft_out_of_place (31 samples, 0.05%)</title><rect x="5.2155%" y="229" width="0.0527%" height="15" fill="rgb(250,228,42)" fg:x="3067" fg:w="31"/><text x="5.4655%" y="239.50"></text></g><g><title>perf`rustfft::neon::neon_radix4::butterfly_4_32 (16 samples, 0.03%)</title><rect x="5.2410%" y="213" width="0.0272%" height="15" fill="rgb(240,193,28)" fg:x="3082" fg:w="16"/><text x="5.4910%" y="223.50"></text></g><g><title>perf`&lt;realfft::RealToComplexEven&lt;T&gt; as realfft::RealToComplex&lt;T&gt;&gt;::process_with_scratch (39 samples, 0.07%)</title><rect x="5.2053%" y="293" width="0.0663%" height="15" fill="rgb(216,20,37)" fg:x="3061" fg:w="39"/><text x="5.4553%" y="303.50"></text></g><g><title>perf`convrs::conv::Conv::new (47 samples, 0.08%)</title><rect x="5.2019%" y="325" width="0.0799%" height="15" fill="rgb(206,188,39)" fg:x="3059" fg:w="47"/><text x="5.4519%" y="335.50"></text></g><g><title>perf`convrs::upconv::UPConv::new (46 samples, 0.08%)</title><rect x="5.2036%" y="309" width="0.0782%" height="15" fill="rgb(217,207,13)" fg:x="3060" fg:w="46"/><text x="5.4536%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3,027 samples, 5.15%)</title><rect x="5.2903%" y="309" width="5.1474%" height="15" fill="rgb(231,73,38)" fg:x="3111" fg:w="3027"/><text x="5.5403%" y="319.50">libsys..</text></g><g><title>perf`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (98 samples, 0.17%)</title><rect x="10.4734%" y="293" width="0.1666%" height="15" fill="rgb(225,20,46)" fg:x="6159" fg:w="98"/><text x="10.7234%" y="303.50"></text></g><g><title>perf`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (45 samples, 0.08%)</title><rect x="10.5635%" y="277" width="0.0765%" height="15" fill="rgb(210,31,41)" fg:x="6212" fg:w="45"/><text x="10.8135%" y="287.50"></text></g><g><title>perf`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (30 samples, 0.05%)</title><rect x="10.6401%" y="293" width="0.0510%" height="15" fill="rgb(221,200,47)" fg:x="6257" fg:w="30"/><text x="10.8901%" y="303.50"></text></g><g><title>perf`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (17 samples, 0.03%)</title><rect x="10.6622%" y="277" width="0.0289%" height="15" fill="rgb(226,26,5)" fg:x="6270" fg:w="17"/><text x="10.9122%" y="287.50"></text></g><g><title>perf`&lt;f32 as core::ops::arith::Add&gt;::add (9 samples, 0.02%)</title><rect x="10.6962%" y="293" width="0.0153%" height="15" fill="rgb(249,33,26)" fg:x="6290" fg:w="9"/><text x="10.9462%" y="303.50"></text></g><g><title>perf`&lt;f32 as core::ops::arith::AddAssign&gt;::add_assign (17 samples, 0.03%)</title><rect x="10.7115%" y="293" width="0.0289%" height="15" fill="rgb(235,183,28)" fg:x="6299" fg:w="17"/><text x="10.9615%" y="303.50"></text></g><g><title>perf`&lt;f32 as core::ops::arith::Mul&gt;::mul (37 samples, 0.06%)</title><rect x="10.7404%" y="293" width="0.0629%" height="15" fill="rgb(221,5,38)" fg:x="6316" fg:w="37"/><text x="10.9904%" y="303.50"></text></g><g><title>perf`&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Mul&gt;::mul (50 samples, 0.09%)</title><rect x="10.8067%" y="293" width="0.0850%" height="15" fill="rgb(247,18,42)" fg:x="6355" fg:w="50"/><text x="11.0567%" y="303.50"></text></g><g><title>perf`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (10 samples, 0.02%)</title><rect x="10.8934%" y="245" width="0.0170%" height="15" fill="rgb(241,131,45)" fg:x="6406" fg:w="10"/><text x="11.1434%" y="255.50"></text></g><g><title>perf`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.01%)</title><rect x="10.9002%" y="229" width="0.0102%" height="15" fill="rgb(249,31,29)" fg:x="6410" fg:w="6"/><text x="11.1502%" y="239.50"></text></g><g><title>perf`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.02%)</title><rect x="10.8934%" y="261" width="0.0204%" height="15" fill="rgb(225,111,53)" fg:x="6406" fg:w="12"/><text x="11.1434%" y="271.50"></text></g><g><title>perf`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.02%)</title><rect x="10.8934%" y="277" width="0.0221%" height="15" fill="rgb(238,160,17)" fg:x="6406" fg:w="13"/><text x="11.1434%" y="287.50"></text></g><g><title>perf`rustfft::algorithm::radix4::bitreversed_transpose (6 samples, 0.01%)</title><rect x="10.9292%" y="213" width="0.0102%" height="15" fill="rgb(214,148,48)" fg:x="6427" fg:w="6"/><text x="11.1792%" y="223.50"></text></g><g><title>perf`rustfft::neon::neon_butterflies::NeonF32Butterfly8&lt;T&gt;::perform_fft_butterfly_multi (17 samples, 0.03%)</title><rect x="10.9394%" y="213" width="0.0289%" height="15" fill="rgb(232,36,49)" fg:x="6433" fg:w="17"/><text x="11.1894%" y="223.50"></text></g><g><title>perf`rustfft::array_utils::iter_chunks (17 samples, 0.03%)</title><rect x="10.9394%" y="197" width="0.0289%" height="15" fill="rgb(209,103,24)" fg:x="6433" fg:w="17"/><text x="11.1894%" y="207.50"></text></g><g><title>perf`rustfft::neon::neon_butterflies::NeonF32Butterfly8&lt;T&gt;::perform_fft_butterfly_multi::_{{closure}} (17 samples, 0.03%)</title><rect x="10.9394%" y="181" width="0.0289%" height="15" fill="rgb(229,88,8)" fg:x="6433" fg:w="17"/><text x="11.1894%" y="191.50"></text></g><g><title>perf`&lt;rustfft::neon::neon_radix4::Neon32Radix4&lt;T&gt; as rustfft::Fft&lt;T&gt;&gt;::process_outofplace_with_scratch (41 samples, 0.07%)</title><rect x="10.9292%" y="277" width="0.0697%" height="15" fill="rgb(213,181,19)" fg:x="6427" fg:w="41"/><text x="11.1792%" y="287.50"></text></g><g><title>perf`rustfft::array_utils::iter_chunks_zipped (41 samples, 0.07%)</title><rect x="10.9292%" y="261" width="0.0697%" height="15" fill="rgb(254,191,54)" fg:x="6427" fg:w="41"/><text x="11.1792%" y="271.50"></text></g><g><title>perf`&lt;rustfft::neon::neon_radix4::Neon32Radix4&lt;T&gt; as rustfft::Fft&lt;T&gt;&gt;::process_outofplace_with_scratch::_{{closure}} (41 samples, 0.07%)</title><rect x="10.9292%" y="245" width="0.0697%" height="15" fill="rgb(241,83,37)" fg:x="6427" fg:w="41"/><text x="11.1792%" y="255.50"></text></g><g><title>perf`rustfft::neon::neon_radix4::Neon32Radix4&lt;T&gt;::perform_fft_out_of_place (41 samples, 0.07%)</title><rect x="10.9292%" y="229" width="0.0697%" height="15" fill="rgb(233,36,39)" fg:x="6427" fg:w="41"/><text x="11.1792%" y="239.50"></text></g><g><title>perf`rustfft::neon::neon_radix4::butterfly_4_32 (18 samples, 0.03%)</title><rect x="10.9683%" y="213" width="0.0306%" height="15" fill="rgb(226,3,54)" fg:x="6450" fg:w="18"/><text x="11.2183%" y="223.50"></text></g><g><title>perf`&lt;realfft::ComplexToRealEven&lt;T&gt; as realfft::ComplexToReal&lt;T&gt;&gt;::process_with_scratch (65 samples, 0.11%)</title><rect x="10.8917%" y="293" width="0.1105%" height="15" fill="rgb(245,192,40)" fg:x="6405" fg:w="65"/><text x="11.1417%" y="303.50"></text></g><g><title>perf`rustfft::algorithm::radix4::bitreversed_transpose (6 samples, 0.01%)</title><rect x="11.0295%" y="213" width="0.0102%" height="15" fill="rgb(238,167,29)" fg:x="6486" fg:w="6"/><text x="11.2795%" y="223.50"></text></g><g><title>perf`rustfft::neon::neon_butterflies::NeonF32Butterfly8&lt;T&gt;::perform_fft_butterfly_multi (12 samples, 0.02%)</title><rect x="11.0397%" y="213" width="0.0204%" height="15" fill="rgb(232,182,51)" fg:x="6492" fg:w="12"/><text x="11.2897%" y="223.50"></text></g><g><title>perf`rustfft::array_utils::iter_chunks (12 samples, 0.02%)</title><rect x="11.0397%" y="197" width="0.0204%" height="15" fill="rgb(231,60,39)" fg:x="6492" fg:w="12"/><text x="11.2897%" y="207.50"></text></g><g><title>perf`rustfft::neon::neon_butterflies::NeonF32Butterfly8&lt;T&gt;::perform_fft_butterfly_multi::_{{closure}} (12 samples, 0.02%)</title><rect x="11.0397%" y="181" width="0.0204%" height="15" fill="rgb(208,69,12)" fg:x="6492" fg:w="12"/><text x="11.2897%" y="191.50"></text></g><g><title>perf`&lt;rustfft::neon::neon_radix4::Neon32Radix4&lt;T&gt; as rustfft::Fft&lt;T&gt;&gt;::process_outofplace_with_scratch (29 samples, 0.05%)</title><rect x="11.0244%" y="277" width="0.0493%" height="15" fill="rgb(235,93,37)" fg:x="6483" fg:w="29"/><text x="11.2744%" y="287.50"></text></g><g><title>perf`rustfft::array_utils::iter_chunks_zipped (29 samples, 0.05%)</title><rect x="11.0244%" y="261" width="0.0493%" height="15" fill="rgb(213,116,39)" fg:x="6483" fg:w="29"/><text x="11.2744%" y="271.50"></text></g><g><title>perf`&lt;rustfft::neon::neon_radix4::Neon32Radix4&lt;T&gt; as rustfft::Fft&lt;T&gt;&gt;::process_outofplace_with_scratch::_{{closure}} (29 samples, 0.05%)</title><rect x="11.0244%" y="245" width="0.0493%" height="15" fill="rgb(222,207,29)" fg:x="6483" fg:w="29"/><text x="11.2744%" y="255.50"></text></g><g><title>perf`rustfft::neon::neon_radix4::Neon32Radix4&lt;T&gt;::perform_fft_out_of_place (29 samples, 0.05%)</title><rect x="11.0244%" y="229" width="0.0493%" height="15" fill="rgb(206,96,30)" fg:x="6483" fg:w="29"/><text x="11.2744%" y="239.50"></text></g><g><title>perf`rustfft::neon::neon_radix4::butterfly_4_32 (8 samples, 0.01%)</title><rect x="11.0601%" y="213" width="0.0136%" height="15" fill="rgb(218,138,4)" fg:x="6504" fg:w="8"/><text x="11.3101%" y="223.50"></text></g><g><title>perf`&lt;realfft::RealToComplexEven&lt;T&gt; as realfft::RealToComplex&lt;T&gt;&gt;::process_with_scratch (45 samples, 0.08%)</title><rect x="11.0023%" y="293" width="0.0765%" height="15" fill="rgb(250,191,14)" fg:x="6470" fg:w="45"/><text x="11.2523%" y="303.50"></text></g><g><title>perf`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (9 samples, 0.02%)</title><rect x="11.0805%" y="293" width="0.0153%" height="15" fill="rgb(239,60,40)" fg:x="6516" fg:w="9"/><text x="11.3305%" y="303.50"></text></g><g><title>perf`&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (12 samples, 0.02%)</title><rect x="11.0992%" y="277" width="0.0204%" height="15" fill="rgb(206,27,48)" fg:x="6527" fg:w="12"/><text x="11.3492%" y="287.50"></text></g><g><title>perf`core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (21 samples, 0.04%)</title><rect x="11.0975%" y="293" width="0.0357%" height="15" fill="rgb(225,35,8)" fg:x="6526" fg:w="21"/><text x="11.3475%" y="303.50"></text></g><g><title>perf`&lt;usize as core::iter::range::Step&gt;::forward_unchecked (8 samples, 0.01%)</title><rect x="11.1196%" y="277" width="0.0136%" height="15" fill="rgb(250,213,24)" fg:x="6539" fg:w="8"/><text x="11.3696%" y="287.50"></text></g><g><title>perf`core::slice::_&lt;impl [T]&gt;::fill (7 samples, 0.01%)</title><rect x="11.1349%" y="293" width="0.0119%" height="15" fill="rgb(247,123,22)" fg:x="6548" fg:w="7"/><text x="11.3849%" y="303.50"></text></g><g><title>perf`&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.01%)</title><rect x="11.1349%" y="277" width="0.0119%" height="15" fill="rgb(231,138,38)" fg:x="6548" fg:w="7"/><text x="11.3849%" y="287.50"></text></g><g><title>perf`num_complex::Complex&lt;T&gt;::new (13 samples, 0.02%)</title><rect x="11.1519%" y="293" width="0.0221%" height="15" fill="rgb(231,145,46)" fg:x="6558" fg:w="13"/><text x="11.4019%" y="303.50"></text></g><g><title>perf`convrs::upconv::UPConv::process_block (435 samples, 0.74%)</title><rect x="10.4547%" y="309" width="0.7397%" height="15" fill="rgb(251,118,11)" fg:x="6148" fg:w="435"/><text x="10.7047%" y="319.50"></text></g><g><title>perf`num_complex::opassign::_&lt;impl core::ops::arith::AddAssign for num_complex::Complex&lt;T&gt;&gt;::add_assign (12 samples, 0.02%)</title><rect x="11.1740%" y="293" width="0.0204%" height="15" fill="rgb(217,147,25)" fg:x="6571" fg:w="12"/><text x="11.4240%" y="303.50"></text></g><g><title>perf`convrs::conv::Conv::process_block (3,492 samples, 5.94%)</title><rect x="5.2818%" y="325" width="5.9382%" height="15" fill="rgb(247,81,37)" fg:x="3106" fg:w="3492"/><text x="5.5318%" y="335.50">perf`con..</text></g><g><title>perf`rtrb::chunks::_&lt;impl rtrb::Producer&lt;T&gt;&gt;::write_chunk (7 samples, 0.01%)</title><rect x="11.2080%" y="309" width="0.0119%" height="15" fill="rgb(209,12,38)" fg:x="6591" fg:w="7"/><text x="11.4580%" y="319.50"></text></g><g><title>perf`core::result::Result&lt;T,E&gt;::map (7 samples, 0.01%)</title><rect x="11.2080%" y="293" width="0.0119%" height="15" fill="rgb(227,1,9)" fg:x="6591" fg:w="7"/><text x="11.4580%" y="303.50"></text></g><g><title>perf`core::ops::function::FnOnce::call_once (7 samples, 0.01%)</title><rect x="11.2080%" y="277" width="0.0119%" height="15" fill="rgb(248,47,43)" fg:x="6591" fg:w="7"/><text x="11.4580%" y="287.50"></text></g><g><title>perf`&lt;rtrb::chunks::WriteChunk&lt;T&gt; as core::convert::From&lt;rtrb::chunks::WriteChunkUninit&lt;T&gt;&gt;&gt;::from (7 samples, 0.01%)</title><rect x="11.2080%" y="261" width="0.0119%" height="15" fill="rgb(221,10,30)" fg:x="6591" fg:w="7"/><text x="11.4580%" y="271.50"></text></g><g><title>perf`&lt;[T] as core::slice::specialize::SpecFill&lt;T&gt;&gt;::spec_fill (51 samples, 0.09%)</title><rect x="11.2284%" y="293" width="0.0867%" height="15" fill="rgb(210,229,1)" fg:x="6603" fg:w="51"/><text x="11.4784%" y="303.50"></text></g><g><title>perf`core::slice::_&lt;impl [T]&gt;::fill (273 samples, 0.46%)</title><rect x="11.2284%" y="309" width="0.4642%" height="15" fill="rgb(222,148,37)" fg:x="6603" fg:w="273"/><text x="11.4784%" y="319.50"></text></g><g><title>perf`&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (222 samples, 0.38%)</title><rect x="11.3152%" y="293" width="0.3775%" height="15" fill="rgb(234,67,33)" fg:x="6654" fg:w="222"/><text x="11.5652%" y="303.50"></text></g><g><title>perf`&lt;num_complex::Complex&lt;T&gt; as core::default::Default&gt;::default (64 samples, 0.11%)</title><rect x="11.6944%" y="261" width="0.1088%" height="15" fill="rgb(247,98,35)" fg:x="6877" fg:w="64"/><text x="11.9444%" y="271.50"></text></g><g><title>perf`&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (115 samples, 0.20%)</title><rect x="11.9069%" y="229" width="0.1956%" height="15" fill="rgb(247,138,52)" fg:x="7002" fg:w="115"/><text x="12.1569%" y="239.50"></text></g><g><title>perf`&lt;rtrb::chunks::WriteChunk&lt;T&gt; as core::convert::From&lt;rtrb::chunks::WriteChunkUninit&lt;T&gt;&gt;&gt;::from (232 samples, 0.39%)</title><rect x="11.8032%" y="261" width="0.3945%" height="15" fill="rgb(213,79,30)" fg:x="6941" fg:w="232"/><text x="12.0532%" y="271.50"></text></g><g><title>perf`core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (182 samples, 0.31%)</title><rect x="11.8882%" y="245" width="0.3095%" height="15" fill="rgb(246,177,23)" fg:x="6991" fg:w="182"/><text x="12.1382%" y="255.50"></text></g><g><title>perf`&lt;usize as core::iter::range::Step&gt;::forward_unchecked (56 samples, 0.10%)</title><rect x="12.1025%" y="229" width="0.0952%" height="15" fill="rgb(230,62,27)" fg:x="7117" fg:w="56"/><text x="12.3525%" y="239.50"></text></g><g><title>perf`convrs::conv::Conv::update_filter (593 samples, 1.01%)</title><rect x="11.2199%" y="325" width="1.0084%" height="15" fill="rgb(216,154,8)" fg:x="6598" fg:w="593"/><text x="11.4699%" y="335.50"></text></g><g><title>perf`rtrb::chunks::_&lt;impl rtrb::Producer&lt;T&gt;&gt;::write_chunk (314 samples, 0.53%)</title><rect x="11.6944%" y="309" width="0.5340%" height="15" fill="rgb(244,35,45)" fg:x="6877" fg:w="314"/><text x="11.9444%" y="319.50"></text></g><g><title>perf`core::result::Result&lt;T,E&gt;::map (314 samples, 0.53%)</title><rect x="11.6944%" y="293" width="0.5340%" height="15" fill="rgb(251,115,12)" fg:x="6877" fg:w="314"/><text x="11.9444%" y="303.50"></text></g><g><title>perf`core::ops::function::FnOnce::call_once (314 samples, 0.53%)</title><rect x="11.6944%" y="277" width="0.5340%" height="15" fill="rgb(240,54,50)" fg:x="6877" fg:w="314"/><text x="11.9444%" y="287.50"></text></g><g><title>perf`core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (18 samples, 0.03%)</title><rect x="12.1977%" y="261" width="0.0306%" height="15" fill="rgb(233,84,52)" fg:x="7173" fg:w="18"/><text x="12.4477%" y="271.50"></text></g><g><title>perf`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.02%)</title><rect x="12.2453%" y="277" width="0.0170%" height="15" fill="rgb(207,117,47)" fg:x="7201" fg:w="10"/><text x="12.4953%" y="287.50"></text></g><g><title>perf`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.02%)</title><rect x="12.2470%" y="261" width="0.0153%" height="15" fill="rgb(249,43,39)" fg:x="7202" fg:w="9"/><text x="12.4970%" y="271.50"></text></g><g><title>perf`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (9 samples, 0.02%)</title><rect x="12.2470%" y="245" width="0.0153%" height="15" fill="rgb(209,38,44)" fg:x="7202" fg:w="9"/><text x="12.4970%" y="255.50"></text></g><g><title>perf`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.01%)</title><rect x="12.2505%" y="229" width="0.0119%" height="15" fill="rgb(236,212,23)" fg:x="7204" fg:w="7"/><text x="12.5005%" y="239.50"></text></g><g><title>perf`&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Mul&lt;T&gt;&gt;::mul (7 samples, 0.01%)</title><rect x="12.2709%" y="277" width="0.0119%" height="15" fill="rgb(242,79,21)" fg:x="7216" fg:w="7"/><text x="12.5209%" y="287.50"></text></g><g><title>perf`rustfft::neon::neon_butterflies::NeonF32Butterfly8&lt;T&gt;::perform_fft_butterfly_multi (14 samples, 0.02%)</title><rect x="12.3253%" y="213" width="0.0238%" height="15" fill="rgb(211,96,35)" fg:x="7248" fg:w="14"/><text x="12.5753%" y="223.50"></text></g><g><title>perf`rustfft::array_utils::iter_chunks (14 samples, 0.02%)</title><rect x="12.3253%" y="197" width="0.0238%" height="15" fill="rgb(253,215,40)" fg:x="7248" fg:w="14"/><text x="12.5753%" y="207.50"></text></g><g><title>perf`rustfft::neon::neon_butterflies::NeonF32Butterfly8&lt;T&gt;::perform_fft_butterfly_multi::_{{closure}} (14 samples, 0.02%)</title><rect x="12.3253%" y="181" width="0.0238%" height="15" fill="rgb(211,81,21)" fg:x="7248" fg:w="14"/><text x="12.5753%" y="191.50"></text></g><g><title>perf`&lt;rustfft::neon::neon_radix4::Neon32Radix4&lt;T&gt; as rustfft::Fft&lt;T&gt;&gt;::process_outofplace_with_scratch (63 samples, 0.11%)</title><rect x="12.2845%" y="277" width="0.1071%" height="15" fill="rgb(208,190,38)" fg:x="7224" fg:w="63"/><text x="12.5345%" y="287.50"></text></g><g><title>perf`rustfft::array_utils::iter_chunks_zipped (63 samples, 0.11%)</title><rect x="12.2845%" y="261" width="0.1071%" height="15" fill="rgb(235,213,38)" fg:x="7224" fg:w="63"/><text x="12.5345%" y="271.50"></text></g><g><title>perf`&lt;rustfft::neon::neon_radix4::Neon32Radix4&lt;T&gt; as rustfft::Fft&lt;T&gt;&gt;::process_outofplace_with_scratch::_{{closure}} (63 samples, 0.11%)</title><rect x="12.2845%" y="245" width="0.1071%" height="15" fill="rgb(237,122,38)" fg:x="7224" fg:w="63"/><text x="12.5345%" y="255.50"></text></g><g><title>perf`rustfft::neon::neon_radix4::Neon32Radix4&lt;T&gt;::perform_fft_out_of_place (63 samples, 0.11%)</title><rect x="12.2845%" y="229" width="0.1071%" height="15" fill="rgb(244,218,35)" fg:x="7224" fg:w="63"/><text x="12.5345%" y="239.50"></text></g><g><title>perf`rustfft::neon::neon_radix4::butterfly_4_32 (25 samples, 0.04%)</title><rect x="12.3491%" y="213" width="0.0425%" height="15" fill="rgb(240,68,47)" fg:x="7262" fg:w="25"/><text x="12.5991%" y="223.50"></text></g><g><title>perf`&lt;realfft::RealToComplexEven&lt;T&gt; as realfft::RealToComplex&lt;T&gt;&gt;::process (94 samples, 0.16%)</title><rect x="12.2334%" y="309" width="0.1598%" height="15" fill="rgb(210,16,53)" fg:x="7194" fg:w="94"/><text x="12.4834%" y="319.50"></text></g><g><title>perf`&lt;realfft::RealToComplexEven&lt;T&gt; as realfft::RealToComplex&lt;T&gt;&gt;::process_with_scratch (92 samples, 0.16%)</title><rect x="12.2368%" y="293" width="0.1564%" height="15" fill="rgb(235,124,12)" fg:x="7196" fg:w="92"/><text x="12.4868%" y="303.50"></text></g><g><title>perf`convrs::helpers::process_filter (101 samples, 0.17%)</title><rect x="12.2283%" y="325" width="0.1718%" height="15" fill="rgb(224,169,11)" fg:x="7191" fg:w="101"/><text x="12.4783%" y="335.50"></text></g><g><title>perf`std::io::buffered::bufreader::buffer::Buffer::fill_buf (8 samples, 0.01%)</title><rect x="12.4494%" y="149" width="0.0136%" height="15" fill="rgb(250,166,2)" fg:x="7321" fg:w="8"/><text x="12.6994%" y="159.50"></text></g><g><title>perf`core::cmp::min_by (8 samples, 0.01%)</title><rect x="12.4715%" y="133" width="0.0136%" height="15" fill="rgb(242,216,29)" fg:x="7334" fg:w="8"/><text x="12.7215%" y="143.50"></text></g><g><title>perf`&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (36 samples, 0.06%)</title><rect x="12.4409%" y="165" width="0.0612%" height="15" fill="rgb(230,116,27)" fg:x="7316" fg:w="36"/><text x="12.6909%" y="175.50"></text></g><g><title>perf`std::io::impls::_&lt;impl std::io::Read for &amp;[u8]&gt;::read (23 samples, 0.04%)</title><rect x="12.4630%" y="149" width="0.0391%" height="15" fill="rgb(228,99,48)" fg:x="7329" fg:w="23"/><text x="12.7130%" y="159.50"></text></g><g><title>perf`core::slice::_&lt;impl [T]&gt;::split_at_checked (8 samples, 0.01%)</title><rect x="12.4885%" y="133" width="0.0136%" height="15" fill="rgb(253,11,6)" fg:x="7344" fg:w="8"/><text x="12.7385%" y="143.50"></text></g><g><title>perf`&lt;i16 as hound::Sample&gt;::read (59 samples, 0.10%)</title><rect x="12.4256%" y="181" width="0.1003%" height="15" fill="rgb(247,143,39)" fg:x="7307" fg:w="59"/><text x="12.6756%" y="191.50"></text></g><g><title>perf`core::slice::index::_&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (12 samples, 0.02%)</title><rect x="12.5055%" y="165" width="0.0204%" height="15" fill="rgb(236,97,10)" fg:x="7354" fg:w="12"/><text x="12.7555%" y="175.50"></text></g><g><title>perf`&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (8 samples, 0.01%)</title><rect x="12.5123%" y="149" width="0.0136%" height="15" fill="rgb(233,208,19)" fg:x="7358" fg:w="8"/><text x="12.7623%" y="159.50"></text></g><g><title>perf`core::cmp::min_by (6 samples, 0.01%)</title><rect x="12.5497%" y="149" width="0.0102%" height="15" fill="rgb(216,164,2)" fg:x="7380" fg:w="6"/><text x="12.7997%" y="159.50"></text></g><g><title>perf`std::io::buffered::bufreader::buffer::Buffer::fill_buf (6 samples, 0.01%)</title><rect x="12.5599%" y="149" width="0.0102%" height="15" fill="rgb(220,129,5)" fg:x="7386" fg:w="6"/><text x="12.8099%" y="159.50"></text></g><g><title>perf`&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (33 samples, 0.06%)</title><rect x="12.5412%" y="165" width="0.0561%" height="15" fill="rgb(242,17,10)" fg:x="7375" fg:w="33"/><text x="12.7912%" y="175.50"></text></g><g><title>perf`std::io::impls::_&lt;impl std::io::Read for &amp;[u8]&gt;::read (16 samples, 0.03%)</title><rect x="12.5701%" y="149" width="0.0272%" height="15" fill="rgb(242,107,0)" fg:x="7392" fg:w="16"/><text x="12.8201%" y="159.50"></text></g><g><title>perf`core::slice::_&lt;impl [T]&gt;::split_at_checked (7 samples, 0.01%)</title><rect x="12.5855%" y="133" width="0.0119%" height="15" fill="rgb(251,28,31)" fg:x="7401" fg:w="7"/><text x="12.8355%" y="143.50"></text></g><g><title>perf`&lt;i32 as hound::Sample&gt;::read (46 samples, 0.08%)</title><rect x="12.5259%" y="181" width="0.0782%" height="15" fill="rgb(233,223,10)" fg:x="7366" fg:w="46"/><text x="12.7759%" y="191.50"></text></g><g><title>perf`&lt;hound::read::WavSamples&lt;R,S&gt; as core::iter::traits::iterator::Iterator&gt;::next (111 samples, 0.19%)</title><rect x="12.4188%" y="213" width="0.1888%" height="15" fill="rgb(215,21,27)" fg:x="7303" fg:w="111"/><text x="12.6688%" y="223.50"></text></g><g><title>perf`hound::read::iter_next (111 samples, 0.19%)</title><rect x="12.4188%" y="197" width="0.1888%" height="15" fill="rgb(232,23,21)" fg:x="7303" fg:w="111"/><text x="12.6688%" y="207.50"></text></g><g><title>perf`core::iter::traits::iterator::Iterator::collect (122 samples, 0.21%)</title><rect x="12.4035%" y="325" width="0.2075%" height="15" fill="rgb(244,5,23)" fg:x="7294" fg:w="122"/><text x="12.6535%" y="335.50"></text></g><g><title>perf`&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (122 samples, 0.21%)</title><rect x="12.4035%" y="309" width="0.2075%" height="15" fill="rgb(226,81,46)" fg:x="7294" fg:w="122"/><text x="12.6535%" y="319.50"></text></g><g><title>perf`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (122 samples, 0.21%)</title><rect x="12.4035%" y="293" width="0.2075%" height="15" fill="rgb(247,70,30)" fg:x="7294" fg:w="122"/><text x="12.6535%" y="303.50"></text></g><g><title>perf`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (122 samples, 0.21%)</title><rect x="12.4035%" y="277" width="0.2075%" height="15" fill="rgb(212,68,19)" fg:x="7294" fg:w="122"/><text x="12.6535%" y="287.50"></text></g><g><title>perf`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (122 samples, 0.21%)</title><rect x="12.4035%" y="261" width="0.2075%" height="15" fill="rgb(240,187,13)" fg:x="7294" fg:w="122"/><text x="12.6535%" y="271.50"></text></g><g><title>perf`alloc::vec::Vec&lt;T,A&gt;::extend_desugared (122 samples, 0.21%)</title><rect x="12.4035%" y="245" width="0.2075%" height="15" fill="rgb(223,113,26)" fg:x="7294" fg:w="122"/><text x="12.6535%" y="255.50"></text></g><g><title>perf`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (117 samples, 0.20%)</title><rect x="12.4120%" y="229" width="0.1990%" height="15" fill="rgb(206,192,2)" fg:x="7299" fg:w="117"/><text x="12.6620%" y="239.50"></text></g><g><title>perf`&lt;hound::write::WavWriter&lt;W&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.01%)</title><rect x="12.6110%" y="309" width="0.0136%" height="15" fill="rgb(241,108,4)" fg:x="7416" fg:w="8"/><text x="12.8610%" y="319.50"></text></g><g><title>perf`hound::write::WavWriter&lt;W&gt;::update_header (8 samples, 0.01%)</title><rect x="12.6110%" y="293" width="0.0136%" height="15" fill="rgb(247,173,49)" fg:x="7416" fg:w="8"/><text x="12.8610%" y="303.50"></text></g><g><title>perf`core::panicking::panic_nounwind (8 samples, 0.01%)</title><rect x="12.6110%" y="277" width="0.0136%" height="15" fill="rgb(224,114,35)" fg:x="7416" fg:w="8"/><text x="12.8610%" y="287.50"></text></g><g><title>perf`core::panicking::panic_nounwind_fmt (8 samples, 0.01%)</title><rect x="12.6110%" y="261" width="0.0136%" height="15" fill="rgb(245,159,27)" fg:x="7416" fg:w="8"/><text x="12.8610%" y="271.50"></text></g><g><title>perf`&lt;std::panicking::begin_panic_handler::FormatStringPayload as core::panic::PanicPayload&gt;::take_box (8 samples, 0.01%)</title><rect x="12.6110%" y="245" width="0.0136%" height="15" fill="rgb(245,172,44)" fg:x="7416" fg:w="8"/><text x="12.8610%" y="255.50"></text></g><g><title>perf`std::sys_common::backtrace::output_filename (8 samples, 0.01%)</title><rect x="12.6110%" y="229" width="0.0136%" height="15" fill="rgb(236,23,11)" fg:x="7416" fg:w="8"/><text x="12.8610%" y="239.50"></text></g><g><title>perf`std::panicking::begin_panic_handler::_{{closure}} (8 samples, 0.01%)</title><rect x="12.6110%" y="213" width="0.0136%" height="15" fill="rgb(205,117,38)" fg:x="7416" fg:w="8"/><text x="12.8610%" y="223.50"></text></g><g><title>perf`std::panicking::rust_panic_with_hook (8 samples, 0.01%)</title><rect x="12.6110%" y="197" width="0.0136%" height="15" fill="rgb(237,72,25)" fg:x="7416" fg:w="8"/><text x="12.8610%" y="207.50"></text></g><g><title>perf`std::panicking::default_hook (8 samples, 0.01%)</title><rect x="12.6110%" y="181" width="0.0136%" height="15" fill="rgb(244,70,9)" fg:x="7416" fg:w="8"/><text x="12.8610%" y="191.50"></text></g><g><title>perf`std::panicking::default_hook::_{{closure}} (8 samples, 0.01%)</title><rect x="12.6110%" y="165" width="0.0136%" height="15" fill="rgb(217,125,39)" fg:x="7416" fg:w="8"/><text x="12.8610%" y="175.50"></text></g><g><title>perf`std::sys_common::backtrace::print (8 samples, 0.01%)</title><rect x="12.6110%" y="149" width="0.0136%" height="15" fill="rgb(235,36,10)" fg:x="7416" fg:w="8"/><text x="12.8610%" y="159.50"></text></g><g><title>perf`std::io::Write::write_fmt (8 samples, 0.01%)</title><rect x="12.6110%" y="133" width="0.0136%" height="15" fill="rgb(251,123,47)" fg:x="7416" fg:w="8"/><text x="12.8610%" y="143.50"></text></g><g><title>perf`core::fmt::write (8 samples, 0.01%)</title><rect x="12.6110%" y="117" width="0.0136%" height="15" fill="rgb(221,13,13)" fg:x="7416" fg:w="8"/><text x="12.8610%" y="127.50"></text></g><g><title>perf`&lt;std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display&gt;::fmt (8 samples, 0.01%)</title><rect x="12.6110%" y="101" width="0.0136%" height="15" fill="rgb(238,131,9)" fg:x="7416" fg:w="8"/><text x="12.8610%" y="111.50"></text></g><g><title>libunwind.dylib`_Unwind_Backtrace (8 samples, 0.01%)</title><rect x="12.6110%" y="85" width="0.0136%" height="15" fill="rgb(211,50,8)" fg:x="7416" fg:w="8"/><text x="12.8610%" y="95.50"></text></g><g><title>perf`std::backtrace_rs::backtrace::libunwind::trace::trace_fn (8 samples, 0.01%)</title><rect x="12.6110%" y="69" width="0.0136%" height="15" fill="rgb(245,182,24)" fg:x="7416" fg:w="8"/><text x="12.8610%" y="79.50"></text></g><g><title>perf`std::sys_common::backtrace::_print_fmt::_{{closure}} (8 samples, 0.01%)</title><rect x="12.6110%" y="53" width="0.0136%" height="15" fill="rgb(242,14,37)" fg:x="7416" fg:w="8"/><text x="12.8610%" y="63.50"></text></g><g><title>perf`std::backtrace_rs::symbolize::gimli::resolve (8 samples, 0.01%)</title><rect x="12.6110%" y="37" width="0.0136%" height="15" fill="rgb(246,228,12)" fg:x="7416" fg:w="8"/><text x="12.8610%" y="47.50"></text></g><g><title>perf`core::ptr::drop_in_place&lt;hound::write::WavWriter&lt;std::io::buffered::bufwriter::BufWriter&lt;std::fs::File&gt;&gt;&gt; (9 samples, 0.02%)</title><rect x="12.6110%" y="325" width="0.0153%" height="15" fill="rgb(213,55,15)" fg:x="7416" fg:w="9"/><text x="12.8610%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1,720 samples, 2.92%)</title><rect x="20.1765%" y="293" width="2.9249%" height="15" fill="rgb(209,9,3)" fg:x="11865" fg:w="1720"/><text x="20.4265%" y="303.50">li..</text></g><g><title>perf`std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (6 samples, 0.01%)</title><rect x="28.8253%" y="261" width="0.0102%" height="15" fill="rgb(230,59,30)" fg:x="16951" fg:w="6"/><text x="29.0753%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`write (1,467 samples, 2.49%)</title><rect x="28.8372%" y="245" width="2.4946%" height="15" fill="rgb(209,121,21)" fg:x="16958" fg:w="1467"/><text x="29.0872%" y="255.50">li..</text></g><g><title>perf`&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (4,843 samples, 8.24%)</title><rect x="23.1014%" y="293" width="8.2356%" height="15" fill="rgb(220,109,13)" fg:x="13585" fg:w="4843"/><text x="23.3514%" y="303.50">perf`&lt;std::..</text></g><g><title>perf`std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (1,490 samples, 2.53%)</title><rect x="28.8032%" y="277" width="2.5338%" height="15" fill="rgb(232,18,1)" fg:x="16938" fg:w="1490"/><text x="29.0532%" y="287.50">pe..</text></g><g><title>perf`std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (1,470 samples, 2.50%)</title><rect x="28.8372%" y="261" width="2.4997%" height="15" fill="rgb(215,41,42)" fg:x="16958" fg:w="1470"/><text x="29.0872%" y="271.50">pe..</text></g><g><title>perf`&lt;f32 as hound::Sample&gt;::write_padded (10,149 samples, 17.26%)</title><rect x="15.6056%" y="309" width="17.2584%" height="15" fill="rgb(224,123,36)" fg:x="9177" fg:w="10149"/><text x="15.8556%" y="319.50">perf`&lt;f32 as hound::Sample&gt;..</text></g><g><title>perf`DYLD-STUB$$memcpy (898 samples, 1.53%)</title><rect x="31.3369%" y="293" width="1.5271%" height="15" fill="rgb(240,125,3)" fg:x="18428" fg:w="898"/><text x="31.5869%" y="303.50"></text></g><g><title>perf`hound::write::WavWriter&lt;W&gt;::write_sample (12,257 samples, 20.84%)</title><rect x="12.6280%" y="325" width="20.8431%" height="15" fill="rgb(205,98,50)" fg:x="7426" fg:w="12257"/><text x="12.8780%" y="335.50">perf`hound::write::WavWriter&lt;W&gt;::..</text></g><g><title>perf`&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (357 samples, 0.61%)</title><rect x="32.8640%" y="309" width="0.6071%" height="15" fill="rgb(205,185,37)" fg:x="19326" fg:w="357"/><text x="33.1140%" y="319.50"></text></g><g><title>dyld`start (19,687 samples, 33.48%)</title><rect x="0.0000%" y="453" width="33.4779%" height="15" fill="rgb(238,207,15)" fg:x="0" fg:w="19687"/><text x="0.2500%" y="463.50">dyld`start</text></g><g><title>perf`main (19,687 samples, 33.48%)</title><rect x="0.0000%" y="437" width="33.4779%" height="15" fill="rgb(213,199,42)" fg:x="0" fg:w="19687"/><text x="0.2500%" y="447.50">perf`main</text></g><g><title>perf`std::rt::lang_start (19,687 samples, 33.48%)</title><rect x="0.0000%" y="421" width="33.4779%" height="15" fill="rgb(235,201,11)" fg:x="0" fg:w="19687"/><text x="0.2500%" y="431.50">perf`std::rt::lang_start</text></g><g><title>perf`std::rt::lang_start_internal (19,687 samples, 33.48%)</title><rect x="0.0000%" y="405" width="33.4779%" height="15" fill="rgb(207,46,11)" fg:x="0" fg:w="19687"/><text x="0.2500%" y="415.50">perf`std::rt::lang_start_internal</text></g><g><title>perf`std::rt::lang_start::_{{closure}} (19,687 samples, 33.48%)</title><rect x="0.0000%" y="389" width="33.4779%" height="15" fill="rgb(241,35,35)" fg:x="0" fg:w="19687"/><text x="0.2500%" y="399.50">perf`std::rt::lang_start::_{{closure}}</text></g><g><title>perf`std::sys_common::backtrace::__rust_begin_short_backtrace (19,687 samples, 33.48%)</title><rect x="0.0000%" y="373" width="33.4779%" height="15" fill="rgb(243,32,47)" fg:x="0" fg:w="19687"/><text x="0.2500%" y="383.50">perf`std::sys_common::backtrace::__rust_begin_short_ba..</text></g><g><title>perf`core::ops::function::FnOnce::call_once (19,687 samples, 33.48%)</title><rect x="0.0000%" y="357" width="33.4779%" height="15" fill="rgb(247,202,23)" fg:x="0" fg:w="19687"/><text x="0.2500%" y="367.50">perf`core::ops::function::FnOnce::call_once</text></g><g><title>perf`perf::main (19,557 samples, 33.26%)</title><rect x="0.2211%" y="341" width="33.2568%" height="15" fill="rgb(219,102,11)" fg:x="130" fg:w="19557"/><text x="0.4711%" y="351.50">perf`perf::main</text></g><g><title>perf`alloc::slice::_&lt;impl [T]&gt;::concat (54 samples, 0.09%)</title><rect x="42.3460%" y="261" width="0.0918%" height="15" fill="rgb(243,110,44)" fg:x="24902" fg:w="54"/><text x="42.5960%" y="271.50"></text></g><g><title>perf`&lt;[V] as alloc::slice::Concat&lt;T&gt;&gt;::concat (54 samples, 0.09%)</title><rect x="42.3460%" y="245" width="0.0918%" height="15" fill="rgb(222,74,54)" fg:x="24902" fg:w="54"/><text x="42.5960%" y="255.50"></text></g><g><title>perf`alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (54 samples, 0.09%)</title><rect x="42.3460%" y="229" width="0.0918%" height="15" fill="rgb(216,99,12)" fg:x="24902" fg:w="54"/><text x="42.5960%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (54 samples, 0.09%)</title><rect x="42.3460%" y="213" width="0.0918%" height="15" fill="rgb(226,22,26)" fg:x="24902" fg:w="54"/><text x="42.5960%" y="223.50"></text></g><g><title>perf`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (207 samples, 0.35%)</title><rect x="42.4838%" y="245" width="0.3520%" height="15" fill="rgb(217,163,10)" fg:x="24983" fg:w="207"/><text x="42.7338%" y="255.50"></text></g><g><title>perf`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (86 samples, 0.15%)</title><rect x="42.6895%" y="229" width="0.1462%" height="15" fill="rgb(213,25,53)" fg:x="25104" fg:w="86"/><text x="42.9395%" y="239.50"></text></g><g><title>perf`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (103 samples, 0.18%)</title><rect x="42.8358%" y="245" width="0.1752%" height="15" fill="rgb(252,105,26)" fg:x="25190" fg:w="103"/><text x="43.0858%" y="255.50"></text></g><g><title>perf`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (58 samples, 0.10%)</title><rect x="42.9123%" y="229" width="0.0986%" height="15" fill="rgb(220,39,43)" fg:x="25235" fg:w="58"/><text x="43.1623%" y="239.50"></text></g><g><title>perf`&lt;f32 as core::ops::arith::Add&gt;::add (18 samples, 0.03%)</title><rect x="43.0177%" y="245" width="0.0306%" height="15" fill="rgb(229,68,48)" fg:x="25297" fg:w="18"/><text x="43.2677%" y="255.50"></text></g><g><title>perf`&lt;f32 as core::ops::arith::AddAssign&gt;::add_assign (49 samples, 0.08%)</title><rect x="43.0483%" y="245" width="0.0833%" height="15" fill="rgb(252,8,32)" fg:x="25315" fg:w="49"/><text x="43.2983%" y="255.50"></text></g><g><title>perf`&lt;f32 as core::ops::arith::Mul&gt;::mul (82 samples, 0.14%)</title><rect x="43.1317%" y="245" width="0.1394%" height="15" fill="rgb(223,20,43)" fg:x="25364" fg:w="82"/><text x="43.3817%" y="255.50"></text></g><g><title>perf`&lt;f32 as core::ops::arith::Sub&gt;::sub (36 samples, 0.06%)</title><rect x="43.2711%" y="245" width="0.0612%" height="15" fill="rgb(229,81,49)" fg:x="25446" fg:w="36"/><text x="43.5211%" y="255.50"></text></g><g><title>perf`&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Mul&gt;::mul (155 samples, 0.26%)</title><rect x="43.3323%" y="245" width="0.2636%" height="15" fill="rgb(236,28,36)" fg:x="25482" fg:w="155"/><text x="43.5823%" y="255.50"></text></g><g><title>perf`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (6 samples, 0.01%)</title><rect x="43.6163%" y="165" width="0.0102%" height="15" fill="rgb(249,185,26)" fg:x="25649" fg:w="6"/><text x="43.8663%" y="175.50"></text></g><g><title>perf`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (12 samples, 0.02%)</title><rect x="43.6129%" y="197" width="0.0204%" height="15" fill="rgb(249,174,33)" fg:x="25647" fg:w="12"/><text x="43.8629%" y="207.50"></text></g><g><title>perf`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.02%)</title><rect x="43.6163%" y="181" width="0.0170%" height="15" fill="rgb(233,201,37)" fg:x="25649" fg:w="10"/><text x="43.8663%" y="191.50"></text></g><g><title>perf`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.03%)</title><rect x="43.6129%" y="213" width="0.0289%" height="15" fill="rgb(221,78,26)" fg:x="25647" fg:w="17"/><text x="43.8629%" y="223.50"></text></g><g><title>perf`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.03%)</title><rect x="43.6129%" y="229" width="0.0323%" height="15" fill="rgb(250,127,30)" fg:x="25647" fg:w="19"/><text x="43.8629%" y="239.50"></text></g><g><title>perf`&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Mul&lt;T&gt;&gt;::mul (7 samples, 0.01%)</title><rect x="43.6588%" y="229" width="0.0119%" height="15" fill="rgb(230,49,44)" fg:x="25674" fg:w="7"/><text x="43.9088%" y="239.50"></text></g><g><title>perf`rustfft::algorithm::radix4::bitreversed_transpose (11 samples, 0.02%)</title><rect x="43.7098%" y="165" width="0.0187%" height="15" fill="rgb(229,67,23)" fg:x="25704" fg:w="11"/><text x="43.9598%" y="175.50"></text></g><g><title>perf`rustfft::neon::neon_butterflies::NeonF32Butterfly16&lt;T&gt;::perform_fft_butterfly_multi (19 samples, 0.03%)</title><rect x="43.7285%" y="165" width="0.0323%" height="15" fill="rgb(249,83,47)" fg:x="25715" fg:w="19"/><text x="43.9785%" y="175.50"></text></g><g><title>perf`rustfft::array_utils::iter_chunks (19 samples, 0.03%)</title><rect x="43.7285%" y="149" width="0.0323%" height="15" fill="rgb(215,43,3)" fg:x="25715" fg:w="19"/><text x="43.9785%" y="159.50"></text></g><g><title>perf`rustfft::neon::neon_butterflies::NeonF32Butterfly16&lt;T&gt;::perform_fft_butterfly_multi::_{{closure}} (18 samples, 0.03%)</title><rect x="43.7302%" y="133" width="0.0306%" height="15" fill="rgb(238,154,13)" fg:x="25716" fg:w="18"/><text x="43.9802%" y="143.50"></text></g><g><title>perf`rustfft::neon::neon_butterflies::NeonF32Butterfly8&lt;T&gt;::perform_fft_butterfly_multi (21 samples, 0.04%)</title><rect x="43.7608%" y="165" width="0.0357%" height="15" fill="rgb(219,56,2)" fg:x="25734" fg:w="21"/><text x="44.0108%" y="175.50"></text></g><g><title>perf`rustfft::array_utils::iter_chunks (21 samples, 0.04%)</title><rect x="43.7608%" y="149" width="0.0357%" height="15" fill="rgb(233,0,4)" fg:x="25734" fg:w="21"/><text x="44.0108%" y="159.50"></text></g><g><title>perf`rustfft::neon::neon_butterflies::NeonF32Butterfly8&lt;T&gt;::perform_fft_butterfly_multi::_{{closure}} (20 samples, 0.03%)</title><rect x="43.7625%" y="133" width="0.0340%" height="15" fill="rgb(235,30,7)" fg:x="25735" fg:w="20"/><text x="44.0125%" y="143.50"></text></g><g><title>perf`&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.01%)</title><rect x="43.8663%" y="149" width="0.0119%" height="15" fill="rgb(250,79,13)" fg:x="25796" fg:w="7"/><text x="44.1163%" y="159.50"></text></g><g><title>perf`core::core_arch::aarch64::neon::vst1q_f32 (6 samples, 0.01%)</title><rect x="43.8799%" y="149" width="0.0102%" height="15" fill="rgb(211,146,34)" fg:x="25804" fg:w="6"/><text x="44.1299%" y="159.50"></text></g><g><title>perf`&lt;rustfft::neon::neon_radix4::Neon32Radix4&lt;T&gt; as rustfft::Fft&lt;T&gt;&gt;::process_outofplace_with_scratch (132 samples, 0.22%)</title><rect x="43.6741%" y="229" width="0.2245%" height="15" fill="rgb(228,22,38)" fg:x="25683" fg:w="132"/><text x="43.9241%" y="239.50"></text></g><g><title>perf`rustfft::array_utils::iter_chunks_zipped (132 samples, 0.22%)</title><rect x="43.6741%" y="213" width="0.2245%" height="15" fill="rgb(235,168,5)" fg:x="25683" fg:w="132"/><text x="43.9241%" y="223.50"></text></g><g><title>perf`&lt;rustfft::neon::neon_radix4::Neon32Radix4&lt;T&gt; as rustfft::Fft&lt;T&gt;&gt;::process_outofplace_with_scratch::_{{closure}} (132 samples, 0.22%)</title><rect x="43.6741%" y="197" width="0.2245%" height="15" fill="rgb(221,155,16)" fg:x="25683" fg:w="132"/><text x="43.9241%" y="207.50"></text></g><g><title>perf`rustfft::neon::neon_radix4::Neon32Radix4&lt;T&gt;::perform_fft_out_of_place (132 samples, 0.22%)</title><rect x="43.6741%" y="181" width="0.2245%" height="15" fill="rgb(215,215,53)" fg:x="25683" fg:w="132"/><text x="43.9241%" y="191.50"></text></g><g><title>perf`rustfft::neon::neon_radix4::butterfly_4_32 (60 samples, 0.10%)</title><rect x="43.7966%" y="165" width="0.1020%" height="15" fill="rgb(223,4,10)" fg:x="25755" fg:w="60"/><text x="44.0466%" y="175.50"></text></g><g><title>perf`&lt;realfft::ComplexToRealEven&lt;T&gt; as realfft::ComplexToReal&lt;T&gt;&gt;::process_with_scratch (184 samples, 0.31%)</title><rect x="43.5959%" y="245" width="0.3129%" height="15" fill="rgb(234,103,6)" fg:x="25637" fg:w="184"/><text x="43.8459%" y="255.50"></text></g><g><title>perf`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (6 samples, 0.01%)</title><rect x="43.9190%" y="197" width="0.0102%" height="15" fill="rgb(227,97,0)" fg:x="25827" fg:w="6"/><text x="44.1690%" y="207.50"></text></g><g><title>perf`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.01%)</title><rect x="43.9190%" y="213" width="0.0136%" height="15" fill="rgb(234,150,53)" fg:x="25827" fg:w="8"/><text x="44.1690%" y="223.50"></text></g><g><title>perf`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.02%)</title><rect x="43.9173%" y="229" width="0.0170%" height="15" fill="rgb(228,201,54)" fg:x="25826" fg:w="10"/><text x="44.1673%" y="239.50"></text></g><g><title>perf`rustfft::algorithm::radix4::bitreversed_transpose (6 samples, 0.01%)</title><rect x="43.9785%" y="165" width="0.0102%" height="15" fill="rgb(222,22,37)" fg:x="25862" fg:w="6"/><text x="44.2285%" y="175.50"></text></g><g><title>perf`rustfft::neon::neon_butterflies::NeonF32Butterfly16&lt;T&gt;::perform_fft_butterfly_multi (22 samples, 0.04%)</title><rect x="43.9887%" y="165" width="0.0374%" height="15" fill="rgb(237,53,32)" fg:x="25868" fg:w="22"/><text x="44.2387%" y="175.50"></text></g><g><title>perf`rustfft::array_utils::iter_chunks (22 samples, 0.04%)</title><rect x="43.9887%" y="149" width="0.0374%" height="15" fill="rgb(233,25,53)" fg:x="25868" fg:w="22"/><text x="44.2387%" y="159.50"></text></g><g><title>perf`rustfft::neon::neon_butterflies::NeonF32Butterfly16&lt;T&gt;::perform_fft_butterfly_multi::_{{closure}} (22 samples, 0.04%)</title><rect x="43.9887%" y="133" width="0.0374%" height="15" fill="rgb(210,40,34)" fg:x="25868" fg:w="22"/><text x="44.2387%" y="143.50"></text></g><g><title>perf`rustfft::neon::neon_butterflies::NeonF32Butterfly16&lt;T&gt;::perform_parallel_fft_butterfly (10 samples, 0.02%)</title><rect x="44.0091%" y="117" width="0.0170%" height="15" fill="rgb(241,220,44)" fg:x="25880" fg:w="10"/><text x="44.2591%" y="127.50"></text></g><g><title>perf`rustfft::neon::neon_butterflies::NeonF32Butterfly8&lt;T&gt;::perform_fft_butterfly_multi (12 samples, 0.02%)</title><rect x="44.0261%" y="165" width="0.0204%" height="15" fill="rgb(235,28,35)" fg:x="25890" fg:w="12"/><text x="44.2761%" y="175.50"></text></g><g><title>perf`rustfft::array_utils::iter_chunks (12 samples, 0.02%)</title><rect x="44.0261%" y="149" width="0.0204%" height="15" fill="rgb(210,56,17)" fg:x="25890" fg:w="12"/><text x="44.2761%" y="159.50"></text></g><g><title>perf`rustfft::neon::neon_butterflies::NeonF32Butterfly8&lt;T&gt;::perform_fft_butterfly_multi::_{{closure}} (12 samples, 0.02%)</title><rect x="44.0261%" y="133" width="0.0204%" height="15" fill="rgb(224,130,29)" fg:x="25890" fg:w="12"/><text x="44.2761%" y="143.50"></text></g><g><title>perf`&lt;rustfft::neon::neon_radix4::Neon32Radix4&lt;T&gt; as rustfft::Fft&lt;T&gt;&gt;::process_outofplace_with_scratch (92 samples, 0.16%)</title><rect x="43.9564%" y="229" width="0.1564%" height="15" fill="rgb(235,212,8)" fg:x="25849" fg:w="92"/><text x="44.2064%" y="239.50"></text></g><g><title>perf`rustfft::array_utils::iter_chunks_zipped (92 samples, 0.16%)</title><rect x="43.9564%" y="213" width="0.1564%" height="15" fill="rgb(223,33,50)" fg:x="25849" fg:w="92"/><text x="44.2064%" y="223.50"></text></g><g><title>perf`&lt;rustfft::neon::neon_radix4::Neon32Radix4&lt;T&gt; as rustfft::Fft&lt;T&gt;&gt;::process_outofplace_with_scratch::_{{closure}} (92 samples, 0.16%)</title><rect x="43.9564%" y="197" width="0.1564%" height="15" fill="rgb(219,149,13)" fg:x="25849" fg:w="92"/><text x="44.2064%" y="207.50"></text></g><g><title>perf`rustfft::neon::neon_radix4::Neon32Radix4&lt;T&gt;::perform_fft_out_of_place (92 samples, 0.16%)</title><rect x="43.9564%" y="181" width="0.1564%" height="15" fill="rgb(250,156,29)" fg:x="25849" fg:w="92"/><text x="44.2064%" y="191.50"></text></g><g><title>perf`rustfft::neon::neon_radix4::butterfly_4_32 (39 samples, 0.07%)</title><rect x="44.0465%" y="165" width="0.0663%" height="15" fill="rgb(216,193,19)" fg:x="25902" fg:w="39"/><text x="44.2965%" y="175.50"></text></g><g><title>perf`&lt;realfft::RealToComplexEven&lt;T&gt; as realfft::RealToComplex&lt;T&gt;&gt;::process_with_scratch (121 samples, 0.21%)</title><rect x="43.9088%" y="245" width="0.2058%" height="15" fill="rgb(216,135,14)" fg:x="25821" fg:w="121"/><text x="44.1588%" y="255.50"></text></g><g><title>perf`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (16 samples, 0.03%)</title><rect x="44.1145%" y="245" width="0.0272%" height="15" fill="rgb(241,47,5)" fg:x="25942" fg:w="16"/><text x="44.3645%" y="255.50"></text></g><g><title>perf`&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (54 samples, 0.09%)</title><rect x="44.1503%" y="229" width="0.0918%" height="15" fill="rgb(233,42,35)" fg:x="25963" fg:w="54"/><text x="44.4003%" y="239.50"></text></g><g><title>perf`core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (97 samples, 0.16%)</title><rect x="44.1418%" y="245" width="0.1649%" height="15" fill="rgb(231,13,6)" fg:x="25958" fg:w="97"/><text x="44.3918%" y="255.50"></text></g><g><title>perf`&lt;usize as core::iter::range::Step&gt;::forward_unchecked (38 samples, 0.06%)</title><rect x="44.2421%" y="229" width="0.0646%" height="15" fill="rgb(207,181,40)" fg:x="26017" fg:w="38"/><text x="44.4921%" y="239.50"></text></g><g><title>perf`&lt;[T] as core::slice::specialize::SpecFill&lt;T&gt;&gt;::spec_fill (7 samples, 0.01%)</title><rect x="44.3067%" y="229" width="0.0119%" height="15" fill="rgb(254,173,49)" fg:x="26055" fg:w="7"/><text x="44.5567%" y="239.50"></text></g><g><title>perf`core::slice::_&lt;impl [T]&gt;::fill (46 samples, 0.08%)</title><rect x="44.3067%" y="245" width="0.0782%" height="15" fill="rgb(221,1,38)" fg:x="26055" fg:w="46"/><text x="44.5567%" y="255.50"></text></g><g><title>perf`&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (39 samples, 0.07%)</title><rect x="44.3186%" y="229" width="0.0663%" height="15" fill="rgb(206,124,46)" fg:x="26062" fg:w="39"/><text x="44.5686%" y="239.50"></text></g><g><title>perf`num_complex::Complex&lt;T&gt;::new (21 samples, 0.04%)</title><rect x="44.3849%" y="245" width="0.0357%" height="15" fill="rgb(249,21,11)" fg:x="26101" fg:w="21"/><text x="44.6349%" y="255.50"></text></g><g><title>perf`convrs::upconv::UPConv::process_block (1,200 samples, 2.04%)</title><rect x="42.4395%" y="261" width="2.0406%" height="15" fill="rgb(222,201,40)" fg:x="24957" fg:w="1200"/><text x="42.6895%" y="271.50">p..</text></g><g><title>perf`num_complex::opassign::_&lt;impl core::ops::arith::AddAssign for num_complex::Complex&lt;T&gt;&gt;::add_assign (35 samples, 0.06%)</title><rect x="44.4206%" y="245" width="0.0595%" height="15" fill="rgb(235,61,29)" fg:x="26122" fg:w="35"/><text x="44.6706%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (28 samples, 0.05%)</title><rect x="44.4802%" y="245" width="0.0476%" height="15" fill="rgb(219,207,3)" fg:x="26157" fg:w="28"/><text x="44.7302%" y="255.50"></text></g><g><title>perf`&lt;[T] as core::slice::specialize::SpecFill&lt;T&gt;&gt;::spec_fill (115 samples, 0.20%)</title><rect x="44.5278%" y="197" width="0.1956%" height="15" fill="rgb(222,56,46)" fg:x="26185" fg:w="115"/><text x="44.7778%" y="207.50"></text></g><g><title>perf`convrs::upconv::UPConv::update_filter (560 samples, 0.95%)</title><rect x="44.4802%" y="261" width="0.9523%" height="15" fill="rgb(239,76,54)" fg:x="26157" fg:w="560"/><text x="44.7302%" y="271.50"></text></g><g><title>perf`&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (532 samples, 0.90%)</title><rect x="44.5278%" y="245" width="0.9047%" height="15" fill="rgb(231,124,27)" fg:x="26185" fg:w="532"/><text x="44.7778%" y="255.50"></text></g><g><title>perf`convrs::upconv::UPConv::update_filter::_{{closure}} (532 samples, 0.90%)</title><rect x="44.5278%" y="229" width="0.9047%" height="15" fill="rgb(249,195,6)" fg:x="26185" fg:w="532"/><text x="44.7778%" y="239.50"></text></g><g><title>perf`core::slice::_&lt;impl [T]&gt;::fill (532 samples, 0.90%)</title><rect x="44.5278%" y="213" width="0.9047%" height="15" fill="rgb(237,174,47)" fg:x="26185" fg:w="532"/><text x="44.7778%" y="223.50"></text></g><g><title>perf`&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (417 samples, 0.71%)</title><rect x="44.7233%" y="197" width="0.7091%" height="15" fill="rgb(206,201,31)" fg:x="26300" fg:w="417"/><text x="44.9733%" y="207.50"></text></g><g><title>perf`num_complex::opassign::_&lt;impl core::ops::arith::AddAssign for num_complex::Complex&lt;T&gt;&gt;::add_assign (6 samples, 0.01%)</title><rect x="45.4409%" y="261" width="0.0102%" height="15" fill="rgb(231,57,52)" fg:x="26722" fg:w="6"/><text x="45.6909%" y="271.50"></text></g><g><title>perf`&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (4,028 samples, 6.85%)</title><rect x="52.2549%" y="245" width="6.8496%" height="15" fill="rgb(248,177,22)" fg:x="30729" fg:w="4028"/><text x="52.5049%" y="255.50">perf`&lt;all..</text></g><g><title>perf`&lt;crossbeam_utils::cache_padded::CachePadded&lt;T&gt; as core::ops::deref::Deref&gt;::deref (1,323 samples, 2.25%)</title><rect x="59.1045%" y="245" width="2.2498%" height="15" fill="rgb(215,211,37)" fg:x="34757" fg:w="1323"/><text x="59.3545%" y="255.50">p..</text></g><g><title>perf`core::cell::Cell&lt;T&gt;::get (3,931 samples, 6.68%)</title><rect x="61.3543%" y="245" width="6.6847%" height="15" fill="rgb(241,128,51)" fg:x="36080" fg:w="3931"/><text x="61.6043%" y="255.50">perf`core..</text></g><g><title>perf`core::cell::Cell&lt;T&gt;::set (4,059 samples, 6.90%)</title><rect x="68.0390%" y="245" width="6.9024%" height="15" fill="rgb(227,165,31)" fg:x="40011" fg:w="4059"/><text x="68.2890%" y="255.50">perf`core..</text></g><g><title>perf`core::sync::atomic::AtomicUsize::load (7,845 samples, 13.34%)</title><rect x="84.0033%" y="229" width="13.3405%" height="15" fill="rgb(228,167,24)" fg:x="49399" fg:w="7845"/><text x="84.2533%" y="239.50">perf`core::sync::ato..</text></g><g><title>perf`core::sync::atomic::atomic_load (5,266 samples, 8.95%)</title><rect x="88.3889%" y="213" width="8.9549%" height="15" fill="rgb(228,143,12)" fg:x="51978" fg:w="5266"/><text x="88.6389%" y="223.50">perf`core::sy..</text></g><g><title>perf`rtrb::Consumer&lt;T&gt;::pop (31,855 samples, 54.17%)</title><rect x="45.4511%" y="261" width="54.1696%" height="15" fill="rgb(249,149,8)" fg:x="26728" fg:w="31855"/><text x="45.7011%" y="271.50">perf`rtrb::Consumer&lt;T&gt;::pop</text></g><g><title>perf`rtrb::Consumer&lt;T&gt;::next_head (14,513 samples, 24.68%)</title><rect x="74.9413%" y="245" width="24.6795%" height="15" fill="rgb(243,35,44)" fg:x="44070" fg:w="14513"/><text x="75.1913%" y="255.50">perf`rtrb::Consumer&lt;T&gt;::next_head</text></g><g><title>perf`core::sync::atomic::atomic_load (1,339 samples, 2.28%)</title><rect x="97.3438%" y="229" width="2.2770%" height="15" fill="rgb(246,89,9)" fg:x="57244" fg:w="1339"/><text x="97.5938%" y="239.50">p..</text></g><g><title>perf`core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (16 samples, 0.03%)</title><rect x="99.6208%" y="245" width="0.0272%" height="15" fill="rgb(233,213,13)" fg:x="58583" fg:w="16"/><text x="99.8708%" y="255.50"></text></g><g><title>perf`&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (120 samples, 0.20%)</title><rect x="99.7143%" y="213" width="0.2041%" height="15" fill="rgb(233,141,41)" fg:x="58638" fg:w="120"/><text x="99.9643%" y="223.50"></text></g><g><title>perf`rtrb::chunks::ReadChunk&lt;T&gt;::commit_all (221 samples, 0.38%)</title><rect x="99.6208%" y="261" width="0.3758%" height="15" fill="rgb(239,167,4)" fg:x="58583" fg:w="221"/><text x="99.8708%" y="271.50"></text></g><g><title>perf`rtrb::chunks::ReadChunk&lt;T&gt;::commit_unchecked (205 samples, 0.35%)</title><rect x="99.6480%" y="245" width="0.3486%" height="15" fill="rgb(209,217,16)" fg:x="58599" fg:w="205"/><text x="99.8980%" y="255.50"></text></g><g><title>perf`core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (184 samples, 0.31%)</title><rect x="99.6837%" y="229" width="0.3129%" height="15" fill="rgb(219,88,35)" fg:x="58620" fg:w="184"/><text x="99.9337%" y="239.50"></text></g><g><title>perf`&lt;usize as core::iter::range::Step&gt;::forward_unchecked (46 samples, 0.08%)</title><rect x="99.9184%" y="213" width="0.0782%" height="15" fill="rgb(220,193,23)" fg:x="58758" fg:w="46"/><text x="100.1684%" y="223.50"></text></g><g><title>all (58,806 samples, 100%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(230,90,52)" fg:x="0" fg:w="58806"/><text x="0.2500%" y="479.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (39,119 samples, 66.52%)</title><rect x="33.4779%" y="453" width="66.5221%" height="15" fill="rgb(252,106,19)" fg:x="19687" fg:w="39119"/><text x="33.7279%" y="463.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (39,119 samples, 66.52%)</title><rect x="33.4779%" y="437" width="66.5221%" height="15" fill="rgb(206,74,20)" fg:x="19687" fg:w="39119"/><text x="33.7279%" y="447.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>perf`std::sys::pal::unix::thread::Thread::new::thread_start (39,119 samples, 66.52%)</title><rect x="33.4779%" y="421" width="66.5221%" height="15" fill="rgb(230,138,44)" fg:x="19687" fg:w="39119"/><text x="33.7279%" y="431.50">perf`std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>perf`core::ops::function::FnOnce::call_once{{vtable.shim}} (39,119 samples, 66.52%)</title><rect x="33.4779%" y="405" width="66.5221%" height="15" fill="rgb(235,182,43)" fg:x="19687" fg:w="39119"/><text x="33.7279%" y="415.50">perf`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>perf`std::thread::Builder::spawn_unchecked_::_{{closure}} (39,119 samples, 66.52%)</title><rect x="33.4779%" y="389" width="66.5221%" height="15" fill="rgb(242,16,51)" fg:x="19687" fg:w="39119"/><text x="33.7279%" y="399.50">perf`std::thread::Builder::spawn_unchecked_::_{{closure}}</text></g><g><title>perf`std::panicking::try (39,119 samples, 66.52%)</title><rect x="33.4779%" y="373" width="66.5221%" height="15" fill="rgb(248,9,4)" fg:x="19687" fg:w="39119"/><text x="33.7279%" y="383.50">perf`std::panicking::try</text></g><g><title>perf`__rust_try (39,119 samples, 66.52%)</title><rect x="33.4779%" y="357" width="66.5221%" height="15" fill="rgb(210,31,22)" fg:x="19687" fg:w="39119"/><text x="33.7279%" y="367.50">perf`__rust_try</text></g><g><title>perf`std::panicking::try::do_call (39,119 samples, 66.52%)</title><rect x="33.4779%" y="341" width="66.5221%" height="15" fill="rgb(239,54,39)" fg:x="19687" fg:w="39119"/><text x="33.7279%" y="351.50">perf`std::panicking::try::do_call</text></g><g><title>perf`&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (39,119 samples, 66.52%)</title><rect x="33.4779%" y="325" width="66.5221%" height="15" fill="rgb(230,99,41)" fg:x="19687" fg:w="39119"/><text x="33.7279%" y="335.50">perf`&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>perf`std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (39,119 samples, 66.52%)</title><rect x="33.4779%" y="309" width="66.5221%" height="15" fill="rgb(253,106,12)" fg:x="19687" fg:w="39119"/><text x="33.7279%" y="319.50">perf`std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}}</text></g><g><title>perf`std::sys_common::backtrace::__rust_begin_short_backtrace (39,119 samples, 66.52%)</title><rect x="33.4779%" y="293" width="66.5221%" height="15" fill="rgb(213,46,41)" fg:x="19687" fg:w="39119"/><text x="33.7279%" y="303.50">perf`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>perf`convrs::conv::Conv::new::_{{closure}} (39,119 samples, 66.52%)</title><rect x="33.4779%" y="277" width="66.5221%" height="15" fill="rgb(215,133,35)" fg:x="19687" fg:w="39119"/><text x="33.7279%" y="287.50">perf`convrs::conv::Conv::new::_{{closure}}</text></g></svg></svg>